{"db_id": "concert_singer", "question": "How many singers do we have?", "query": "SELECT count(*) FROM singer", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [[6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: How many singers do we have?"}
{"db_id": "concert_singer", "question": "What is the total number of singers?", "query": "SELECT count(*) FROM singer", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [[6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What is the total number of singers?"}
{"db_id": "concert_singer", "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: Show name, country, age for all singers ordered by age from the oldest to the youngest."}
{"db_id": "concert_singer", "question": "What are the names, countries, and ages for every singer in descending order of age?", "query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Joe Sharp", "Netherlands", 52], ["John Nizinik", "France", 43], ["Rose White", "France", 41], ["Timbaland", "United States", 32], ["Justin Brown", "France", 29], ["Tribal King", "France", 25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What are the names, countries, and ages for every singer in descending order of age?"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age of all singers from France?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [[34.5, 25, 43]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What is the average, minimum, and maximum age of all singers from France?"}
{"db_id": "concert_singer", "question": "What is the average, minimum, and maximum age for all French singers?", "query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [[34.5, 25, 43]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What is the average, minimum, and maximum age for all French singers?"}
{"db_id": "concert_singer", "question": "Show the name and the release year of the song by the youngest singer.", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Love", "2016"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: Show the name and the release year of the song by the youngest singer."}
{"db_id": "concert_singer", "question": "What are the names and release years for all the songs of the youngest singer?", "query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Love", "2016"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What are the names and release years for all the songs of the youngest singer?"}
{"db_id": "concert_singer", "question": "What are all distinct countries where singers above age 20 are from?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Netherlands"], ["United States"], ["France"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What are all distinct countries where singers above age 20 are from?"}
{"db_id": "concert_singer", "question": "What are  the different countries with singers above age 20?", "query": "SELECT DISTINCT country FROM singer WHERE age  >  20", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Netherlands"], ["United States"], ["France"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What are  the different countries with singers above age 20?"}
{"db_id": "concert_singer", "question": "Show all countries and the number of singers in each country.", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["France", 4], ["Netherlands", 1], ["United States", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: Show all countries and the number of singers in each country."}
{"db_id": "concert_singer", "question": "How many singers are from each country?", "query": "SELECT country ,  count(*) FROM singer GROUP BY country", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["France", 4], ["Netherlands", 1], ["United States", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: How many singers are from each country?"}
{"db_id": "concert_singer", "question": "List all song names by singers above the average age.", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["You"], ["Sun"], ["Gentleman"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: List all song names by singers above the average age."}
{"db_id": "concert_singer", "question": "What are all the song names by singers who are older than average?", "query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["You"], ["Sun"], ["Gentleman"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What are all the song names by singers who are older than average?"}
{"db_id": "concert_singer", "question": "What is the maximum capacity and the average of all stadiums ?", "query": "select max(capacity), average from stadium", "table_data_path": "csv_files/concert_singer/stadium/data.csv", "execution_results": [[52500, 730]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nStadium_ID,Location,Name,Capacity,Highest,Lowest,Average\n1,Raith Rovers,Stark's Park,10104,4812,1294,2106\n2,Ayr United,Somerset Park,11998,2363,1057,1477\n3,East Fife,Bayview Stadium,2000,1980,533,864\n4,Queen's Park,Hampden Park,52500,1763,466,730\n5,Stirling Albion,Forthbank Stadium,3808,1125,404,642\n6,Arbroath,Gayfield Park,4125,921,411,638\n7,Alloa Athletic,Recreation Park,3100,1057,331,637\n9,Peterhead,Balmoor,4000,837,400,615\n10,Brechin City,Glebe Park,3960,780,315,552\n\nQuestion: What is the maximum capacity and the average of all stadiums ?"}
{"db_id": "concert_singer", "question": "What is the average and maximum capacities for all stadiums ?", "query": "select avg(capacity) ,  max(capacity) from stadium", "table_data_path": "csv_files/concert_singer/stadium/data.csv", "execution_results": [[10621.666666666666, 52500]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nStadium_ID,Location,Name,Capacity,Highest,Lowest,Average\n1,Raith Rovers,Stark's Park,10104,4812,1294,2106\n2,Ayr United,Somerset Park,11998,2363,1057,1477\n3,East Fife,Bayview Stadium,2000,1980,533,864\n4,Queen's Park,Hampden Park,52500,1763,466,730\n5,Stirling Albion,Forthbank Stadium,3808,1125,404,642\n6,Arbroath,Gayfield Park,4125,921,411,638\n7,Alloa Athletic,Recreation Park,3100,1057,331,637\n9,Peterhead,Balmoor,4000,837,400,615\n10,Brechin City,Glebe Park,3960,780,315,552\n\nQuestion: What is the average and maximum capacities for all stadiums ?"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "table_data_path": "csv_files/concert_singer/stadium/data.csv", "execution_results": [["Stark's Park", 10104]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nStadium_ID,Location,Name,Capacity,Highest,Lowest,Average\n1,Raith Rovers,Stark's Park,10104,4812,1294,2106\n2,Ayr United,Somerset Park,11998,2363,1057,1477\n3,East Fife,Bayview Stadium,2000,1980,533,864\n4,Queen's Park,Hampden Park,52500,1763,466,730\n5,Stirling Albion,Forthbank Stadium,3808,1125,404,642\n6,Arbroath,Gayfield Park,4125,921,411,638\n7,Alloa Athletic,Recreation Park,3100,1057,331,637\n9,Peterhead,Balmoor,4000,837,400,615\n10,Brechin City,Glebe Park,3960,780,315,552\n\nQuestion: What is the name and capacity for the stadium with highest average attendance?"}
{"db_id": "concert_singer", "question": "What is the name and capacity for the stadium with the highest average attendance?", "query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "table_data_path": "csv_files/concert_singer/stadium/data.csv", "execution_results": [["Stark's Park", 10104]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nStadium_ID,Location,Name,Capacity,Highest,Lowest,Average\n1,Raith Rovers,Stark's Park,10104,4812,1294,2106\n2,Ayr United,Somerset Park,11998,2363,1057,1477\n3,East Fife,Bayview Stadium,2000,1980,533,864\n4,Queen's Park,Hampden Park,52500,1763,466,730\n5,Stirling Albion,Forthbank Stadium,3808,1125,404,642\n6,Arbroath,Gayfield Park,4125,921,411,638\n7,Alloa Athletic,Recreation Park,3100,1057,331,637\n9,Peterhead,Balmoor,4000,837,400,615\n10,Brechin City,Glebe Park,3960,780,315,552\n\nQuestion: What is the name and capacity for the stadium with the highest average attendance?"}
{"db_id": "concert_singer", "question": "How many concerts are there in year 2014 or 2015?", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "table_data_path": "csv_files/concert_singer/concert/data.csv", "execution_results": [[6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nconcert_ID,concert_Name,Theme,Stadium_ID,Year\n1,Auditions,Free choice,1,2014\n2,Super bootcamp,Free choice 2,2,2014\n3,Home Visits,Bleeding Love,2,2015\n4,Week 1,Wide Awake,10,2014\n5,Week 1,Happy Tonight,9,2015\n6,Week 2,Party All Night,7,2015\n\nQuestion: How many concerts are there in year 2014 or 2015?"}
{"db_id": "concert_singer", "question": "How many concerts occurred in 2014 or 2015?", "query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "table_data_path": "csv_files/concert_singer/concert/data.csv", "execution_results": [[6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nconcert_ID,concert_Name,Theme,Stadium_ID,Year\n1,Auditions,Free choice,1,2014\n2,Super bootcamp,Free choice 2,2,2014\n3,Home Visits,Bleeding Love,2,2015\n4,Week 1,Wide Awake,10,2014\n5,Week 1,Happy Tonight,9,2015\n6,Week 2,Party All Night,7,2015\n\nQuestion: How many concerts occurred in 2014 or 2015?"}
{"db_id": "concert_singer", "question": "Which year has most number of concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/concert_singer/concert/data.csv", "execution_results": [["2015"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nconcert_ID,concert_Name,Theme,Stadium_ID,Year\n1,Auditions,Free choice,1,2014\n2,Super bootcamp,Free choice 2,2,2014\n3,Home Visits,Bleeding Love,2,2015\n4,Week 1,Wide Awake,10,2014\n5,Week 1,Happy Tonight,9,2015\n6,Week 2,Party All Night,7,2015\n\nQuestion: Which year has most number of concerts?"}
{"db_id": "concert_singer", "question": "What is the year that had the most concerts?", "query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/concert_singer/concert/data.csv", "execution_results": [["2015"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nconcert_ID,concert_Name,Theme,Stadium_ID,Year\n1,Auditions,Free choice,1,2014\n2,Super bootcamp,Free choice 2,2,2014\n3,Home Visits,Bleeding Love,2,2015\n4,Week 1,Wide Awake,10,2014\n5,Week 1,Happy Tonight,9,2015\n6,Week 2,Party All Night,7,2015\n\nQuestion: What is the year that had the most concerts?"}
{"db_id": "concert_singer", "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["France"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: Show countries where a singer above age 40 and a singer below 30 are from."}
{"db_id": "concert_singer", "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Justin Brown", "France"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: what is the name and nation of the singer who have a song having 'Hey' in its name?"}
{"db_id": "concert_singer", "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "table_data_path": "csv_files/concert_singer/singer/data.csv", "execution_results": [["Justin Brown", "France"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Country,Song_Name,Song_release_year,Age,Is_male\n1,Joe Sharp,Netherlands,You,1992,52,F\n2,Timbaland,United States,Dangerous,2008,32,T\n3,Justin Brown,France,Hey Oh,2013,29,T\n4,Rose White,France,Sun,2003,41,F\n5,John Nizinik,France,Gentleman,2014,43,T\n6,Tribal King,France,Love,2016,25,T\n\nQuestion: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?"}
{"db_id": "pets_1", "question": "Find the number of pets whose weight is heavier than 10.", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the number of pets whose weight is heavier than 10."}
{"db_id": "pets_1", "question": "How many pets have a greater weight than 10?", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: How many pets have a greater weight than 10?"}
{"db_id": "pets_1", "question": "Find the weight of the youngest dog.", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[9.3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the weight of the youngest dog."}
{"db_id": "pets_1", "question": "How much does the youngest dog weigh?", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[9.3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: How much does the youngest dog weigh?"}
{"db_id": "pets_1", "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[12.0, "cat"], [13.4, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the maximum weight for each type of pet. List the maximum weight and pet type."}
{"db_id": "pets_1", "question": "List the maximum weight and type for each type of pet.", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[12.0, "cat"], [13.4, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: List the maximum weight and type for each type of pet."}
{"db_id": "pets_1", "question": "Find the number of distinct type of pets.", "query": "SELECT count(DISTINCT pettype) FROM pets", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the number of distinct type of pets."}
{"db_id": "pets_1", "question": "How many different types of pet are there?", "query": "SELECT count(DISTINCT pettype) FROM pets", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: How many different types of pet are there?"}
{"db_id": "pets_1", "question": "Find the type and weight of the youngest pet.", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [["dog", 9.3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the type and weight of the youngest pet."}
{"db_id": "pets_1", "question": "What type of pet is the youngest animal, and how much does it weigh?", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [["dog", 9.3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: What type of pet is the youngest animal, and how much does it weigh?"}
{"db_id": "pets_1", "question": "Find the id and weight of all pets whose age is older than 1.", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2001, 12.0], [2002, 13.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the id and weight of all pets whose age is older than 1."}
{"db_id": "pets_1", "question": "What is the id and weight of every pet who is older than 1?", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[2001, 12.0], [2002, 13.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: What is the id and weight of every pet who is older than 1?"}
{"db_id": "pets_1", "question": "Find the average and maximum age for each type of pet.", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the average and maximum age for each type of pet."}
{"db_id": "pets_1", "question": "What is the average and maximum age for each pet type?", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[3.0, 3, "cat"], [1.5, 2, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: What is the average and maximum age for each pet type?"}
{"db_id": "pets_1", "question": "Find the average weight for each pet type.", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[12.0, "cat"], [11.350000000000001, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: Find the average weight for each pet type."}
{"db_id": "pets_1", "question": "What is the average weight for each type of pet?", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "table_data_path": "csv_files/pets_1/pets/data.csv", "execution_results": [[12.0, "cat"], [11.350000000000001, "dog"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPetID,PetType,pet_age,weight\n2001,cat,3,12.0\n2002,dog,2,13.4\n2003,dog,1,9.3\n\nQuestion: What is the average weight for each type of pet?"}
{"db_id": "car_1", "question": "How many continents are there?", "query": "SELECT count(*) FROM CONTINENTS;", "table_data_path": "csv_files/car_1/continents/data.csv", "execution_results": [[5]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nContId,Continent\n1,america\n2,europe\n3,asia\n4,africa\n5,australia\n\nQuestion: How many continents are there?"}
{"db_id": "car_1", "question": "What is the number of continents?", "query": "SELECT count(*) FROM CONTINENTS;", "table_data_path": "csv_files/car_1/continents/data.csv", "execution_results": [[5]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nContId,Continent\n1,america\n2,europe\n3,asia\n4,africa\n5,australia\n\nQuestion: What is the number of continents?"}
{"db_id": "car_1", "question": "How many countries are listed?", "query": "SELECT count(*) FROM COUNTRIES;", "table_data_path": "csv_files/car_1/countries/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCountryId,CountryName,Continent\n1,usa,1\n2,germany,2\n3,france,2\n4,japan,3\n5,italy,2\n6,sweden,2\n7,uk,2\n8,korea,3\n9,russia,2\n10,nigeria,4\n\nQuestion: How many countries are listed?"}
{"db_id": "car_1", "question": "How many countries exist?", "query": "SELECT count(*) FROM COUNTRIES;", "table_data_path": "csv_files/car_1/countries/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCountryId,CountryName,Continent\n1,usa,1\n2,germany,2\n3,france,2\n4,japan,3\n5,italy,2\n6,sweden,2\n7,uk,2\n8,korea,3\n9,russia,2\n10,nigeria,4\n\nQuestion: How many countries exist?"}
{"db_id": "car_1", "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[28.862318840579714]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average miles per gallon(mpg) of the cars with 4 cylinders?"}
{"db_id": "car_1", "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[28.862318840579714]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average miles per gallon of all the cards with 4 cylinders?"}
{"db_id": "car_1", "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[4141]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the smallest weight of the car produced with 8 cylinders on 1974 ?"}
{"db_id": "car_1", "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[4141]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the minimum weight of the car with 8 cylinders produced in 1974 ?"}
{"db_id": "car_1", "question": "What are all the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "table_data_path": "csv_files/car_1/model_list/data.csv", "execution_results": [[1, "amc"], [2, "audi"], [3, "bmw"], [4, "buick"], [4, "cadillac"], [5, "capri"], [4, "chevrolet"], [6, "chrysler"], [7, "citroen"], [8, "datsun"], [6, "dodge"], [9, "fiat"], [5, "ford"], [10, "hi"], [11, "honda"], [12, "mazda"], [13, "mercedes"], [13, "mercedes-benz"], [5, "mercury"], [8, "nissan"], [4, "oldsmobile"], [14, "opel"], [15, "peugeot"], [6, "plymouth"], [4, "pontiac"], [16, "renault"], [17, "saab"], [18, "subaru"], [19, "toyota"], [20, "triumph"], [2, "volkswagen"], [21, "volvo"], [22, "kia"], [23, "hyundai"], [6, "jeep"], [19, "scion"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nModelId,Maker,Model\n1,1,amc\n2,2,audi\n3,3,bmw\n4,4,buick\n5,4,cadillac\n6,5,capri\n7,4,chevrolet\n8,6,chrysler\n9,7,citroen\n10,8,datsun\n\nQuestion: What are all the makers and models?"}
{"db_id": "car_1", "question": "What are the makers and models?", "query": "SELECT Maker ,  Model FROM MODEL_LIST;", "table_data_path": "csv_files/car_1/model_list/data.csv", "execution_results": [[1, "amc"], [2, "audi"], [3, "bmw"], [4, "buick"], [4, "cadillac"], [5, "capri"], [4, "chevrolet"], [6, "chrysler"], [7, "citroen"], [8, "datsun"], [6, "dodge"], [9, "fiat"], [5, "ford"], [10, "hi"], [11, "honda"], [12, "mazda"], [13, "mercedes"], [13, "mercedes-benz"], [5, "mercury"], [8, "nissan"], [4, "oldsmobile"], [14, "opel"], [15, "peugeot"], [6, "plymouth"], [4, "pontiac"], [16, "renault"], [17, "saab"], [18, "subaru"], [19, "toyota"], [20, "triumph"], [2, "volkswagen"], [21, "volvo"], [22, "kia"], [23, "hyundai"], [6, "jeep"], [19, "scion"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nModelId,Maker,Model\n1,1,amc\n2,2,audi\n3,3,bmw\n4,4,buick\n5,4,cadillac\n6,5,capri\n7,4,chevrolet\n8,6,chrysler\n9,7,citroen\n10,8,datsun\n\nQuestion: What are the makers and models?"}
{"db_id": "car_1", "question": "What is the number of the cars with horsepower more than 150?", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[281]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the number of the cars with horsepower more than 150?"}
{"db_id": "car_1", "question": "What is the number of cars with a horsepower greater than 150?", "query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[281]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the number of cars with a horsepower greater than 150?"}
{"db_id": "car_1", "question": "What is the average weight of cars each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[3441.3142857142857, 1970], [2960.344827586207, 1971], [3237.714285714286, 1972], [3419.025, 1973], [2877.925925925926, 1974], [3176.8, 1975], [3078.735294117647, 1976], [2997.3571428571427, 1977], [2861.8055555555557, 1978], [3055.344827586207, 1979], [2436.655172413793, 1980], [2532.1666666666665, 1981], [2453.548387096774, 1982]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average weight of cars each year?"}
{"db_id": "car_1", "question": "What is the average weight and year for each year?", "query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[3441.3142857142857, 1970], [2960.344827586207, 1971], [3237.714285714286, 1972], [3419.025, 1973], [2877.925925925926, 1974], [3176.8, 1975], [3078.735294117647, 1976], [2997.3571428571427, 1977], [2861.8055555555557, 1978], [3055.344827586207, 1979], [2436.655172413793, 1980], [2532.1666666666665, 1981], [2453.548387096774, 1982]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average weight and year for each year?"}
{"db_id": "car_1", "question": "What is the average horsepower of the cars before 1980?", "query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[111.13291139240506]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average horsepower of the cars before 1980?"}
{"db_id": "car_1", "question": "What is the average horsepower for all cars produced before 1980 ?", "query": "select avg(horsepower) from cars_data where year  <  1980;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[111.13291139240506]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the average horsepower for all cars produced before 1980 ?"}
{"db_id": "car_1", "question": "What is the maximum accelerate for different number of cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[13.5, 3], [24.8, 4], [20.1, 5], [21.0, 6], [22.2, 8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the maximum accelerate for different number of cylinders?"}
{"db_id": "car_1", "question": "What is the maximum accelerate for all the different cylinders?", "query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[13.5, 3], [24.8, 4], [20.1, 5], [21.0, 6], [22.2, 8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the maximum accelerate for all the different cylinders?"}
{"db_id": "car_1", "question": "Which model has the most version(make) of cars?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "table_data_path": "csv_files/car_1/car_names/data.csv", "execution_results": [["ford"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMakeId,Model,Make\n1,chevrolet,chevrolet chevelle malibu\n2,buick,buick skylark 320\n3,plymouth,plymouth satellite\n4,amc,amc rebel sst\n5,ford,ford torino\n6,ford,ford galaxie 500\n7,chevrolet,chevrolet impala\n8,plymouth,plymouth fury iii\n9,pontiac,pontiac catalina\n10,amc,amc ambassador dpl\n\nQuestion: Which model has the most version(make) of cars?"}
{"db_id": "car_1", "question": "What model has the most different versions?", "query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "table_data_path": "csv_files/car_1/car_names/data.csv", "execution_results": [["ford"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMakeId,Model,Make\n1,chevrolet,chevrolet chevelle malibu\n2,buick,buick skylark 320\n3,plymouth,plymouth satellite\n4,amc,amc rebel sst\n5,ford,ford torino\n6,ford,ford galaxie 500\n7,chevrolet,chevrolet impala\n8,plymouth,plymouth fury iii\n9,pontiac,pontiac catalina\n10,amc,amc ambassador dpl\n\nQuestion: What model has the most different versions?"}
{"db_id": "car_1", "question": "How many cars have more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[195]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: How many cars have more than 4 cylinders?"}
{"db_id": "car_1", "question": "What is the number of cars with more than 4 cylinders?", "query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[195]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the number of cars with more than 4 cylinders?"}
{"db_id": "car_1", "question": "how many cars were produced in 1980?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[29]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: how many cars were produced in 1980?"}
{"db_id": "car_1", "question": "In 1980, how many cars were made?", "query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[29]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: In 1980, how many cars were made?"}
{"db_id": "car_1", "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[1970], [1971], [1972], [1973], [1974], [1975], [1976], [1977], [1978], [1979], [1980], [1981], [1982]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: In which years cars were produced weighing no less than 3000 and no more than 4000 ?"}
{"db_id": "car_1", "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "query": "select distinct year from cars_data where weight between 3000 and 4000;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[1970], [1971], [1972], [1973], [1974], [1975], [1976], [1977], [1978], [1979], [1980], [1981], [1982]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the largest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [["71"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the horsepower of the car with the largest accelerate?"}
{"db_id": "car_1", "question": "What is the horsepower of the car with the greatest accelerate?", "query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [["71"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the horsepower of the car with the greatest accelerate?"}
{"db_id": "car_1", "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[39]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: How many cars have a larger accelerate than the car with the largest horsepower?"}
{"db_id": "car_1", "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[39]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the number of cars with a greater accelerate than the one with the most horsepower?"}
{"db_id": "car_1", "question": "How many cars has over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[108]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: How many cars has over 6 cylinders?"}
{"db_id": "car_1", "question": "What is the number of carsw ith over 6 cylinders?", "query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "table_data_path": "csv_files/car_1/cars_data/data.csv", "execution_results": [[108]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nId,MPG,Cylinders,Edispl,Horsepower,Weight,Accelerate,Year\n1,18,8,307.0,130,3504,12.0,1970\n2,15,8,350.0,165,3693,11.5,1970\n3,18,8,318.0,150,3436,11.0,1970\n4,16,8,304.0,150,3433,12.0,1970\n5,17,8,302.0,140,3449,10.5,1970\n6,15,8,429.0,198,4341,10.0,1970\n7,14,8,454.0,220,4354,9.0,1970\n8,14,8,440.0,215,4312,8.5,1970\n9,14,8,455.0,225,4425,10.0,1970\n10,15,8,390.0,190,3850,8.5,1970\n\nQuestion: What is the number of carsw ith over 6 cylinders?"}
{"db_id": "flight_2", "question": "Which country does Airline \"JetBlue Airways\" belong to?", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["USA"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: Which country does Airline \"JetBlue Airways\" belong to?"}
{"db_id": "flight_2", "question": "What country is Jetblue Airways affiliated with?", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["USA"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: What country is Jetblue Airways affiliated with?"}
{"db_id": "flight_2", "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["JetBlue"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: What is the abbreviation of Airline \"JetBlue Airways\"?"}
{"db_id": "flight_2", "question": "Which abbreviation corresponds to Jetblue Airways?", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["JetBlue"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: Which abbreviation corresponds to Jetblue Airways?"}
{"db_id": "flight_2", "question": "List all airline names and their abbreviations in \"USA\".", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["United Airlines", "UAL"], ["US Airways", "USAir"], ["Delta Airlines", "Delta"], ["Southwest Airlines", "Southwest"], ["American Airlines", "American"], ["Northwest Airlines", "Northwest"], ["Continental Airlines", "Continental"], ["JetBlue Airways", "JetBlue"], ["Frontier Airlines", "Frontier"], ["AirTran Airways", "AirTran"], ["Allegiant Air", "Allegiant"], ["Virgin America", "Virgin"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: List all airline names and their abbreviations in \"USA\"."}
{"db_id": "flight_2", "question": "What are the airline names and abbreviations for airlines in the USA?", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["United Airlines", "UAL"], ["US Airways", "USAir"], ["Delta Airlines", "Delta"], ["Southwest Airlines", "Southwest"], ["American Airlines", "American"], ["Northwest Airlines", "Northwest"], ["Continental Airlines", "Continental"], ["JetBlue Airways", "JetBlue"], ["Frontier Airlines", "Frontier"], ["AirTran Airways", "AirTran"], ["Allegiant Air", "Allegiant"], ["Virgin America", "Virgin"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: What are the airline names and abbreviations for airlines in the USA?"}
{"db_id": "flight_2", "question": "How many airlines do we have?", "query": "SELECT count(*) FROM AIRLINES", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: How many airlines do we have?"}
{"db_id": "flight_2", "question": "What is the total number of airlines?", "query": "SELECT count(*) FROM AIRLINES", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: What is the total number of airlines?"}
{"db_id": "flight_2", "question": "How many airports do we have?", "query": "SELECT count(*) FROM AIRPORTS", "table_data_path": "csv_files/flight_2/airports/data.csv", "execution_results": [[100]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCity,AirportCode,AirportName,Country,CountryAbbrev\nAberdeen ,APG,Phillips AAF ,United States ,US \nAberdeen ,ABR,Municipal ,United States ,US\nAbilene ,DYS,Dyess AFB ,United States ,US\nAbilene ,ABI,Municipal ,United States ,US\nAbingdon ,VJI,Virginia Highlands ,United States ,US\nAda ,ADT,Ada ,United States ,US\nAdak Island ,ADK,Adak Island Ns ,United States ,US\nAdrian ,ADG,Lenawee County ,United States ,US\nAfton ,AFO,Municipal ,United States ,US\nAiken ,AIK,Municipal ,United States ,US\n\nQuestion: How many airports do we have?"}
{"db_id": "flight_2", "question": "Return the number of  airports.", "query": "SELECT count(*) FROM AIRPORTS", "table_data_path": "csv_files/flight_2/airports/data.csv", "execution_results": [[100]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCity,AirportCode,AirportName,Country,CountryAbbrev\nAberdeen ,APG,Phillips AAF ,United States ,US \nAberdeen ,ABR,Municipal ,United States ,US\nAbilene ,DYS,Dyess AFB ,United States ,US\nAbilene ,ABI,Municipal ,United States ,US\nAbingdon ,VJI,Virginia Highlands ,United States ,US\nAda ,ADT,Ada ,United States ,US\nAdak Island ,ADK,Adak Island Ns ,United States ,US\nAdrian ,ADG,Lenawee County ,United States ,US\nAfton ,AFO,Municipal ,United States ,US\nAiken ,AIK,Municipal ,United States ,US\n\nQuestion: Return the number of  airports."}
{"db_id": "flight_2", "question": "How many flights do we have?", "query": "SELECT count(*) FROM FLIGHTS", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[1200]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: How many flights do we have?"}
{"db_id": "flight_2", "question": "Return the number of flights.", "query": "SELECT count(*) FROM FLIGHTS", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[1200]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: Return the number of flights."}
{"db_id": "flight_2", "question": "Which airline has abbreviation 'UAL'?", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["United Airlines"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: Which airline has abbreviation 'UAL'?"}
{"db_id": "flight_2", "question": "Give the airline with abbreviation 'UAL'.", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [["United Airlines"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: Give the airline with abbreviation 'UAL'."}
{"db_id": "flight_2", "question": "How many airlines are from USA?", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: How many airlines are from USA?"}
{"db_id": "flight_2", "question": "Return the number of airlines in the USA.", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "table_data_path": "csv_files/flight_2/airlines/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nuid,Airline,Abbreviation,Country\n1,United Airlines,UAL,USA\n2,US Airways,USAir,USA\n3,Delta Airlines,Delta,USA\n4,Southwest Airlines,Southwest,USA\n5,American Airlines,American,USA\n6,Northwest Airlines,Northwest,USA\n7,Continental Airlines,Continental,USA\n8,JetBlue Airways,JetBlue,USA\n9,Frontier Airlines,Frontier,USA\n10,AirTran Airways,AirTran,USA\n\nQuestion: Return the number of airlines in the USA."}
{"db_id": "flight_2", "question": "What is the airport name for airport 'AKO'?", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "table_data_path": "csv_files/flight_2/airports/data.csv", "execution_results": [["Colorado Plains Regional Airport "]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCity,AirportCode,AirportName,Country,CountryAbbrev\nAberdeen ,APG,Phillips AAF ,United States ,US \nAberdeen ,ABR,Municipal ,United States ,US\nAbilene ,DYS,Dyess AFB ,United States ,US\nAbilene ,ABI,Municipal ,United States ,US\nAbingdon ,VJI,Virginia Highlands ,United States ,US\nAda ,ADT,Ada ,United States ,US\nAdak Island ,ADK,Adak Island Ns ,United States ,US\nAdrian ,ADG,Lenawee County ,United States ,US\nAfton ,AFO,Municipal ,United States ,US\nAiken ,AIK,Municipal ,United States ,US\n\nQuestion: What is the airport name for airport 'AKO'?"}
{"db_id": "flight_2", "question": "Return the name of the airport with code 'AKO'.", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "table_data_path": "csv_files/flight_2/airports/data.csv", "execution_results": [["Colorado Plains Regional Airport "]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCity,AirportCode,AirportName,Country,CountryAbbrev\nAberdeen ,APG,Phillips AAF ,United States ,US \nAberdeen ,ABR,Municipal ,United States ,US\nAbilene ,DYS,Dyess AFB ,United States ,US\nAbilene ,ABI,Municipal ,United States ,US\nAbingdon ,VJI,Virginia Highlands ,United States ,US\nAda ,ADT,Ada ,United States ,US\nAdak Island ,ADK,Adak Island Ns ,United States ,US\nAdrian ,ADG,Lenawee County ,United States ,US\nAfton ,AFO,Municipal ,United States ,US\nAiken ,AIK,Municipal ,United States ,US\n\nQuestion: Return the name of the airport with code 'AKO'."}
{"db_id": "flight_2", "question": "How many flights depart from 'APG'?", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: How many flights depart from 'APG'?"}
{"db_id": "flight_2", "question": "Count the number of flights departing from 'APG'.", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: Count the number of flights departing from 'APG'."}
{"db_id": "flight_2", "question": "How many flights have destination ATO?", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: How many flights have destination ATO?"}
{"db_id": "flight_2", "question": "Count the number of flights into ATO.", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "table_data_path": "csv_files/flight_2/flights/data.csv", "execution_results": [[0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nAirline,FlightNo,SourceAirport,DestAirport\n1,28, APG, ASY\n1,29, ASY, APG\n1,44, CVO, ACV\n1,45, ACV, CVO\n1,54, AHD, AHT\n1,55, AHT, AHD\n1,90, ATO, ABR\n1,91, ABR, ATO\n1,108, ANV, MMI\n1,109, MMI, ANV\n\nQuestion: Count the number of flights into ATO."}
{"db_id": "employee_hire_evaluation", "question": "How many employees are there?", "query": "SELECT count(*) FROM employee", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: How many employees are there?"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees", "query": "SELECT count(*) FROM employee", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: Count the number of employees"}
{"db_id": "employee_hire_evaluation", "question": "Sort employee names by their age in ascending order.", "query": "SELECT name FROM employee ORDER BY age", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: Sort employee names by their age in ascending order."}
{"db_id": "employee_hire_evaluation", "question": "List the names of employees and sort in ascending order of age.", "query": "SELECT name FROM employee ORDER BY age", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [["George Chuter"], ["Andrew Sheridan"], ["Lee Mears"], ["Tim Payne"], ["Matt Stevens"], ["Jason Hobson"], ["Steve Borthwick"], ["Louis Deacon"], ["Phil Vickery"], ["Mark Regan"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: List the names of employees and sort in ascending order of age."}
{"db_id": "employee_hire_evaluation", "question": "What is the number of employees from each city?", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: What is the number of employees from each city?"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of employees for each city.", "query": "SELECT count(*) ,  city FROM employee GROUP BY city", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [[3, "Bath"], [3, "Bristol"], [1, "Leicester"], [1, "Sale"], [2, "Wasps"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: Count the number of employees for each city."}
{"db_id": "employee_hire_evaluation", "question": "Which cities do more than one employee under age 30 come from?", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [["Bath"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: Which cities do more than one employee under age 30 come from?"}
{"db_id": "employee_hire_evaluation", "question": "Find the cities that have more than one employee under age 30.", "query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "table_data_path": "csv_files/employee_hire_evaluation/employee/data.csv", "execution_results": [["Bath"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Name,Age,City\n1,George Chuter,23,Bristol\n2,Lee Mears,29,Bath\n3,Mark Regan,43,Bristol\n4,Jason Hobson,30,Bristol\n5,Tim Payne,29,Wasps\n6,Andrew Sheridan,28,Sale\n7,Matt Stevens,29,Bath\n8,Phil Vickery,40,Wasps\n9,Steve Borthwick,32,Bath\n10,Louis Deacon,36,Leicester\n\nQuestion: Find the cities that have more than one employee under age 30."}
{"db_id": "employee_hire_evaluation", "question": "Find the number of shops in each location.", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Find the number of shops in each location."}
{"db_id": "employee_hire_evaluation", "question": "How many shops are there in each location?", "query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[1, "Espoo"], [1, "Helsinki"], [1, "Jakobstad"], [1, "Kotka"], [1, "Kuopio"], [1, "Lahti"], [1, "Mariehamn"], [1, "Turku"], [1, "Valkeakoski"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: How many shops are there in each location?"}
{"db_id": "employee_hire_evaluation", "question": "Find the manager name and district of the shop whose number of products is the largest.", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["Ilkka Mäkelä", "Lahden Stadion"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Find the manager name and district of the shop whose number of products is the largest."}
{"db_id": "employee_hire_evaluation", "question": "What are the manager name and district of the shop that sells the largest number of products?", "query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["Ilkka Mäkelä", "Lahden Stadion"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: What are the manager name and district of the shop that sells the largest number of products?"}
{"db_id": "employee_hire_evaluation", "question": "find the minimum and maximum number of products of all stores.", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[1600, 15000]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: find the minimum and maximum number of products of all stores."}
{"db_id": "employee_hire_evaluation", "question": "What are the minimum and maximum number of products across all the shops?", "query": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[1600, 15000]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: What are the minimum and maximum number of products across all the shops?"}
{"db_id": "employee_hire_evaluation", "question": "Return the name, location and district of all shops in descending order of number of products.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kenttä"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wiklöf Holding Arena"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Return the name, location and district of all shops in descending order of number of products."}
{"db_id": "employee_hire_evaluation", "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["FC Lahti", "Lahti", "Lahden Stadion"], ["HJK", "Helsinki", "Finnair Stadium"], ["FC Inter", "Turku", "Veritas Stadion"], ["FC Honka", "Espoo", "Tapiolan Urheilupuisto"], ["FF Jaro", "Jakobstad", "Jakobstads Centralplan"], ["FC KooTeePee", "Kotka", "Arto Tolsa Areena"], ["FC Haka", "Valkeakoski", "Tehtaan kenttä"], ["KuPS", "Kuopio", "Magnum Areena"], ["IFK Mariehamn", "Mariehamn", "Wiklöf Holding Arena"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Sort all the shops by number products in descending order, and return the name, location and district of each shop."}
{"db_id": "employee_hire_evaluation", "question": "Find the names of stores whose number products is more than the average number of products.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["HJK"], ["FC Inter"], ["FC Lahti"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Find the names of stores whose number products is more than the average number of products."}
{"db_id": "employee_hire_evaluation", "question": "Which shops' number products is above the average? Give me the shop names.", "query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [["HJK"], ["FC Inter"], ["FC Lahti"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Which shops' number products is above the average? Give me the shop names."}
{"db_id": "employee_hire_evaluation", "question": "What is total bonus given in all evaluations?", "query": "SELECT sum(bonus) FROM evaluation", "table_data_path": "csv_files/employee_hire_evaluation/evaluation/data.csv", "execution_results": [[19500.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Year_awarded,Bonus\n1,2011,3000.0\n2,2015,3200.0\n1,2016,2900.0\n4,2017,3200.0\n7,2018,3200.0\n10,2016,4000.0\n\nQuestion: What is total bonus given in all evaluations?"}
{"db_id": "employee_hire_evaluation", "question": "Find the total amount of bonus given in all the evaluations.", "query": "SELECT sum(bonus) FROM evaluation", "table_data_path": "csv_files/employee_hire_evaluation/evaluation/data.csv", "execution_results": [[19500.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nEmployee_ID,Year_awarded,Bonus\n1,2011,3000.0\n2,2015,3200.0\n1,2016,2900.0\n4,2017,3200.0\n7,2018,3200.0\n10,2016,4000.0\n\nQuestion: Find the total amount of bonus given in all the evaluations."}
{"db_id": "employee_hire_evaluation", "question": "Give me all the information about hiring.", "query": "SELECT * FROM hiring", "table_data_path": "csv_files/employee_hire_evaluation/hiring/data.csv", "execution_results": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Employee_ID,Start_from,Is_full_time\n1,1,2009,T\n1,2,2003,T\n8,3,2011,F\n4,4,2012,T\n5,5,2013,T\n2,6,2010,F\n6,7,2008,T\n\nQuestion: Give me all the information about hiring."}
{"db_id": "employee_hire_evaluation", "question": "What is all the information about hiring?", "query": "SELECT * FROM hiring", "table_data_path": "csv_files/employee_hire_evaluation/hiring/data.csv", "execution_results": [[1, 1, "2009", "T"], [1, 2, "2003", "T"], [8, 3, "2011", "F"], [4, 4, "2012", "T"], [5, 5, "2013", "T"], [2, 6, "2010", "F"], [6, 7, "2008", "T"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Employee_ID,Start_from,Is_full_time\n1,1,2009,T\n1,2,2003,T\n8,3,2011,F\n4,4,2012,T\n5,5,2013,T\n2,6,2010,F\n6,7,2008,T\n\nQuestion: What is all the information about hiring?"}
{"db_id": "employee_hire_evaluation", "question": "How many different store locations are there?", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: How many different store locations are there?"}
{"db_id": "employee_hire_evaluation", "question": "Count the number of distinct store locations.", "query": "SELECT count(DISTINCT LOCATION) FROM shop", "table_data_path": "csv_files/employee_hire_evaluation/shop/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShop_ID,Name,Location,District,Number_products,Manager_name\n1,FC Haka,Valkeakoski,Tehtaan kenttä,3516,Olli Huttunen\n2,HJK,Helsinki,Finnair Stadium,10770,Antti Muurinen\n3,FC Honka,Espoo,Tapiolan Urheilupuisto,6000,Mika Lehkosuo\n4,FC Inter,Turku,Veritas Stadion,10000,Job Dragtsma\n5,FF Jaro,Jakobstad,Jakobstads Centralplan,5000,Mika Laurikainen\n6,FC KooTeePee,Kotka,Arto Tolsa Areena,4780,Tommi Kautonen\n7,KuPS,Kuopio,Magnum Areena,3500,Kai Nyyssönen\n8,FC Lahti,Lahti,Lahden Stadion,15000,Ilkka Mäkelä\n9,IFK Mariehamn,Mariehamn,Wiklöf Holding Arena,1600,Pekka Lyyski\n\nQuestion: Count the number of distinct store locations."}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many documents do we have?", "query": "SELECT count(*) FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: How many documents do we have?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of documents.", "query": "SELECT count(*) FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Count the number of documents."}
{"db_id": "cre_Doc_Template_Mgt", "question": "List document IDs, document names, and document descriptions for all documents.", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: List document IDs, document names, and document descriptions for all documents."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, names, and descriptions for all documents?", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[0, "Introduction of OS", "n"], [1, "Understanding DB", "y"], [3, "Summer Show", "u"], [76, "Robbin CV", "y"], [80, "Welcome to NY", "h"], [82, "Data base", "w"], [2394, "Customer reviews", "y"], [3830, "Do not panic", "k"], [33930, "How Google people work", "z"], [50123, "Learning French", "r"], [651512, "How to write a CV", "f"], [801801, "How to read a book", "w"], [3540024, "Palm reading", "y"], [16514113, "A history of Arts", "h"], [385906526, "About Korea", "b"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: What are the ids, names, and descriptions for all documents?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document name and template id for document with description with the letter 'w' in it?", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [["Data base", 11], ["How to read a book", 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: What is the document name and template id for document with description with the letter 'w' in it?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the names and template ids for documents that contain the letter w in their description.", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [["Data base", 11], ["How to read a book", 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Return the names and template ids for documents that contain the letter w in their description."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[76, 20, "y"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: What is the document id, template id and description for document named \"Robbin CV\"?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[76, 20, "y"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Return the document id, template id, and description for the document with the name Robbin CV."}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many different templates do all document use?", "query": "SELECT count(DISTINCT template_id) FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: How many different templates do all document use?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of different templates used for documents.", "query": "SELECT count(DISTINCT template_id) FROM Documents", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Count the number of different templates used for documents."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template ids and number of documents using each template.", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Show all template ids and number of documents using each template."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are all different template ids used for documents, and how many times were each of them used?", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[1, 1], [4, 1], [6, 1], [7, 1], [8, 1], [10, 1], [11, 2], [14, 2], [20, 1], [21, 1], [22, 1], [25, 2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: What are all different template ids used for documents, and how many times were each of them used?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show ids for all templates that are used by more than one document.", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[11], [14], [25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: Show ids for all templates that are used by more than one document."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the template ids of any templates used in more than a single document?", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/documents/data.csv", "execution_results": [[11], [14], [25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nDocument_ID,Template_ID,Document_Name,Document_Description,Other_Details\n0,7,Introduction of OS,n,\n1,25,Understanding DB,y,\n3,6,Summer Show,u,\n76,20,Robbin CV,y,\n80,14,Welcome to NY,h,\n82,11,Data base,w,\n2394,10,Customer reviews,y,\n3830,14,Do not panic,k,\n33930,1,How Google people work,z,\n50123,22,Learning French,r,\n\nQuestion: What are the template ids of any templates used in more than a single document?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many templates do we have?", "query": "SELECT count(*) FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[20]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: How many templates do we have?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates.", "query": "SELECT count(*) FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[20]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Count the number of templates."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show template ids, version numbers, and template type codes for all templates.", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Show template ids, version numbers, and template type codes for all templates."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids, version numbers, and type codes for each template?", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0, 5, "PP"], [1, 9, "PP"], [4, 4, "BK"], [6, 2, "PPT"], [7, 8, "PPT"], [8, 3, "BK"], [9, 2, "BK"], [10, 1, "PPT"], [11, 6, "BK"], [14, 7, "AD"], [15, 9, "CV"], [16, 5, "CV"], [18, 5, "PP"], [19, 7, "AD"], [20, 6, "BK"], [21, 9, "AD"], [22, 0, "PP"], [23, 2, "BK"], [24, 8, "PP"], [25, 5, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What are the ids, version numbers, and type codes for each template?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all distinct template type codes for all templates.", "query": "SELECT DISTINCT template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Show all distinct template type codes for all templates."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes?", "query": "SELECT DISTINCT template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["PP"], ["BK"], ["PPT"], ["AD"], ["CV"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What are the different template type codes?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of templates with template type code PP or PPT?", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What are the ids of templates with template type code PP or PPT?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the ids of templates that have the code PP or PPT.", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0], [1], [6], [7], [10], [18], [22], [24], [25]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Return the ids of templates that have the code PP or PPT."}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many templates have template type code CV?", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: How many templates have template type code CV?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of templates of the type CV.", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Count the number of templates of the type CV."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the version number and template type code for the template with version number later than 5?", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What is the version number and template type code for the template with version number later than 5?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[9, "PP"], [8, "PPT"], [6, "BK"], [7, "AD"], [9, "CV"], [7, "AD"], [6, "BK"], [9, "AD"], [8, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Return the version numbers and template type codes of templates with a version number greater than 5."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and number of templates for each.", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Show all template type codes and number of templates for each."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the different template type codes, and how many templates correspond to each?", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["AD", 3], ["BK", 6], ["CV", 2], ["PP", 6], ["PPT", 3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What are the different template type codes, and how many templates correspond to each?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Which template type code has most number of templates?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Which template type code has most number of templates?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type that the most templates belong to.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Return the type code of the template type that the most templates belong to."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes with less than three templates.", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["CV"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Show all template type codes with less than three templates."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the codes of template types that have fewer than 3 templates?", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [["CV"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What are the codes of template types that have fewer than 3 templates?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "What the smallest version number and its template type code?", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: What the smallest version number and its template type code?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the lowest version number, along with its corresponding template type code.", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "table_data_path": "csv_files/cre_Doc_Template_Mgt/templates/data.csv", "execution_results": [[0, "PP"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_ID,Version_Number,Template_Type_Code,Date_Effective_From,Date_Effective_To,Template_Details\n0,5,PP,2005-11-12 07:09:48,2008-01-05 14:19:28,\n1,9,PP,2010-09-24 01:15:11,1999-07-08 03:31:04,\n4,4,BK,2002-03-02 14:39:49,2001-04-18 09:29:52,\n6,2,PPT,1975-05-20 22:51:19,1992-05-02 20:06:11,\n7,8,PPT,1993-10-07 02:33:04,1975-07-16 04:52:10,\n8,3,BK,1983-07-16 21:16:16,1976-10-28 10:08:50,\n9,2,BK,1997-04-17 08:29:44,1994-12-07 13:26:23,\n10,1,PPT,2003-06-05 04:03:45,2007-06-06 06:18:53,\n11,6,BK,1996-02-04 11:27:24,1995-09-19 22:27:48,\n14,7,AD,1975-10-20 02:28:58,1979-11-04 08:58:39,\n\nQuestion: Return the lowest version number, along with its corresponding template type code."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all template type codes and descriptions.", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: Show all template type codes and descriptions."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the type codes and descriptions for all template types?", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["PPT", "Presentation"], ["CV", "CV"], ["AD", "Advertisement"], ["PP", "Paper"], ["BK", "Book"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: What are the type codes and descriptions for all template types?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the template type descriptions for template type code \"AD\".", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["Advertisement"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: What is the template type descriptions for template type code \"AD\"."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the template type description of the template type with the code AD.", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["Advertisement"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: Return the template type description of the template type with the code AD."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the template type code for template type description \"Book\".", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["BK"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: What is the template type code for template type description \"Book\"."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the type code of the template type with the description \"Book\".", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "table_data_path": "csv_files/cre_Doc_Template_Mgt/ref_template_types/data.csv", "execution_results": [["BK"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTemplate_Type_Code,Template_Type_Description\nPPT,Presentation\nCV,CV\nAD,Advertisement\nPP,Paper\nBK,Book\n\nQuestion: Return the type code of the template type with the description \"Book\"."}
{"db_id": "cre_Doc_Template_Mgt", "question": "How many paragraphs in total?", "query": "SELECT count(*) FROM Paragraphs", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: How many paragraphs in total?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Count the number of paragraphs.", "query": "SELECT count(*) FROM Paragraphs", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Count the number of paragraphs."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Show all document ids and the number of paragraphs in each document. Order by document id."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3, 1], [80, 2], [2394, 3], [3830, 1], [33930, 1], [50123, 1], [651512, 2], [3540024, 1], [16514113, 2], [385906526, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id."}
{"db_id": "cre_Doc_Template_Mgt", "question": "List all document ids with at least two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[80], [2394], [651512], [16514113]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: List all document ids with at least two paragraphs."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that have 2 or more paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[80], [2394], [651512], [16514113]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: What are the ids of documents that have 2 or more paragraphs?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with least number of paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: What is the document id with least number of paragraphs?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Return the id of the document with the fewest paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Return the id of the document with the fewest paragraphs."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What is the document id with 1 to 2 paragraphs?", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: What is the document id with 1 to 2 paragraphs?"}
{"db_id": "cre_Doc_Template_Mgt", "question": "Give the ids of documents that have between one and two paragraphs.", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[3], [80], [3830], [33930], [50123], [651512], [3540024], [16514113], [385906526]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Give the ids of documents that have between one and two paragraphs."}
{"db_id": "cre_Doc_Template_Mgt", "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[16514113]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: Show the document id with paragraph text 'Brazil' and 'Ireland'."}
{"db_id": "cre_Doc_Template_Mgt", "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "table_data_path": "csv_files/cre_Doc_Template_Mgt/paragraphs/data.csv", "execution_results": [[16514113]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nParagraph_ID,Document_ID,Paragraph_Text,Other_Details\n7,2394,Korea,\n9,3,Somalia,\n65,50123,Palestinian Territory,\n241,651512,Jersey,\n3708,33930,UK,\n9946,385906526,Fiji,\n16615,80,Japan,\n1104059,3830,Senegal,\n243399026,651512,Indonesia,\n280120913,2394,Ukraine,\n\nQuestion: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?"}
{"db_id": "course_teach", "question": "How many teachers are there?", "query": "SELECT count(*) FROM teacher", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [[7]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: How many teachers are there?"}
{"db_id": "course_teach", "question": "What is the total count of teachers?", "query": "SELECT count(*) FROM teacher", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [[7]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What is the total count of teachers?"}
{"db_id": "course_teach", "question": "List the names of teachers in ascending order of age.", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: List the names of teachers in ascending order of age."}
{"db_id": "course_teach", "question": "What are the names of the teachers ordered by ascending age?", "query": "SELECT Name FROM teacher ORDER BY Age ASC", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Vicente Carretero"], ["Gustaaf Deloor"], ["Joseph Huts"], ["John Deloor"], ["Lucy Wong"], ["Anne Walker"], ["Kearsley Brown"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What are the names of the teachers ordered by ascending age?"}
{"db_id": "course_teach", "question": "What are the age and hometown of teachers?", "query": "SELECT Age ,  Hometown FROM teacher", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What are the age and hometown of teachers?"}
{"db_id": "course_teach", "question": "What is the age and hometown of every teacher?", "query": "SELECT Age ,  Hometown FROM teacher", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["32", "Blackrod Urban District"], ["29", "Bolton County Borough"], ["26", "Farnworth Municipal Borough"], ["33", "Horwich Urban District"], ["45", "Kearsley Urban District"], ["41", "Little Lever Urban District"], ["39", "Turton Urban District"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What is the age and hometown of every teacher?"}
{"db_id": "course_teach", "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "query": "select name from teacher where hometown != \"little lever urban district\"", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: List the name of teachers whose hometown is not `` Little Lever Urban District '' ."}
{"db_id": "course_teach", "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "query": "select name from teacher where hometown != \"little lever urban district\"", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Joseph Huts"], ["Gustaaf Deloor"], ["Vicente Carretero"], ["John Deloor"], ["Kearsley Brown"], ["Anne Walker"], ["Lucy Wong"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?"}
{"db_id": "course_teach", "question": "Show the name of teachers aged either 32 or 33?", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Joseph Huts"], ["John Deloor"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: Show the name of teachers aged either 32 or 33?"}
{"db_id": "course_teach", "question": "What are the names of the teachers who are aged either 32 or 33?", "query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Joseph Huts"], ["John Deloor"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What are the names of the teachers who are aged either 32 or 33?"}
{"db_id": "course_teach", "question": "What is the hometown of the youngest teacher?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Farnworth Municipal Borough"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What is the hometown of the youngest teacher?"}
{"db_id": "course_teach", "question": "Where is the youngest teacher from?", "query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Farnworth Municipal Borough"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: Where is the youngest teacher from?"}
{"db_id": "course_teach", "question": "Show different hometown of teachers and the number of teachers from each hometown.", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: Show different hometown of teachers and the number of teachers from each hometown."}
{"db_id": "course_teach", "question": "For each hometown, how many teachers are there?", "query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Blackrod Urban District", 1], ["Bolton County Borough", 1], ["Farnworth Municipal Borough", 1], ["Horwich Urban District", 1], ["Kearsley Urban District", 1], ["Little Lever Urban District", 1], ["Turton Urban District", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: For each hometown, how many teachers are there?"}
{"db_id": "course_teach", "question": "List the most common hometown of teachers.", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Turton Urban District"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: List the most common hometown of teachers."}
{"db_id": "course_teach", "question": "What is the most commmon hometowns for teachers?", "query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/course_teach/teacher/data.csv", "execution_results": [["Turton Urban District"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nTeacher_ID,Name,Age,Hometown\n1,Joseph Huts,32,Blackrod Urban District\n2,Gustaaf Deloor,29,Bolton County Borough\n3,Vicente Carretero,26,Farnworth Municipal Borough\n4,John Deloor,33,Horwich Urban District\n5,Kearsley Brown,45,Kearsley Urban District\n6,Anne Walker,41,Little Lever Urban District\n7,Lucy Wong,39,Turton Urban District\n\nQuestion: What is the most commmon hometowns for teachers?"}
{"db_id": "museum_visit", "question": "Find the id and name of the museum that has the most staff members?", "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "table_data_path": "csv_files/museum_visit/museum/data.csv", "execution_results": [[1, "Plaza Museum"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,Name,Num_of_Staff,Open_Year\n1,Plaza Museum,62,2000\n2,Capital Plaza Museum,25,2012\n3,Jefferson Development Museum,18,2010\n4,Willow Grande Museum,17,2011\n5,RiverPark Museum,16,2008\n6,Place Tower Museum,16,2008\n7,Central City District Residential Museum,15,2010\n8,ZirMed Gateway Museum,12,2009\n\nQuestion: Find the id and name of the museum that has the most staff members?"}
{"db_id": "museum_visit", "question": "Find the average number of staff working for the museums that were open before 2009.", "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "table_data_path": "csv_files/museum_visit/museum/data.csv", "execution_results": [[31.333333333333332]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,Name,Num_of_Staff,Open_Year\n1,Plaza Museum,62,2000\n2,Capital Plaza Museum,25,2012\n3,Jefferson Development Museum,18,2010\n4,Willow Grande Museum,17,2011\n5,RiverPark Museum,16,2008\n6,Place Tower Museum,16,2008\n7,Central City District Residential Museum,15,2010\n8,ZirMed Gateway Museum,12,2009\n\nQuestion: Find the average number of staff working for the museums that were open before 2009."}
{"db_id": "museum_visit", "question": "What are the opening year and staff number of the museum named Plaza Museum?", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "table_data_path": "csv_files/museum_visit/museum/data.csv", "execution_results": [[62, "2000"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,Name,Num_of_Staff,Open_Year\n1,Plaza Museum,62,2000\n2,Capital Plaza Museum,25,2012\n3,Jefferson Development Museum,18,2010\n4,Willow Grande Museum,17,2011\n5,RiverPark Museum,16,2008\n6,Place Tower Museum,16,2008\n7,Central City District Residential Museum,15,2010\n8,ZirMed Gateway Museum,12,2009\n\nQuestion: What are the opening year and staff number of the museum named Plaza Museum?"}
{"db_id": "museum_visit", "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "table_data_path": "csv_files/museum_visit/museum/data.csv", "execution_results": [["Plaza Museum"], ["Capital Plaza Museum"], ["Jefferson Development Museum"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,Name,Num_of_Staff,Open_Year\n1,Plaza Museum,62,2000\n2,Capital Plaza Museum,25,2012\n3,Jefferson Development Museum,18,2010\n4,Willow Grande Museum,17,2011\n5,RiverPark Museum,16,2008\n6,Place Tower Museum,16,2008\n7,Central City District Residential Museum,15,2010\n8,ZirMed Gateway Museum,12,2009\n\nQuestion: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010."}
{"db_id": "museum_visit", "question": "What are the average and maximum number of tickets bought in all visits?", "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "table_data_path": "csv_files/museum_visit/visit/data.csv", "execution_results": [[10.5, 24]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,visitor_ID,Num_of_Ticket,Total_spent\n1,5,20,320.14\n2,5,4,89.98\n4,3,10,320.44\n2,3,24,209.98\n4,6,3,20.44\n8,6,2,19.98\n\nQuestion: What are the average and maximum number of tickets bought in all visits?"}
{"db_id": "museum_visit", "question": "How many museums were opened after 2013 or before 2008?", "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "table_data_path": "csv_files/museum_visit/museum/data.csv", "execution_results": [[1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nMuseum_ID,Name,Num_of_Staff,Open_Year\n1,Plaza Museum,62,2000\n2,Capital Plaza Museum,25,2012\n3,Jefferson Development Museum,18,2010\n4,Willow Grande Museum,17,2011\n5,RiverPark Museum,16,2008\n6,Place Tower Museum,16,2008\n7,Central City District Residential Museum,15,2010\n8,ZirMed Gateway Museum,12,2009\n\nQuestion: How many museums were opened after 2013 or before 2008?"}
{"db_id": "wta_1", "question": "Find the total number of matches.", "query": "SELECT count(*) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[278]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the total number of matches."}
{"db_id": "wta_1", "question": "Count the number of matches.", "query": "SELECT count(*) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[278]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Count the number of matches."}
{"db_id": "wta_1", "question": "Find the average age of losers and winners of all matches.", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[27.31121386258453, 27.062177773183823]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the average age of losers and winners of all matches."}
{"db_id": "wta_1", "question": "What are the average ages of losers and winners across matches?", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[27.31121386258453, 27.062177773183823]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What are the average ages of losers and winners across matches?"}
{"db_id": "wta_1", "question": "Find the average rank of winners in all matches.", "query": "SELECT avg(winner_rank) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[13.715827338129497]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the average rank of winners in all matches."}
{"db_id": "wta_1", "question": "What is the average rank for winners in all matches?", "query": "SELECT avg(winner_rank) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[13.715827338129497]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What is the average rank for winners in all matches?"}
{"db_id": "wta_1", "question": "Find the highest rank of losers in all matches.", "query": "SELECT min(loser_rank) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the highest rank of losers in all matches."}
{"db_id": "wta_1", "question": "What is the best rank of losers across all matches?", "query": "SELECT min(loser_rank) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What is the best rank of losers across all matches?"}
{"db_id": "wta_1", "question": "Find the number of distinct name of losers.", "query": "SELECT count(DISTINCT loser_name) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[49]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the number of distinct name of losers."}
{"db_id": "wta_1", "question": "How many different loser names are there?", "query": "SELECT count(DISTINCT loser_name) FROM matches", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[49]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: How many different loser names are there?"}
{"db_id": "wta_1", "question": "Find the name of tourney that has more than 10 matches.", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Australian Open"], ["Cincinnati"], ["French Open"], ["Indian Wells"], ["Miami"], ["Singapore"], ["Us Open"], ["WTA Championships"], ["Wimbledon"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the name of tourney that has more than 10 matches."}
{"db_id": "wta_1", "question": "What are the names of tournaments that have more than 10 matches?", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Australian Open"], ["Cincinnati"], ["French Open"], ["Indian Wells"], ["Miami"], ["Singapore"], ["Us Open"], ["WTA Championships"], ["Wimbledon"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What are the names of tournaments that have more than 10 matches?"}
{"db_id": "wta_1", "question": "List the names of all winners who played in both 2013 and 2016.", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Angelique Kerber"], ["Petra Kvitova"], ["Sara Errani"], ["Serena Williams"], ["Victoria Azarenka"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: List the names of all winners who played in both 2013 and 2016."}
{"db_id": "wta_1", "question": "What are the names of players who won in both 2013 and 2016?", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Angelique Kerber"], ["Petra Kvitova"], ["Sara Errani"], ["Serena Williams"], ["Victoria Azarenka"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What are the names of players who won in both 2013 and 2016?"}
{"db_id": "wta_1", "question": "List the number of all matches who played in years of 2013 or 2016.", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[170]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: List the number of all matches who played in years of 2013 or 2016."}
{"db_id": "wta_1", "question": "How many matches were played in 2013 or 2016?", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[170]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: How many matches were played in 2013 or 2016?"}
{"db_id": "wta_1", "question": "Find the year that has the most number of matches.", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[2016]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the year that has the most number of matches."}
{"db_id": "wta_1", "question": "Which year had the most matches?", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[2016]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Which year had the most matches?"}
{"db_id": "wta_1", "question": "Find the name and rank points of the winner who won the most times.", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Angelique Kerber", 3715]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the name and rank points of the winner who won the most times."}
{"db_id": "wta_1", "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Angelique Kerber", 3715]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What is the name of the winner who has won the most matches, and how many rank points does this player have?"}
{"db_id": "wta_1", "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Serena Williams"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney."}
{"db_id": "wta_1", "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Serena Williams"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What is the name of the winner with the most rank points who participated in the Australian Open tournament?"}
{"db_id": "wta_1", "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Petra Kvitova", "Angelique Kerber"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: find the names of loser and winner who played in the match with greatest number of minutes."}
{"db_id": "wta_1", "question": "What are the names of the winner and loser who played in the longest match?", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Petra Kvitova", "Angelique Kerber"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What are the names of the winner and loser who played in the longest match?"}
{"db_id": "wta_1", "question": "Find the total number of tours for each ranking date.", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "table_data_path": "csv_files/wta_1/rankings/data.csv", "execution_results": [[0, 19870119], [0, 19870126], [0, 19870202], [0, 19870209], [0, 19870302], [0, 19870330], [0, 19870406], [0, 19870413], [0, 19870420], [0, 19870427], [0, 19870504], [0, 19870511], [0, 19870518], [0, 19870525], [0, 19870601], [0, 19870608], [0, 19870615], [0, 19870622], [0, 19870629], [0, 19870706], [0, 19870713], [0, 19870720], [0, 19870727], [0, 19870803], [0, 19870810], [0, 19870817], [0, 19870824], [0, 19870831], [0, 19870907], [0, 19870914], [0, 19870921], [0, 19870928], [0, 19871005], [0, 19871012], [0, 19871019], [0, 19871026], [0, 19871102], [0, 19871109], [0, 19871116], [0, 19871123], [0, 19871130], [0, 19871207], [0, 19871214], [0, 19871221], [0, 19871228], [0, 19880101], [0, 19880104], [0, 19880111], [0, 19880118], [0, 19880125], [0, 19880201], [0, 19880208], [0, 19880215], [0, 19880222], [0, 19880229], [0, 19880307], [0, 19880314], [0, 19880321], [0, 19880328], [0, 19880404], [0, 19880411], [0, 19880418], [0, 19880425], [0, 19880502], [0, 19880509], [0, 19880516], [0, 19880523], [0, 19880530], [0, 19880606], [0, 19880613], [0, 19880620], [0, 19880627], [0, 19880704], [0, 19880711], [0, 19880718], [0, 19880725], [0, 19880801], [0, 19880808], [0, 19880815], [0, 19880822], [0, 19880829], [0, 19880905], [0, 19880912], [0, 19880919], [0, 19880926], [0, 19881003], [0, 19881010], [0, 19881017], [0, 19881024], [0, 19881031], [0, 19881107], [0, 19881114], [29, 19881121], [29, 19881128], [29, 19881205], [29, 19881212], [29, 19881219], [29, 19881226], [28, 19890101], [29, 19890102], [29, 19890109], [29, 19890116], [29, 19890123], [29, 19890130], [29, 19890206], [0, 19890213], [0, 19890220], [0, 19890227], [0, 19890306], [29, 19890313], [29, 19890320], [0, 19890327], [0, 19890403], [29, 19890410], [29, 19890417], [29, 19890424], [29, 19890501], [29, 19890508], [29, 19890515], [29, 19890522], [29, 19890529], [29, 19890605], [29, 19890612], [29, 19890619], [29, 19890626], [29, 19890703], [29, 19890710], [29, 19890717], [29, 19890724], [29, 19890731], [29, 19890807], [29, 19890814], [29, 19890821], [29, 19890828], [29, 19890904], [29, 19890911], [29, 19890918], [29, 19890925], [29, 19891002], [29, 19891009], [29, 19891016], [29, 19891023], [29, 19891030], [29, 19891106], [29, 19891113], [29, 19891120], [29, 19891127], [29, 19891204], [29, 19891211], [29, 19891218], [29, 19891225], [28, 19900101], [29, 19900108], [29, 19900115], [29, 19900122], [29, 19900129], [29, 19900205], [29, 19900212], [29, 19900219], [29, 19900226], [29, 19900305], [29, 19900312], [29, 19900319], [29, 19900326], [29, 19900402], [29, 19900409], [29, 19900416], [29, 19900423], [29, 19900430], [29, 19900507], [29, 19900514], [29, 19900521], [29, 19900528], [29, 19900604], [29, 19900611], [30, 19900618], [30, 19900625], [30, 19900702], [30, 19900709], [30, 19900716], [30, 19900723], [30, 19900730], [30, 19900806], [30, 19900813], [30, 19900820], [30, 19900827], [30, 19900903], [30, 19900910], [30, 19900917], [30, 19900924], [30, 19901001], [30, 19901008], [30, 19901015], [30, 19901022], [30, 19901029], [30, 19901105], [30, 19901112], [30, 19901119], [30, 19901126], [30, 19901203], [30, 19901210], [30, 19901217], [30, 19901224], [30, 19901231], [29, 19910101], [30, 19910107], [30, 19910114], [30, 19910121], [30, 19910128], [30, 19910204], [30, 19910211], [30, 19910218], [30, 19910225], [30, 19910304], [29, 19910311], [29, 19910318], [29, 19910325], [29, 19910401], [29, 19910408], [29, 19910415], [29, 19910422], [29, 19910429], [29, 19910506], [29, 19910513], [29, 19910520], [29, 19910527], [29, 19910603], [29, 19910610], [29, 19910617], [29, 19910624], [29, 19910701], [30, 19910708], [29, 19910715], [29, 19910722], [29, 19910729], [29, 19910805], [29, 19910812], [29, 19910819], [30, 19910826], [30, 19910902], [30, 19910909], [30, 19910916], [30, 19910923], [30, 19910930], [31, 19911007], [31, 19911014], [31, 19911021], [31, 19911028], [44, 19911104], [44, 19911111], [44, 19911118], [44, 19911125], [31, 19911202], [44, 19911209], [45, 19911216], [45, 19911223], [45, 19911230], [44, 19920101], [45, 19920106], [45, 19920113], [45, 19920120], [45, 19920127], [45, 19920203], [29, 19920210], [45, 19920217], [45, 19920224], [45, 19920302], [45, 19920309], [45, 19920316], [45, 19920323], [45, 19920330], [45, 19920406], [45, 19920413], [45, 19920420], [45, 19920427], [45, 19920504], [45, 19920511], [45, 19920518], [45, 19920525], [45, 19920601], [45, 19920608], [45, 19920615], [45, 19920622], [45, 19920629], [45, 19920706], [46, 19920713], [46, 19920720], [45, 19920727], [73, 19920803], [73, 19920810], [73, 19920817], [119, 19920824], [90, 19920831], [90, 19920907], [90, 19920914], [90, 19920921], [90, 19920928], [62, 19921005], [62, 19921012], [62, 19921019], [62, 19921026], [62, 19921102], [62, 19921109], [62, 19921116], [62, 19921123], [62, 19921130], [62, 19921207], [62, 19921214], [62, 19921221], [45, 19921228], [44, 19930101], [45, 19930104], [45, 19930111], [45, 19930118], [45, 19930125], [45, 19930201], [32, 19930208], [45, 19930215], [45, 19930222], [45, 19930301], [45, 19930308], [45, 19930315], [45, 19930322], [45, 19930329], [45, 19930405], [62, 19930412], [62, 19930419], [62, 19930426], [62, 19930503], [62, 19930510], [44, 19930517], [44, 19930524], [44, 19930531], [44, 19930607], [44, 19930614], [44, 19930621], [44, 19930628], [62, 19930705], [62, 19930712], [62, 19930719], [62, 19930726], [43, 19930802], [43, 19930809], [43, 19930816], [43, 19930823], [43, 19930830], [43, 19930906], [43, 19930913], [76, 19930920], [75, 19930927], [58, 19931004], [58, 19931011], [58, 19931018], [58, 19931025], [58, 19931101], [58, 19931108], [75, 19931115], [75, 19931122], [75, 19931129], [75, 19931206], [75, 19931213], [75, 19931220], [75, 19931227], [73, 19940101], [75, 19940103], [75, 19940110], [75, 19940117], [75, 19940124], [62, 19940131], [63, 19940207], [63, 19940214], [63, 19940221], [62, 19940228], [62, 19940307], [62, 19940314], [62, 19940321], [61, 19940328], [62, 19940404], [61, 19940411], [44, 19940418], [57, 19940425], [57, 19940502], [57, 19940509], [57, 19940516], [57, 19940523], [57, 19940530], [65, 19940606], [65, 19940613], [65, 19940620], [65, 19940627], [67, 19940704], [67, 19940711], [60, 19940718], [60, 19940725], [60, 19940801], [60, 19940808], [60, 19940815], [60, 19940822], [60, 19940829], [60, 19940905], [68, 19940912], [68, 19940919], [69, 19940926], [69, 19941003], [69, 19941010], [69, 19941017], [59, 19941024], [59, 19941031], [69, 19941107], [69, 19941114], [69, 19941121], [69, 19941128], [69, 19941205], [69, 19941212], [69, 19941219], [69, 19941226], [69, 19950101], [69, 19950102], [69, 19950109], [69, 19950116], [69, 19950123], [69, 19950130], [69, 19950206], [69, 19950213], [69, 19950220], [69, 19950227], [69, 19950306], [69, 19950313], [69, 19950320], [69, 19950327], [69, 19950403], [69, 19950410], [69, 19950417], [69, 19950424], [69, 19950501], [69, 19950508], [69, 19950515], [69, 19950522], [69, 19950529], [69, 19950605], [96, 19950612], [96, 19950619], [96, 19950626], [96, 19950703], [97, 19950710], [118, 19950717], [118, 19950724], [118, 19950731], [118, 19950807], [118, 19950814], [131, 19950821], [131, 19950828], [131, 19950904], [131, 19950911], [131, 19950918], [131, 19950925], [131, 19951002], [131, 19951009], [131, 19951016], [131, 19951023], [131, 19951030], [131, 19951106], [138, 19951113], [138, 19951120], [138, 19951127], [138, 19951204], [138, 19951211], [138, 19951218], [138, 19951225], [138, 19960101], [125, 19960108], [125, 19960115], [125, 19960122], [125, 19960129], [125, 19960205], [125, 19960212], [125, 19960219], [147, 19960226], [147, 19960304], [147, 19960311], [147, 19960318], [147, 19960325], [147, 19960401], [147, 19960408], [147, 19960415], [147, 19960422], [147, 19960429], [147, 19960506], [147, 19960513], [147, 19960520], [147, 19960527], [147, 19960603], [147, 19960610], [147, 19960617], [147, 19960624], [147, 19960701], [171, 19960708], [171, 19960715], [171, 19960722], [171, 19960729], [171, 19960805], [171, 19960812], [171, 19960819], [171, 19960826], [171, 19960902], [194, 19960909], [172, 19960916], [172, 19960923], [172, 19960930], [172, 19961007], [175, 19961014], [175, 19961021], [191, 19961028], [191, 19961104], [213, 19961111], [213, 19961118], [213, 19961125], [213, 19961202], [213, 19961209], [213, 19961216], [185, 19961223], [185, 19961230], [185, 19970101], [185, 19970106], [185, 19970113], [185, 19970120], [209, 19970127], [209, 19970203], [209, 19970210], [209, 19970217], [223, 19970224], [223, 19970303], [223, 19970310], [223, 19970317], [223, 19970324], [223, 19970331], [223, 19970407], [225, 19970414], [225, 19970421], [225, 19970428], [225, 19970505], [225, 19970512], [225, 19970519], [225, 19970526], [225, 19970602], [225, 19970609], [225, 19970616], [225, 19970623], [225, 19970630], [164, 19970707], [257, 19970714], [257, 19970721], [257, 19970728], [273, 19970804], [273, 19970811], [273, 19970818], [273, 19970825], [273, 19970901], [273, 19970908], [273, 19970915], [273, 19970922], [273, 19970929], [273, 19971006], [299, 19971013], [314, 19971020], [314, 19971027], [337, 19971103], [337, 19971110], [363, 19971117], [363, 19971124], [363, 19971201], [394, 19971208], [394, 19971215], [394, 19971222], [394, 19971229], [394, 19980101], [394, 19980105], [394, 19980112], [394, 19980119], [394, 19980126], [394, 19980202], [394, 19980209], [394, 19980216], [394, 19980223], [394, 19980302], [394, 19980309], [394, 19980316], [394, 19980323], [426, 19980330], [426, 19980406], [459, 19980413], [459, 19980420], [459, 19980427], [459, 19980504], [459, 19980511], [459, 19980518], [459, 19980525], [459, 19980601], [543, 19980608], [569, 19980615], [590, 19980622], [590, 19980629], [633, 19980706], [633, 19980713], [633, 19980720], [634, 19980727], [634, 19980803], [634, 19980810], [631, 19980817], [631, 19980824], [660, 19980831], [660, 19980907], [663, 19980914], [663, 19980921], [683, 19980928], [688, 19981005], [688, 19981012], [696, 19981019], [693, 19981026], [693, 19981102], [692, 19981109], [692, 19981116], [692, 19981123], [709, 19981130], [703, 19981207], [703, 19981214], [703, 19981221], [703, 19981228], [703, 19990101], [722, 19990104], [722, 19990111], [722, 19990118], [722, 19990125], [728, 19990201], [723, 19990208], [723, 19990215], [723, 19990222], [723, 19990301], [723, 19990308], [728, 19990315], [728, 19990322], [728, 19990329], [728, 19990405], [728, 19990412], [728, 19990419], [752, 19990426], [761, 19990503], [761, 19990510], [777, 19990517], [777, 19990524], [777, 19990531], [804, 19990607], [804, 19990614], [804, 19990621], [804, 19990628], [804, 19990705], [829, 19990712], [829, 19990719], [829, 19990726], [829, 19990802], [870, 19990809], [873, 19990816], [853, 19990823], [861, 19990830], [861, 19990906], [879, 19990913], [879, 19990920], [899, 19990927], [927, 19991004], [941, 19991011], [964, 19991018], [941, 19991025], [941, 19991101], [941, 19991108], [941, 19991115], [941, 19991122], [966, 19991129], [966, 19991206], [989, 19991213], [989, 19991220], [989, 19991227], [989, 20000101], [989, 20000103], [989, 20000110], [989, 20000117], [989, 20000124], [1013, 20000131], [1038, 20000207], [1038, 20000214], [1038, 20000221], [1038, 20000228], [1065, 20000306], [1065, 20000313], [1065, 20000320], [1065, 20000327], [1065, 20000403], [1093, 20000410], [1093, 20000417], [1093, 20000424], [1122, 20000501], [1122, 20000508], [1106, 20000515], [1106, 20000522], [1106, 20000529], [1106, 20000605], [1160, 20000612], [1160, 20000619], [1188, 20000626], [1188, 20000703], [1204, 20000710], [1205, 20000717], [1212, 20000724], [1276, 20000731], [1276, 20000807], [1224, 20000814], [1224, 20000821], [1224, 20000828], [1224, 20000904], [1241, 20000911], [1265, 20000918], [1231, 20000925], [1223, 20001002], [1232, 20001009], [1253, 20001016], [1245, 20001023], [1247, 20001030], [1173, 20001106], [964, 20001113], [961, 20001120], [961, 20001127], [961, 20001204], [964, 20001211], [964, 20001218], [964, 20001225], [964, 20010101], [964, 20010108], [964, 20010115], [964, 20010122], [977, 20010129], [977, 20010205], [1004, 20010212], [1027, 20010219], [1027, 20010226], [1027, 20010305], [1027, 20010312], [1101, 20010319], [1101, 20010326], [914, 20010402], [930, 20010409], [952, 20010416], [961, 20010423], [988, 20010430], [1011, 20010507], [1011, 20010514], [1029, 20010521], [1067, 20010528], [1067, 20010604], [1094, 20010611], [1094, 20010618], [1073, 20010625], [1073, 20010702], [1113, 20010709], [1135, 20010716], [1149, 20010723], [1149, 20010730], [1175, 20010806], [1175, 20010813], [1175, 20010820], [1201, 20010827], [1201, 20010903], [1228, 20010910], [1231, 20010917], [1263, 20010924], [1287, 20011001], [1267, 20011008], [1288, 20011015], [1291, 20011022], [1312, 20011029], [1312, 20011105], [1412, 20011112], [1412, 20011119], [1437, 20011126], [1437, 20011203], [1437, 20011210], [1430, 20011217], [1430, 20011224], [1430, 20011231], [1430, 20020101], [1430, 20020107], [1430, 20020114], [1430, 20020121], [1430, 20020128], [1422, 20020204], [1422, 20020211], [1422, 20020218], [1424, 20020225], [1424, 20020304], [1424, 20020311], [1448, 20020318], [1448, 20020325], [1573, 20020401], [1574, 20020408], [1574, 20020415], [1574, 20020422], [1577, 20020429], [1730, 20020506], [1577, 20020513], [1577, 20020520], [1577, 20020527], [1577, 20020603], [1783, 20020610], [1803, 20020617], [1783, 20020624], [1783, 20020701], [1834, 20020708], [1835, 20020715], [1828, 20020722], [1853, 20020729], [1853, 20020805], [1925, 20020812], [1915, 20020819], [2111, 20020826], [2111, 20020902], [2451, 20020909], [2457, 20020916], [2462, 20020923], [2496, 20020930], [2526, 20021007], [2520, 20021014], [2505, 20021021], [2505, 20021028], [2498, 20021104], [2497, 20021111], [2497, 20021118], [2497, 20021125], [2497, 20021202], [2497, 20021209], [2497, 20021216], [2497, 20021223], [2497, 20021230], [2497, 20030101], [2497, 20030106], [2497, 20030113], [2497, 20030120], [2497, 20030127], [2517, 20030203], [2507, 20030210], [2490, 20030217], [2528, 20030224], [2549, 20030303], [2549, 20030310], [2571, 20030317], [2571, 20030324], [2614, 20030331], [2587, 20030407], [2587, 20030414], [2608, 20030421], [2719, 20030428], [2652, 20030505], [2671, 20030512], [2728, 20030519], [1860, 20030526], [2728, 20030602], [2753, 20030609], [2753, 20030616], [2731, 20030623], [2731, 20030630], [2730, 20030707], [2755, 20030714], [2759, 20030721], [2777, 20030728], [2732, 20030804], [2734, 20030811], [2755, 20030818], [2801, 20030825], [2801, 20030901], [2798, 20030908], [2847, 20030915], [2862, 20030922], [2930, 20030929], [2961, 20031006], [2966, 20031013], [3035, 20031020], [3020, 20031027], [3038, 20031103], [3052, 20031110], [3065, 20031117], [3092, 20031124], [3120, 20031201], [3190, 20031208], [3211, 20031215], [3211, 20031222], [3214, 20031229], [3214, 20040101], [3206, 20040105], [3206, 20040112], [3206, 20040119], [3206, 20040126], [3257, 20040202], [3265, 20040209], [3282, 20040216], [3282, 20040223], [3279, 20040301], [3286, 20040308], [3286, 20040315], [3286, 20040322], [3286, 20040329], [3277, 20040405], [3286, 20040412], [1489, 20040419], [3379, 20040426], [2613, 20040503], [1187, 20040510], [2361, 20040517], [2955, 20040524], [2535, 20040531], [3433, 20040607], [3456, 20040614], [3492, 20040621], [3492, 20040628], [3498, 20040705], [3516, 20040712], [3587, 20040719], [3592, 20040726], [3592, 20040802], [3645, 20040809], [3647, 20040816], [3661, 20040823], [3705, 20040830], [3705, 20040906], [3785, 20040913], [3831, 20040920], [3913, 20040927], [3957, 20041004], [3986, 20041011], [3987, 20041018], [3968, 20041025], [4011, 20041101], [4071, 20041108], [4124, 20041115], [4145, 20041122], [4147, 20041129], [4160, 20041206], [4160, 20041213], [4160, 20041220], [4160, 20041227], [4160, 20050101], [4160, 20050103], [4160, 20050110], [4160, 20050117], [4160, 20050124], [4198, 20050131], [4198, 20050207], [4211, 20050214], [4286, 20050221], [4286, 20050228], [4313, 20050307], [4313, 20050314], [4333, 20050321], [4333, 20050328], [4362, 20050404], [4371, 20050411], [4379, 20050418], [4379, 20050425], [4379, 20050502], [4470, 20050509], [4489, 20050516], [4522, 20050523], [4522, 20050530], [4682, 20050606], [4705, 20050613], [4727, 20050620], [4727, 20050627], [4792, 20050704], [4816, 20050711], [4847, 20050718], [4859, 20050725], [4926, 20050801], [4982, 20050808], [5020, 20050815], [5090, 20050822], [5100, 20050829], [5100, 20050905], [5187, 20050912], [5173, 20050919], [5175, 20050926], [5215, 20051003], [5249, 20051010], [5237, 20051017], [5257, 20051024], [5331, 20051031], [5362, 20051107], [5357, 20051114], [5391, 20051121], [5401, 20051128], [5452, 20051205], [5452, 20051212], [5452, 20051219], [5452, 20051226], [5452, 20060101], [5452, 20060102], [5452, 20060109], [5452, 20060116], [5452, 20060123], [5441, 20060130], [5425, 20060206], [5441, 20060213], [5478, 20060220], [5528, 20060227], [5548, 20060306], [5548, 20060313], [5559, 20060320], [5559, 20060327], [5626, 20060403], [5626, 20060410], [5644, 20060417], [5658, 20060424], [5656, 20060501], [5654, 20060508], [5683, 20060515], [5721, 20060522], [5798, 20060529], [5798, 20060605], [5862, 20060612], [5897, 20060619], [5944, 20060626], [5944, 20060703], [5983, 20060710], [6026, 20060717], [6065, 20060724], [6133, 20060731], [6151, 20060807], [6226, 20060814], [6289, 20060821], [6284, 20060828], [6284, 20060904], [6304, 20060911], [6347, 20060918], [6376, 20060925], [6436, 20061002], [6520, 20061009], [6629, 20061016], [6730, 20061023], [6808, 20061030], [6816, 20061106], [6807, 20061113], [6893, 20061120], [6896, 20061127], [6931, 20061204], [6953, 20061211], [6953, 20061218], [6953, 20061225], [6953, 20070101], [6926, 20070108], [6926, 20070115], [6926, 20070122], [6925, 20070129], [6925, 20070205], [6930, 20070212], [6942, 20070219], [6988, 20070226], [7017, 20070305], [7017, 20070312], [7058, 20070319], [7058, 20070326], [7139, 20070402], [7175, 20070409], [7197, 20070416], [7197, 20070423], [7197, 20070430], [7233, 20070507], [7317, 20070514], [7341, 20070521], [7365, 20070528], [7365, 20070604], [7448, 20070611], [7448, 20070618], [7473, 20070625], [7473, 20070702], [7495, 20070709], [7478, 20070716], [7470, 20070723], [7528, 20070730], [7522, 20070806], [7527, 20070813], [7503, 20070820], [7504, 20070827], [7504, 20070903], [7602, 20070910], [7643, 20070917], [7686, 20070924], [7697, 20071001], [7707, 20071008], [7687, 20071015], [7638, 20071022], [7711, 20071029], [7677, 20071105], [7664, 20071112], [7666, 20071119], [7674, 20071126], [7650, 20071203], [7659, 20071210], [7659, 20071217], [7682, 20071224], [7682, 20071231], [7682, 20080101], [7682, 20080107], [7711, 20080114], [7711, 20080121], [7691, 20080128], [7716, 20080204], [7743, 20080211], [7742, 20080218], [7731, 20080225], [7761, 20080303], [7790, 20080310], [7790, 20080317], [7832, 20080324], [7832, 20080331], [7873, 20080407], [7889, 20080414], [7917, 20080421], [7917, 20080428], [7929, 20080505], [8002, 20080512], [8022, 20080519], [8090, 20080526], [8090, 20080602], [8030, 20080609], [7970, 20080616], [7966, 20080623], [7966, 20080630], [8089, 20080707], [8113, 20080714], [8235, 20080721], [8280, 20080728], [8325, 20080804], [8372, 20080811], [8387, 20080818], [8417, 20080825], [8417, 20080901], [8527, 20080908], [8639, 20080915], [8690, 20080922], [8731, 20080929], [8762, 20081006], [8794, 20081013], [8836, 20081020], [8898, 20081027], [8956, 20081103], [8996, 20081110], [9003, 20081117], [9019, 20081124], [9050, 20081201], [9076, 20081208], [9077, 20081215], [9070, 20081222], [9070, 20081229], [9070, 20090101], [9064, 20090105], [9064, 20090112], [9064, 20090119], [9064, 20090126], [9087, 20090202], [9087, 20090209], [9059, 20090216], [9063, 20090223], [9063, 20090302], [9053, 20090309], [9053, 20090316], [9057, 20090323], [9057, 20090330], [9066, 20090406], [9121, 20090413], [9110, 20090420], [9111, 20090427], [9094, 20090504], [9143, 20090511], [9140, 20090518], [9153, 20090525], [9153, 20090601], [9203, 20090608], [9239, 20090615], [9255, 20090622], [9255, 20090629], [9310, 20090706], [9376, 20090713], [9474, 20090720], [9589, 20090727], [9611, 20090803], [9598, 20090810], [9642, 20090817], [9682, 20090824], [9682, 20090831], [9682, 20090907], [9808, 20090914], [9856, 20090921], [9918, 20090928], [9929, 20091005], [9925, 20091012], [10003, 20091019], [10025, 20091026], [10061, 20091102], [10116, 20091109], [10137, 20091116], [10204, 20091123], [10238, 20091130], [10221, 20091207], [10272, 20091214], [10272, 20091221], [10318, 20091228], [10318, 20100101], [10318, 20100104], [10320, 20100111], [10329, 20100118], [10329, 20100125], [10373, 20100201], [10372, 20100208], [10389, 20100215], [10404, 20100222], [10430, 20100301], [10442, 20100308], [10442, 20100315], [10412, 20100322], [10412, 20100329], [10481, 20100405], [10515, 20100412], [10543, 20100419], [10580, 20100426], [10590, 20100503], [10576, 20100510], [10593, 20100517], [10634, 20100524], [10634, 20100531], [10613, 20100607], [10630, 20100614], [10634, 20100621], [10634, 20100628], [10685, 20100705], [10726, 20100712], [10756, 20100719], [10817, 20100726], [10835, 20100802], [10937, 20100809], [10999, 20100816], [11026, 20100823], [11125, 20100830], [11125, 20100906], [11256, 20100913], [11290, 20100920], [11339, 20100927], [11460, 20101004], [11566, 20101011], [11594, 20101018], [11617, 20101025], [11687, 20101101], [11735, 20101108], [11814, 20101115], [11845, 20101122], [11877, 20101129], [11888, 20101206], [11907, 20101213], [11913, 20101220], [11904, 20101227], [11904, 20110101], [12060, 20110103], [12067, 20110110], [12094, 20110117], [12094, 20110124], [12143, 20110131], [12181, 20110207], [12204, 20110214], [12201, 20110221], [12254, 20110228], [12267, 20110307], [12267, 20110314], [12303, 20110321], [12303, 20110328], [12343, 20110404], [12398, 20110411], [12434, 20110418], [12422, 20110425], [12438, 20110502], [12482, 20110509], [12467, 20110516], [12522, 20110523], [12522, 20110530], [12659, 20110606], [12682, 20110613], [12686, 20110620], [12686, 20110627], [12867, 20110704], [12895, 20110711], [12927, 20110718], [13006, 20110725], [12999, 20110801], [13081, 20110808], [13129, 20110815], [13140, 20110822], [13174, 20110829], [13174, 20110905], [13299, 20110912], [13342, 20110919], [13382, 20110926], [13372, 20111003], [13382, 20111010], [13411, 20111017], [13443, 20111024], [13465, 20111031], [13443, 20111107], [13482, 20111114], [13518, 20111121], [13517, 20111128], [13542, 20111205], [13536, 20111212], [13565, 20111219], [13603, 20111226], [13603, 20120101], [13610, 20120102], [13628, 20120109], [13618, 20120116], [13618, 20120123], [13667, 20120130], [13666, 20120206], [13674, 20120213], [13719, 20120220], [13788, 20120227], [13791, 20120305], [13791, 20120312], [13818, 20120319], [13818, 20120326], [13881, 20120402], [13902, 20120409], [13938, 20120416], [13964, 20120423], [13983, 20120430], [14016, 20120507], [14015, 20120514], [14034, 20120521], [14087, 20120528], [14087, 20120604], [14072, 20120611], [14138, 20120618], [14172, 20120625], [14172, 20120702], [14180, 20120709], [14223, 20120716], [14250, 20120723], [14264, 20120730], [14286, 20120806], [14331, 20120813], [14361, 20120820], [14389, 20120827], [14389, 20120903], [14389, 20120910], [14402, 20120917], [14438, 20120924], [14472, 20121001], [14480, 20121008], [14513, 20121015], [14525, 20121022], [14547, 20121029], [14585, 20121105], [14621, 20121112], [14624, 20121119], [14612, 20121126], [14610, 20121203], [14639, 20121210], [14633, 20121217], [14649, 20121224], [13949, 20121231], [14648, 20130101], [13966, 20130107], [14667, 20130114], [14667, 20130121], [14667, 20130128], [14652, 20130204], [14651, 20130211], [14649, 20130218], [14554, 20130225], [14695, 20130304], [14727, 20130311], [13048, 20130318], [6790, 20130401], [14591, 20130408], [14449, 20130415], [14451, 20130422], [14462, 20130429], [14487, 20130506], [14516, 20130513], [14531, 20130520], [14545, 20130527], [14545, 20130603], [14553, 20130610], [14569, 20130617], [14650, 20130624], [14651, 20130708], [14689, 20130715], [14751, 20130722], [14766, 20130729], [14679, 20130805], [14599, 20130812], [14740, 20130819], [14714, 20130826], [14796, 20130902], [14820, 20130909], [14866, 20130916], [14878, 20130923], [14885, 20130930], [15028, 20131007], [15072, 20131014], [15025, 20131021], [15071, 20131028], [15098, 20131104], [15101, 20131111], [15151, 20131118], [15337, 20131125], [15334, 20131202], [15512, 20131209], [15540, 20131216], [15701, 20131223], [15708, 20131230], [15703, 20140106], [15637, 20140113], [8585, 20140120], [15646, 20140127], [15632, 20140203], [15637, 20140210], [8565, 20140217], [15659, 20140224], [15557, 20150302], [15578, 20150406], [15545, 20150413], [15568, 20150420], [15475, 20150427], [15710, 20150511], [15623, 20150518], [15741, 20150525], [15741, 20150608], [15810, 20150622], [15761, 20150803], [15776, 20150810], [15908, 20150824], [16184, 20150831], [15832, 20150914], [15800, 20150921], [16178, 20151005], [16191, 20151012], [16138, 20151019], [16293, 20151102], [4812, 20160111], [16518, 20160118], [16629, 20160201], [16586, 20160208], [16529, 20160215], [16454, 20160222], [16515, 20160229], [16517, 20160307], [16446, 20160411], [16454, 20160418], [16489, 20160425], [16388, 20160502], [16374, 20160509], [16351, 20160523], [16361, 20160606], [16314, 20160620], [16293, 20160627], [16325, 20160815], [16316, 20160919], [16305, 20160926], [16233, 20161010], [16349, 20161031], [16364, 20161107], [16249, 20161114], [16345, 20161121], [16294, 20161128], [16336, 20161205], [16387, 20161212], [16372, 20170102], [16406, 20170109], [16379, 20170116], [16305, 20170213], [16207, 20170220], [16111, 20170306], [16230, 20170320], [16270, 20170417], [16226, 20170424], [16303, 20170501], [16124, 20170508], [16204, 20170515], [16290, 20170522], [16649, 20170529], [16157, 20170612], [16189, 20170619], [16184, 20170626], [16597, 20170703], [15983, 20170717], [16138, 20170724], [16145, 20170731], [16147, 20170807], [16268, 20170814], [16279, 20170821], [16301, 20170828], [16161, 20170911]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nranking_date,ranking,player_id,ranking_points,tours\n20000101,3,200748,4378,13\n20000101,4,200033,3021,15\n20000101,28,200020,960,0\n20000101,31,200124,834,8\n20000101,43,200120,698,6\n20000101,44,200117,671,0\n20000101,45,200083,669,16\n20000101,48,200002,640,27\n20000101,50,200072,629,0\n20000101,56,200036,548,0\n\nQuestion: Find the total number of tours for each ranking date."}
{"db_id": "wta_1", "question": "How many total tours were there for each ranking date?", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "table_data_path": "csv_files/wta_1/rankings/data.csv", "execution_results": [[0, 19870119], [0, 19870126], [0, 19870202], [0, 19870209], [0, 19870302], [0, 19870330], [0, 19870406], [0, 19870413], [0, 19870420], [0, 19870427], [0, 19870504], [0, 19870511], [0, 19870518], [0, 19870525], [0, 19870601], [0, 19870608], [0, 19870615], [0, 19870622], [0, 19870629], [0, 19870706], [0, 19870713], [0, 19870720], [0, 19870727], [0, 19870803], [0, 19870810], [0, 19870817], [0, 19870824], [0, 19870831], [0, 19870907], [0, 19870914], [0, 19870921], [0, 19870928], [0, 19871005], [0, 19871012], [0, 19871019], [0, 19871026], [0, 19871102], [0, 19871109], [0, 19871116], [0, 19871123], [0, 19871130], [0, 19871207], [0, 19871214], [0, 19871221], [0, 19871228], [0, 19880101], [0, 19880104], [0, 19880111], [0, 19880118], [0, 19880125], [0, 19880201], [0, 19880208], [0, 19880215], [0, 19880222], [0, 19880229], [0, 19880307], [0, 19880314], [0, 19880321], [0, 19880328], [0, 19880404], [0, 19880411], [0, 19880418], [0, 19880425], [0, 19880502], [0, 19880509], [0, 19880516], [0, 19880523], [0, 19880530], [0, 19880606], [0, 19880613], [0, 19880620], [0, 19880627], [0, 19880704], [0, 19880711], [0, 19880718], [0, 19880725], [0, 19880801], [0, 19880808], [0, 19880815], [0, 19880822], [0, 19880829], [0, 19880905], [0, 19880912], [0, 19880919], [0, 19880926], [0, 19881003], [0, 19881010], [0, 19881017], [0, 19881024], [0, 19881031], [0, 19881107], [0, 19881114], [29, 19881121], [29, 19881128], [29, 19881205], [29, 19881212], [29, 19881219], [29, 19881226], [28, 19890101], [29, 19890102], [29, 19890109], [29, 19890116], [29, 19890123], [29, 19890130], [29, 19890206], [0, 19890213], [0, 19890220], [0, 19890227], [0, 19890306], [29, 19890313], [29, 19890320], [0, 19890327], [0, 19890403], [29, 19890410], [29, 19890417], [29, 19890424], [29, 19890501], [29, 19890508], [29, 19890515], [29, 19890522], [29, 19890529], [29, 19890605], [29, 19890612], [29, 19890619], [29, 19890626], [29, 19890703], [29, 19890710], [29, 19890717], [29, 19890724], [29, 19890731], [29, 19890807], [29, 19890814], [29, 19890821], [29, 19890828], [29, 19890904], [29, 19890911], [29, 19890918], [29, 19890925], [29, 19891002], [29, 19891009], [29, 19891016], [29, 19891023], [29, 19891030], [29, 19891106], [29, 19891113], [29, 19891120], [29, 19891127], [29, 19891204], [29, 19891211], [29, 19891218], [29, 19891225], [28, 19900101], [29, 19900108], [29, 19900115], [29, 19900122], [29, 19900129], [29, 19900205], [29, 19900212], [29, 19900219], [29, 19900226], [29, 19900305], [29, 19900312], [29, 19900319], [29, 19900326], [29, 19900402], [29, 19900409], [29, 19900416], [29, 19900423], [29, 19900430], [29, 19900507], [29, 19900514], [29, 19900521], [29, 19900528], [29, 19900604], [29, 19900611], [30, 19900618], [30, 19900625], [30, 19900702], [30, 19900709], [30, 19900716], [30, 19900723], [30, 19900730], [30, 19900806], [30, 19900813], [30, 19900820], [30, 19900827], [30, 19900903], [30, 19900910], [30, 19900917], [30, 19900924], [30, 19901001], [30, 19901008], [30, 19901015], [30, 19901022], [30, 19901029], [30, 19901105], [30, 19901112], [30, 19901119], [30, 19901126], [30, 19901203], [30, 19901210], [30, 19901217], [30, 19901224], [30, 19901231], [29, 19910101], [30, 19910107], [30, 19910114], [30, 19910121], [30, 19910128], [30, 19910204], [30, 19910211], [30, 19910218], [30, 19910225], [30, 19910304], [29, 19910311], [29, 19910318], [29, 19910325], [29, 19910401], [29, 19910408], [29, 19910415], [29, 19910422], [29, 19910429], [29, 19910506], [29, 19910513], [29, 19910520], [29, 19910527], [29, 19910603], [29, 19910610], [29, 19910617], [29, 19910624], [29, 19910701], [30, 19910708], [29, 19910715], [29, 19910722], [29, 19910729], [29, 19910805], [29, 19910812], [29, 19910819], [30, 19910826], [30, 19910902], [30, 19910909], [30, 19910916], [30, 19910923], [30, 19910930], [31, 19911007], [31, 19911014], [31, 19911021], [31, 19911028], [44, 19911104], [44, 19911111], [44, 19911118], [44, 19911125], [31, 19911202], [44, 19911209], [45, 19911216], [45, 19911223], [45, 19911230], [44, 19920101], [45, 19920106], [45, 19920113], [45, 19920120], [45, 19920127], [45, 19920203], [29, 19920210], [45, 19920217], [45, 19920224], [45, 19920302], [45, 19920309], [45, 19920316], [45, 19920323], [45, 19920330], [45, 19920406], [45, 19920413], [45, 19920420], [45, 19920427], [45, 19920504], [45, 19920511], [45, 19920518], [45, 19920525], [45, 19920601], [45, 19920608], [45, 19920615], [45, 19920622], [45, 19920629], [45, 19920706], [46, 19920713], [46, 19920720], [45, 19920727], [73, 19920803], [73, 19920810], [73, 19920817], [119, 19920824], [90, 19920831], [90, 19920907], [90, 19920914], [90, 19920921], [90, 19920928], [62, 19921005], [62, 19921012], [62, 19921019], [62, 19921026], [62, 19921102], [62, 19921109], [62, 19921116], [62, 19921123], [62, 19921130], [62, 19921207], [62, 19921214], [62, 19921221], [45, 19921228], [44, 19930101], [45, 19930104], [45, 19930111], [45, 19930118], [45, 19930125], [45, 19930201], [32, 19930208], [45, 19930215], [45, 19930222], [45, 19930301], [45, 19930308], [45, 19930315], [45, 19930322], [45, 19930329], [45, 19930405], [62, 19930412], [62, 19930419], [62, 19930426], [62, 19930503], [62, 19930510], [44, 19930517], [44, 19930524], [44, 19930531], [44, 19930607], [44, 19930614], [44, 19930621], [44, 19930628], [62, 19930705], [62, 19930712], [62, 19930719], [62, 19930726], [43, 19930802], [43, 19930809], [43, 19930816], [43, 19930823], [43, 19930830], [43, 19930906], [43, 19930913], [76, 19930920], [75, 19930927], [58, 19931004], [58, 19931011], [58, 19931018], [58, 19931025], [58, 19931101], [58, 19931108], [75, 19931115], [75, 19931122], [75, 19931129], [75, 19931206], [75, 19931213], [75, 19931220], [75, 19931227], [73, 19940101], [75, 19940103], [75, 19940110], [75, 19940117], [75, 19940124], [62, 19940131], [63, 19940207], [63, 19940214], [63, 19940221], [62, 19940228], [62, 19940307], [62, 19940314], [62, 19940321], [61, 19940328], [62, 19940404], [61, 19940411], [44, 19940418], [57, 19940425], [57, 19940502], [57, 19940509], [57, 19940516], [57, 19940523], [57, 19940530], [65, 19940606], [65, 19940613], [65, 19940620], [65, 19940627], [67, 19940704], [67, 19940711], [60, 19940718], [60, 19940725], [60, 19940801], [60, 19940808], [60, 19940815], [60, 19940822], [60, 19940829], [60, 19940905], [68, 19940912], [68, 19940919], [69, 19940926], [69, 19941003], [69, 19941010], [69, 19941017], [59, 19941024], [59, 19941031], [69, 19941107], [69, 19941114], [69, 19941121], [69, 19941128], [69, 19941205], [69, 19941212], [69, 19941219], [69, 19941226], [69, 19950101], [69, 19950102], [69, 19950109], [69, 19950116], [69, 19950123], [69, 19950130], [69, 19950206], [69, 19950213], [69, 19950220], [69, 19950227], [69, 19950306], [69, 19950313], [69, 19950320], [69, 19950327], [69, 19950403], [69, 19950410], [69, 19950417], [69, 19950424], [69, 19950501], [69, 19950508], [69, 19950515], [69, 19950522], [69, 19950529], [69, 19950605], [96, 19950612], [96, 19950619], [96, 19950626], [96, 19950703], [97, 19950710], [118, 19950717], [118, 19950724], [118, 19950731], [118, 19950807], [118, 19950814], [131, 19950821], [131, 19950828], [131, 19950904], [131, 19950911], [131, 19950918], [131, 19950925], [131, 19951002], [131, 19951009], [131, 19951016], [131, 19951023], [131, 19951030], [131, 19951106], [138, 19951113], [138, 19951120], [138, 19951127], [138, 19951204], [138, 19951211], [138, 19951218], [138, 19951225], [138, 19960101], [125, 19960108], [125, 19960115], [125, 19960122], [125, 19960129], [125, 19960205], [125, 19960212], [125, 19960219], [147, 19960226], [147, 19960304], [147, 19960311], [147, 19960318], [147, 19960325], [147, 19960401], [147, 19960408], [147, 19960415], [147, 19960422], [147, 19960429], [147, 19960506], [147, 19960513], [147, 19960520], [147, 19960527], [147, 19960603], [147, 19960610], [147, 19960617], [147, 19960624], [147, 19960701], [171, 19960708], [171, 19960715], [171, 19960722], [171, 19960729], [171, 19960805], [171, 19960812], [171, 19960819], [171, 19960826], [171, 19960902], [194, 19960909], [172, 19960916], [172, 19960923], [172, 19960930], [172, 19961007], [175, 19961014], [175, 19961021], [191, 19961028], [191, 19961104], [213, 19961111], [213, 19961118], [213, 19961125], [213, 19961202], [213, 19961209], [213, 19961216], [185, 19961223], [185, 19961230], [185, 19970101], [185, 19970106], [185, 19970113], [185, 19970120], [209, 19970127], [209, 19970203], [209, 19970210], [209, 19970217], [223, 19970224], [223, 19970303], [223, 19970310], [223, 19970317], [223, 19970324], [223, 19970331], [223, 19970407], [225, 19970414], [225, 19970421], [225, 19970428], [225, 19970505], [225, 19970512], [225, 19970519], [225, 19970526], [225, 19970602], [225, 19970609], [225, 19970616], [225, 19970623], [225, 19970630], [164, 19970707], [257, 19970714], [257, 19970721], [257, 19970728], [273, 19970804], [273, 19970811], [273, 19970818], [273, 19970825], [273, 19970901], [273, 19970908], [273, 19970915], [273, 19970922], [273, 19970929], [273, 19971006], [299, 19971013], [314, 19971020], [314, 19971027], [337, 19971103], [337, 19971110], [363, 19971117], [363, 19971124], [363, 19971201], [394, 19971208], [394, 19971215], [394, 19971222], [394, 19971229], [394, 19980101], [394, 19980105], [394, 19980112], [394, 19980119], [394, 19980126], [394, 19980202], [394, 19980209], [394, 19980216], [394, 19980223], [394, 19980302], [394, 19980309], [394, 19980316], [394, 19980323], [426, 19980330], [426, 19980406], [459, 19980413], [459, 19980420], [459, 19980427], [459, 19980504], [459, 19980511], [459, 19980518], [459, 19980525], [459, 19980601], [543, 19980608], [569, 19980615], [590, 19980622], [590, 19980629], [633, 19980706], [633, 19980713], [633, 19980720], [634, 19980727], [634, 19980803], [634, 19980810], [631, 19980817], [631, 19980824], [660, 19980831], [660, 19980907], [663, 19980914], [663, 19980921], [683, 19980928], [688, 19981005], [688, 19981012], [696, 19981019], [693, 19981026], [693, 19981102], [692, 19981109], [692, 19981116], [692, 19981123], [709, 19981130], [703, 19981207], [703, 19981214], [703, 19981221], [703, 19981228], [703, 19990101], [722, 19990104], [722, 19990111], [722, 19990118], [722, 19990125], [728, 19990201], [723, 19990208], [723, 19990215], [723, 19990222], [723, 19990301], [723, 19990308], [728, 19990315], [728, 19990322], [728, 19990329], [728, 19990405], [728, 19990412], [728, 19990419], [752, 19990426], [761, 19990503], [761, 19990510], [777, 19990517], [777, 19990524], [777, 19990531], [804, 19990607], [804, 19990614], [804, 19990621], [804, 19990628], [804, 19990705], [829, 19990712], [829, 19990719], [829, 19990726], [829, 19990802], [870, 19990809], [873, 19990816], [853, 19990823], [861, 19990830], [861, 19990906], [879, 19990913], [879, 19990920], [899, 19990927], [927, 19991004], [941, 19991011], [964, 19991018], [941, 19991025], [941, 19991101], [941, 19991108], [941, 19991115], [941, 19991122], [966, 19991129], [966, 19991206], [989, 19991213], [989, 19991220], [989, 19991227], [989, 20000101], [989, 20000103], [989, 20000110], [989, 20000117], [989, 20000124], [1013, 20000131], [1038, 20000207], [1038, 20000214], [1038, 20000221], [1038, 20000228], [1065, 20000306], [1065, 20000313], [1065, 20000320], [1065, 20000327], [1065, 20000403], [1093, 20000410], [1093, 20000417], [1093, 20000424], [1122, 20000501], [1122, 20000508], [1106, 20000515], [1106, 20000522], [1106, 20000529], [1106, 20000605], [1160, 20000612], [1160, 20000619], [1188, 20000626], [1188, 20000703], [1204, 20000710], [1205, 20000717], [1212, 20000724], [1276, 20000731], [1276, 20000807], [1224, 20000814], [1224, 20000821], [1224, 20000828], [1224, 20000904], [1241, 20000911], [1265, 20000918], [1231, 20000925], [1223, 20001002], [1232, 20001009], [1253, 20001016], [1245, 20001023], [1247, 20001030], [1173, 20001106], [964, 20001113], [961, 20001120], [961, 20001127], [961, 20001204], [964, 20001211], [964, 20001218], [964, 20001225], [964, 20010101], [964, 20010108], [964, 20010115], [964, 20010122], [977, 20010129], [977, 20010205], [1004, 20010212], [1027, 20010219], [1027, 20010226], [1027, 20010305], [1027, 20010312], [1101, 20010319], [1101, 20010326], [914, 20010402], [930, 20010409], [952, 20010416], [961, 20010423], [988, 20010430], [1011, 20010507], [1011, 20010514], [1029, 20010521], [1067, 20010528], [1067, 20010604], [1094, 20010611], [1094, 20010618], [1073, 20010625], [1073, 20010702], [1113, 20010709], [1135, 20010716], [1149, 20010723], [1149, 20010730], [1175, 20010806], [1175, 20010813], [1175, 20010820], [1201, 20010827], [1201, 20010903], [1228, 20010910], [1231, 20010917], [1263, 20010924], [1287, 20011001], [1267, 20011008], [1288, 20011015], [1291, 20011022], [1312, 20011029], [1312, 20011105], [1412, 20011112], [1412, 20011119], [1437, 20011126], [1437, 20011203], [1437, 20011210], [1430, 20011217], [1430, 20011224], [1430, 20011231], [1430, 20020101], [1430, 20020107], [1430, 20020114], [1430, 20020121], [1430, 20020128], [1422, 20020204], [1422, 20020211], [1422, 20020218], [1424, 20020225], [1424, 20020304], [1424, 20020311], [1448, 20020318], [1448, 20020325], [1573, 20020401], [1574, 20020408], [1574, 20020415], [1574, 20020422], [1577, 20020429], [1730, 20020506], [1577, 20020513], [1577, 20020520], [1577, 20020527], [1577, 20020603], [1783, 20020610], [1803, 20020617], [1783, 20020624], [1783, 20020701], [1834, 20020708], [1835, 20020715], [1828, 20020722], [1853, 20020729], [1853, 20020805], [1925, 20020812], [1915, 20020819], [2111, 20020826], [2111, 20020902], [2451, 20020909], [2457, 20020916], [2462, 20020923], [2496, 20020930], [2526, 20021007], [2520, 20021014], [2505, 20021021], [2505, 20021028], [2498, 20021104], [2497, 20021111], [2497, 20021118], [2497, 20021125], [2497, 20021202], [2497, 20021209], [2497, 20021216], [2497, 20021223], [2497, 20021230], [2497, 20030101], [2497, 20030106], [2497, 20030113], [2497, 20030120], [2497, 20030127], [2517, 20030203], [2507, 20030210], [2490, 20030217], [2528, 20030224], [2549, 20030303], [2549, 20030310], [2571, 20030317], [2571, 20030324], [2614, 20030331], [2587, 20030407], [2587, 20030414], [2608, 20030421], [2719, 20030428], [2652, 20030505], [2671, 20030512], [2728, 20030519], [1860, 20030526], [2728, 20030602], [2753, 20030609], [2753, 20030616], [2731, 20030623], [2731, 20030630], [2730, 20030707], [2755, 20030714], [2759, 20030721], [2777, 20030728], [2732, 20030804], [2734, 20030811], [2755, 20030818], [2801, 20030825], [2801, 20030901], [2798, 20030908], [2847, 20030915], [2862, 20030922], [2930, 20030929], [2961, 20031006], [2966, 20031013], [3035, 20031020], [3020, 20031027], [3038, 20031103], [3052, 20031110], [3065, 20031117], [3092, 20031124], [3120, 20031201], [3190, 20031208], [3211, 20031215], [3211, 20031222], [3214, 20031229], [3214, 20040101], [3206, 20040105], [3206, 20040112], [3206, 20040119], [3206, 20040126], [3257, 20040202], [3265, 20040209], [3282, 20040216], [3282, 20040223], [3279, 20040301], [3286, 20040308], [3286, 20040315], [3286, 20040322], [3286, 20040329], [3277, 20040405], [3286, 20040412], [1489, 20040419], [3379, 20040426], [2613, 20040503], [1187, 20040510], [2361, 20040517], [2955, 20040524], [2535, 20040531], [3433, 20040607], [3456, 20040614], [3492, 20040621], [3492, 20040628], [3498, 20040705], [3516, 20040712], [3587, 20040719], [3592, 20040726], [3592, 20040802], [3645, 20040809], [3647, 20040816], [3661, 20040823], [3705, 20040830], [3705, 20040906], [3785, 20040913], [3831, 20040920], [3913, 20040927], [3957, 20041004], [3986, 20041011], [3987, 20041018], [3968, 20041025], [4011, 20041101], [4071, 20041108], [4124, 20041115], [4145, 20041122], [4147, 20041129], [4160, 20041206], [4160, 20041213], [4160, 20041220], [4160, 20041227], [4160, 20050101], [4160, 20050103], [4160, 20050110], [4160, 20050117], [4160, 20050124], [4198, 20050131], [4198, 20050207], [4211, 20050214], [4286, 20050221], [4286, 20050228], [4313, 20050307], [4313, 20050314], [4333, 20050321], [4333, 20050328], [4362, 20050404], [4371, 20050411], [4379, 20050418], [4379, 20050425], [4379, 20050502], [4470, 20050509], [4489, 20050516], [4522, 20050523], [4522, 20050530], [4682, 20050606], [4705, 20050613], [4727, 20050620], [4727, 20050627], [4792, 20050704], [4816, 20050711], [4847, 20050718], [4859, 20050725], [4926, 20050801], [4982, 20050808], [5020, 20050815], [5090, 20050822], [5100, 20050829], [5100, 20050905], [5187, 20050912], [5173, 20050919], [5175, 20050926], [5215, 20051003], [5249, 20051010], [5237, 20051017], [5257, 20051024], [5331, 20051031], [5362, 20051107], [5357, 20051114], [5391, 20051121], [5401, 20051128], [5452, 20051205], [5452, 20051212], [5452, 20051219], [5452, 20051226], [5452, 20060101], [5452, 20060102], [5452, 20060109], [5452, 20060116], [5452, 20060123], [5441, 20060130], [5425, 20060206], [5441, 20060213], [5478, 20060220], [5528, 20060227], [5548, 20060306], [5548, 20060313], [5559, 20060320], [5559, 20060327], [5626, 20060403], [5626, 20060410], [5644, 20060417], [5658, 20060424], [5656, 20060501], [5654, 20060508], [5683, 20060515], [5721, 20060522], [5798, 20060529], [5798, 20060605], [5862, 20060612], [5897, 20060619], [5944, 20060626], [5944, 20060703], [5983, 20060710], [6026, 20060717], [6065, 20060724], [6133, 20060731], [6151, 20060807], [6226, 20060814], [6289, 20060821], [6284, 20060828], [6284, 20060904], [6304, 20060911], [6347, 20060918], [6376, 20060925], [6436, 20061002], [6520, 20061009], [6629, 20061016], [6730, 20061023], [6808, 20061030], [6816, 20061106], [6807, 20061113], [6893, 20061120], [6896, 20061127], [6931, 20061204], [6953, 20061211], [6953, 20061218], [6953, 20061225], [6953, 20070101], [6926, 20070108], [6926, 20070115], [6926, 20070122], [6925, 20070129], [6925, 20070205], [6930, 20070212], [6942, 20070219], [6988, 20070226], [7017, 20070305], [7017, 20070312], [7058, 20070319], [7058, 20070326], [7139, 20070402], [7175, 20070409], [7197, 20070416], [7197, 20070423], [7197, 20070430], [7233, 20070507], [7317, 20070514], [7341, 20070521], [7365, 20070528], [7365, 20070604], [7448, 20070611], [7448, 20070618], [7473, 20070625], [7473, 20070702], [7495, 20070709], [7478, 20070716], [7470, 20070723], [7528, 20070730], [7522, 20070806], [7527, 20070813], [7503, 20070820], [7504, 20070827], [7504, 20070903], [7602, 20070910], [7643, 20070917], [7686, 20070924], [7697, 20071001], [7707, 20071008], [7687, 20071015], [7638, 20071022], [7711, 20071029], [7677, 20071105], [7664, 20071112], [7666, 20071119], [7674, 20071126], [7650, 20071203], [7659, 20071210], [7659, 20071217], [7682, 20071224], [7682, 20071231], [7682, 20080101], [7682, 20080107], [7711, 20080114], [7711, 20080121], [7691, 20080128], [7716, 20080204], [7743, 20080211], [7742, 20080218], [7731, 20080225], [7761, 20080303], [7790, 20080310], [7790, 20080317], [7832, 20080324], [7832, 20080331], [7873, 20080407], [7889, 20080414], [7917, 20080421], [7917, 20080428], [7929, 20080505], [8002, 20080512], [8022, 20080519], [8090, 20080526], [8090, 20080602], [8030, 20080609], [7970, 20080616], [7966, 20080623], [7966, 20080630], [8089, 20080707], [8113, 20080714], [8235, 20080721], [8280, 20080728], [8325, 20080804], [8372, 20080811], [8387, 20080818], [8417, 20080825], [8417, 20080901], [8527, 20080908], [8639, 20080915], [8690, 20080922], [8731, 20080929], [8762, 20081006], [8794, 20081013], [8836, 20081020], [8898, 20081027], [8956, 20081103], [8996, 20081110], [9003, 20081117], [9019, 20081124], [9050, 20081201], [9076, 20081208], [9077, 20081215], [9070, 20081222], [9070, 20081229], [9070, 20090101], [9064, 20090105], [9064, 20090112], [9064, 20090119], [9064, 20090126], [9087, 20090202], [9087, 20090209], [9059, 20090216], [9063, 20090223], [9063, 20090302], [9053, 20090309], [9053, 20090316], [9057, 20090323], [9057, 20090330], [9066, 20090406], [9121, 20090413], [9110, 20090420], [9111, 20090427], [9094, 20090504], [9143, 20090511], [9140, 20090518], [9153, 20090525], [9153, 20090601], [9203, 20090608], [9239, 20090615], [9255, 20090622], [9255, 20090629], [9310, 20090706], [9376, 20090713], [9474, 20090720], [9589, 20090727], [9611, 20090803], [9598, 20090810], [9642, 20090817], [9682, 20090824], [9682, 20090831], [9682, 20090907], [9808, 20090914], [9856, 20090921], [9918, 20090928], [9929, 20091005], [9925, 20091012], [10003, 20091019], [10025, 20091026], [10061, 20091102], [10116, 20091109], [10137, 20091116], [10204, 20091123], [10238, 20091130], [10221, 20091207], [10272, 20091214], [10272, 20091221], [10318, 20091228], [10318, 20100101], [10318, 20100104], [10320, 20100111], [10329, 20100118], [10329, 20100125], [10373, 20100201], [10372, 20100208], [10389, 20100215], [10404, 20100222], [10430, 20100301], [10442, 20100308], [10442, 20100315], [10412, 20100322], [10412, 20100329], [10481, 20100405], [10515, 20100412], [10543, 20100419], [10580, 20100426], [10590, 20100503], [10576, 20100510], [10593, 20100517], [10634, 20100524], [10634, 20100531], [10613, 20100607], [10630, 20100614], [10634, 20100621], [10634, 20100628], [10685, 20100705], [10726, 20100712], [10756, 20100719], [10817, 20100726], [10835, 20100802], [10937, 20100809], [10999, 20100816], [11026, 20100823], [11125, 20100830], [11125, 20100906], [11256, 20100913], [11290, 20100920], [11339, 20100927], [11460, 20101004], [11566, 20101011], [11594, 20101018], [11617, 20101025], [11687, 20101101], [11735, 20101108], [11814, 20101115], [11845, 20101122], [11877, 20101129], [11888, 20101206], [11907, 20101213], [11913, 20101220], [11904, 20101227], [11904, 20110101], [12060, 20110103], [12067, 20110110], [12094, 20110117], [12094, 20110124], [12143, 20110131], [12181, 20110207], [12204, 20110214], [12201, 20110221], [12254, 20110228], [12267, 20110307], [12267, 20110314], [12303, 20110321], [12303, 20110328], [12343, 20110404], [12398, 20110411], [12434, 20110418], [12422, 20110425], [12438, 20110502], [12482, 20110509], [12467, 20110516], [12522, 20110523], [12522, 20110530], [12659, 20110606], [12682, 20110613], [12686, 20110620], [12686, 20110627], [12867, 20110704], [12895, 20110711], [12927, 20110718], [13006, 20110725], [12999, 20110801], [13081, 20110808], [13129, 20110815], [13140, 20110822], [13174, 20110829], [13174, 20110905], [13299, 20110912], [13342, 20110919], [13382, 20110926], [13372, 20111003], [13382, 20111010], [13411, 20111017], [13443, 20111024], [13465, 20111031], [13443, 20111107], [13482, 20111114], [13518, 20111121], [13517, 20111128], [13542, 20111205], [13536, 20111212], [13565, 20111219], [13603, 20111226], [13603, 20120101], [13610, 20120102], [13628, 20120109], [13618, 20120116], [13618, 20120123], [13667, 20120130], [13666, 20120206], [13674, 20120213], [13719, 20120220], [13788, 20120227], [13791, 20120305], [13791, 20120312], [13818, 20120319], [13818, 20120326], [13881, 20120402], [13902, 20120409], [13938, 20120416], [13964, 20120423], [13983, 20120430], [14016, 20120507], [14015, 20120514], [14034, 20120521], [14087, 20120528], [14087, 20120604], [14072, 20120611], [14138, 20120618], [14172, 20120625], [14172, 20120702], [14180, 20120709], [14223, 20120716], [14250, 20120723], [14264, 20120730], [14286, 20120806], [14331, 20120813], [14361, 20120820], [14389, 20120827], [14389, 20120903], [14389, 20120910], [14402, 20120917], [14438, 20120924], [14472, 20121001], [14480, 20121008], [14513, 20121015], [14525, 20121022], [14547, 20121029], [14585, 20121105], [14621, 20121112], [14624, 20121119], [14612, 20121126], [14610, 20121203], [14639, 20121210], [14633, 20121217], [14649, 20121224], [13949, 20121231], [14648, 20130101], [13966, 20130107], [14667, 20130114], [14667, 20130121], [14667, 20130128], [14652, 20130204], [14651, 20130211], [14649, 20130218], [14554, 20130225], [14695, 20130304], [14727, 20130311], [13048, 20130318], [6790, 20130401], [14591, 20130408], [14449, 20130415], [14451, 20130422], [14462, 20130429], [14487, 20130506], [14516, 20130513], [14531, 20130520], [14545, 20130527], [14545, 20130603], [14553, 20130610], [14569, 20130617], [14650, 20130624], [14651, 20130708], [14689, 20130715], [14751, 20130722], [14766, 20130729], [14679, 20130805], [14599, 20130812], [14740, 20130819], [14714, 20130826], [14796, 20130902], [14820, 20130909], [14866, 20130916], [14878, 20130923], [14885, 20130930], [15028, 20131007], [15072, 20131014], [15025, 20131021], [15071, 20131028], [15098, 20131104], [15101, 20131111], [15151, 20131118], [15337, 20131125], [15334, 20131202], [15512, 20131209], [15540, 20131216], [15701, 20131223], [15708, 20131230], [15703, 20140106], [15637, 20140113], [8585, 20140120], [15646, 20140127], [15632, 20140203], [15637, 20140210], [8565, 20140217], [15659, 20140224], [15557, 20150302], [15578, 20150406], [15545, 20150413], [15568, 20150420], [15475, 20150427], [15710, 20150511], [15623, 20150518], [15741, 20150525], [15741, 20150608], [15810, 20150622], [15761, 20150803], [15776, 20150810], [15908, 20150824], [16184, 20150831], [15832, 20150914], [15800, 20150921], [16178, 20151005], [16191, 20151012], [16138, 20151019], [16293, 20151102], [4812, 20160111], [16518, 20160118], [16629, 20160201], [16586, 20160208], [16529, 20160215], [16454, 20160222], [16515, 20160229], [16517, 20160307], [16446, 20160411], [16454, 20160418], [16489, 20160425], [16388, 20160502], [16374, 20160509], [16351, 20160523], [16361, 20160606], [16314, 20160620], [16293, 20160627], [16325, 20160815], [16316, 20160919], [16305, 20160926], [16233, 20161010], [16349, 20161031], [16364, 20161107], [16249, 20161114], [16345, 20161121], [16294, 20161128], [16336, 20161205], [16387, 20161212], [16372, 20170102], [16406, 20170109], [16379, 20170116], [16305, 20170213], [16207, 20170220], [16111, 20170306], [16230, 20170320], [16270, 20170417], [16226, 20170424], [16303, 20170501], [16124, 20170508], [16204, 20170515], [16290, 20170522], [16649, 20170529], [16157, 20170612], [16189, 20170619], [16184, 20170626], [16597, 20170703], [15983, 20170717], [16138, 20170724], [16145, 20170731], [16147, 20170807], [16268, 20170814], [16279, 20170821], [16301, 20170828], [16161, 20170911]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nranking_date,ranking,player_id,ranking_points,tours\n20000101,3,200748,4378,13\n20000101,4,200033,3021,15\n20000101,28,200020,960,0\n20000101,31,200124,834,8\n20000101,43,200120,698,6\n20000101,44,200117,671,0\n20000101,45,200083,669,16\n20000101,48,200002,640,27\n20000101,50,200072,629,0\n20000101,56,200036,548,0\n\nQuestion: How many total tours were there for each ranking date?"}
{"db_id": "wta_1", "question": "Find the number of matches happened in each year.", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[12, 2013], [158, 2016], [108, 2017]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the number of matches happened in each year."}
{"db_id": "wta_1", "question": "How many matches were played in each year?", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[12, 2013], [158, 2016], [108, 2017]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: How many matches were played in each year?"}
{"db_id": "wta_1", "question": "Find the name and rank of the 3 youngest winners across all matches.", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Madison Keys", 17], ["Madison Keys", 24], ["Madison Keys", 16]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the name and rank of the 3 youngest winners across all matches."}
{"db_id": "wta_1", "question": "What are the names and ranks of the three youngest winners across all matches?", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [["Madison Keys", 17], ["Madison Keys", 24], ["Madison Keys", 16]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: What are the names and ranks of the three youngest winners across all matches?"}
{"db_id": "wta_1", "question": "How many different winners both participated in the WTA Championships and were left handed?", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: How many different winners both participated in the WTA Championships and were left handed?"}
{"db_id": "wta_1", "question": "Find the number of left handed winners who participated in the WTA Championships.", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "table_data_path": "csv_files/wta_1/matches/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nbest_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,297,82,RR,6-2 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,296,72,RR,6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,295,64,RR,6-3 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,32.0684462697,,R,175,200033,USA,Serena Williams,1,12040,1,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,294,84,RR,6-4 6-4,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.626967830300003,,R,170,201474,POL,Agnieszka Radwanska,4,5890,3,293,58,RR,6-2 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,2013\n3,4,25.7577002053,,L,173,201493,GER,Angelique Kerber,9,3715,8,292,127,RR,6-7(3) 6-2 6-3,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,23.6221765914,,L,183,201520,CZE,Petra Kvitova,6,4370,5,2013\n3,4,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,291,77,RR,6-2 6-1,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,31.6495550992,,R,172,201419,CHN,Na Li,5,5120,4,2013\n3,4,26.4804928131,,R,164,201506,ITA,Sara Errani,7,4190,6,290,134,RR,7-6(4) 6-2,Hard,20131021,2013-W-WT-TUR-01A-2013,W,WTA Championships,24.2245037645,,R,180,201458,BLR,Victoria Azarenka,2,7676,2,2013\n\nQuestion: Find the number of left handed winners who participated in the WTA Championships."}
{"db_id": "battle_death", "question": "How many ships ended up being 'Captured'?", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "table_data_path": "csv_files/battle_death/ship/data.csv", "execution_results": [[4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nlost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship\n8,1,Lettice,t,Brig,English Channel,Captured\n7,2,Bon Accord,t,Brig,English Channel,Captured\n6,3,Mary,t,Brig,English Channel,Captured\n5,4,HMS Avon,391,18-gun Brig,English Channel,Wrecked\n5,5,Three Brothers,t,Brig,SW Approaches,Scuttled\n4,6,Bacchus,t,Brig,English Channel,Sank\n8,7,HMS Atalanta,225,8 gun Brig,Mid-Atlantic,Captured\n\nQuestion: How many ships ended up being 'Captured'?"}
{"db_id": "battle_death", "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "table_data_path": "csv_files/battle_death/ship/data.csv", "execution_results": [["Three Brothers", "t"], ["Mary", "t"], ["Lettice", "t"], ["HMS Avon", "391"], ["HMS Atalanta", "225"], ["Bon Accord", "t"], ["Bacchus", "t"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nlost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship\n8,1,Lettice,t,Brig,English Channel,Captured\n7,2,Bon Accord,t,Brig,English Channel,Captured\n6,3,Mary,t,Brig,English Channel,Captured\n5,4,HMS Avon,391,18-gun Brig,English Channel,Wrecked\n5,5,Three Brothers,t,Brig,SW Approaches,Scuttled\n4,6,Bacchus,t,Brig,English Channel,Sank\n8,7,HMS Atalanta,225,8 gun Brig,Mid-Atlantic,Captured\n\nQuestion: List the name and tonnage ordered by in descending alphaetical order for the names."}
{"db_id": "battle_death", "question": "List the name, date and result of each battle.", "query": "SELECT name ,  date FROM battle", "table_data_path": "csv_files/battle_death/battle/data.csv", "execution_results": [["Battle of Adrianople", "14 April 1205"], ["Battle of Serres", "June 1205"], ["Battle of Rusion", "31 January 1206"], ["Battle of Rodosto", "February 1206"], ["Battle of Messinopolis", "4 September 1207"], ["Battle of Boruy", "June 1205"], ["Battle of Philippopolis", "31 June 1208"], ["Siege of Constantinople", "1235"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,name,date,bulgarian_commander,latin_commander,result\n1,Battle of Adrianople,14 April 1205,Kaloyan,Baldwin I,Bulgarian victory\n2,Battle of Serres,June 1205,Kaloyan,Unknown,Bulgarian victory\n3,Battle of Rusion,31 January 1206,Kaloyan,Thierry de Termond,Bulgarian victory\n4,Battle of Rodosto,February 1206,Kaloyan,Unknown,Bulgarian victory\n5,Battle of Messinopolis,4 September 1207,Unknown,Boniface of Montferrat,Bulgarian victory\n6,Battle of Boruy,June 1205,Boril,Henry I,Bulgarian victory\n7,Battle of Philippopolis,31 June 1208,Boril,Henry I,Latin victory\n8,Siege of Constantinople,1235,Ivan Asen II,John of Brienne,Two Year Truce\n\nQuestion: List the name, date and result of each battle."}
{"db_id": "battle_death", "question": "What is maximum and minimum death toll caused each time?", "query": "SELECT max(killed) ,  min(killed) FROM death", "table_data_path": "csv_files/battle_death/death/data.csv", "execution_results": [[29, 0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncaused_by_ship_id,id,note,killed,injured\n1,1,Dantewada, Chhattisgarh,8,0\n2,2,Dantewada, Chhattisgarh,3,0\n3,13,Erraboru, Chhattisgarh,25,0\n3,3,East Champaran, Bihar,2,0\n4,4,Gajapati, Odisha,3,0\n4,5,Sundargarh, Odisha,0,9\n5,6,Dantewada, Chhattisgarh,0,0\n5,7,Dantewada, Chhattisgarh,4,5\n6,8,Kanker, Chhattisgarh,0,0\n1,9,Dantewada, Chhattisgarh,29,0\n\nQuestion: What is maximum and minimum death toll caused each time?"}
{"db_id": "battle_death", "question": "What is the average number of injuries caused each time?", "query": "SELECT avg(injured) FROM death", "table_data_path": "csv_files/battle_death/death/data.csv", "execution_results": [[1.0769230769230769]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncaused_by_ship_id,id,note,killed,injured\n1,1,Dantewada, Chhattisgarh,8,0\n2,2,Dantewada, Chhattisgarh,3,0\n3,13,Erraboru, Chhattisgarh,25,0\n3,3,East Champaran, Bihar,2,0\n4,4,Gajapati, Odisha,3,0\n4,5,Sundargarh, Odisha,0,9\n5,6,Dantewada, Chhattisgarh,0,0\n5,7,Dantewada, Chhattisgarh,4,5\n6,8,Kanker, Chhattisgarh,0,0\n1,9,Dantewada, Chhattisgarh,29,0\n\nQuestion: What is the average number of injuries caused each time?"}
{"db_id": "battle_death", "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "table_data_path": "csv_files/battle_death/battle/data.csv", "execution_results": [["Battle of Adrianople", "Bulgarian victory"], ["Battle of Serres", "Bulgarian victory"], ["Battle of Rusion", "Bulgarian victory"], ["Battle of Rodosto", "Bulgarian victory"], ["Battle of Messinopolis", "Bulgarian victory"], ["Siege of Constantinople", "Two Year Truce"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,name,date,bulgarian_commander,latin_commander,result\n1,Battle of Adrianople,14 April 1205,Kaloyan,Baldwin I,Bulgarian victory\n2,Battle of Serres,June 1205,Kaloyan,Unknown,Bulgarian victory\n3,Battle of Rusion,31 January 1206,Kaloyan,Thierry de Termond,Bulgarian victory\n4,Battle of Rodosto,February 1206,Kaloyan,Unknown,Bulgarian victory\n5,Battle of Messinopolis,4 September 1207,Unknown,Boniface of Montferrat,Bulgarian victory\n6,Battle of Boruy,June 1205,Boril,Henry I,Bulgarian victory\n7,Battle of Philippopolis,31 June 1208,Boril,Henry I,Latin victory\n8,Siege of Constantinople,1235,Ivan Asen II,John of Brienne,Two Year Truce\n\nQuestion: What are the name and results of the battles when the bulgarian commander is not 'Boril'"}
{"db_id": "battle_death", "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "table_data_path": "csv_files/battle_death/battle/data.csv", "execution_results": [["Battle of Adrianople"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,name,date,bulgarian_commander,latin_commander,result\n1,Battle of Adrianople,14 April 1205,Kaloyan,Baldwin I,Bulgarian victory\n2,Battle of Serres,June 1205,Kaloyan,Unknown,Bulgarian victory\n3,Battle of Rusion,31 January 1206,Kaloyan,Thierry de Termond,Bulgarian victory\n4,Battle of Rodosto,February 1206,Kaloyan,Unknown,Bulgarian victory\n5,Battle of Messinopolis,4 September 1207,Unknown,Boniface of Montferrat,Bulgarian victory\n6,Battle of Boruy,June 1205,Boril,Henry I,Bulgarian victory\n7,Battle of Philippopolis,31 June 1208,Boril,Henry I,Latin victory\n8,Siege of Constantinople,1235,Ivan Asen II,John of Brienne,Two Year Truce\n\nQuestion: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?"}
{"db_id": "battle_death", "question": "How many different results are there for the battles?", "query": "SELECT count(DISTINCT RESULT) FROM battle", "table_data_path": "csv_files/battle_death/battle/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,name,date,bulgarian_commander,latin_commander,result\n1,Battle of Adrianople,14 April 1205,Kaloyan,Baldwin I,Bulgarian victory\n2,Battle of Serres,June 1205,Kaloyan,Unknown,Bulgarian victory\n3,Battle of Rusion,31 January 1206,Kaloyan,Thierry de Termond,Bulgarian victory\n4,Battle of Rodosto,February 1206,Kaloyan,Unknown,Bulgarian victory\n5,Battle of Messinopolis,4 September 1207,Unknown,Boniface of Montferrat,Bulgarian victory\n6,Battle of Boruy,June 1205,Boril,Henry I,Bulgarian victory\n7,Battle of Philippopolis,31 June 1208,Boril,Henry I,Latin victory\n8,Siege of Constantinople,1235,Ivan Asen II,John of Brienne,Two Year Truce\n\nQuestion: How many different results are there for the battles?"}
{"db_id": "battle_death", "question": "What are the notes of the death events which has substring 'East'?", "query": "SELECT note FROM death WHERE note LIKE '%East%'", "table_data_path": "csv_files/battle_death/death/data.csv", "execution_results": [["East Champaran, Bihar"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncaused_by_ship_id,id,note,killed,injured\n1,1,Dantewada, Chhattisgarh,8,0\n2,2,Dantewada, Chhattisgarh,3,0\n3,13,Erraboru, Chhattisgarh,25,0\n3,3,East Champaran, Bihar,2,0\n4,4,Gajapati, Odisha,3,0\n4,5,Sundargarh, Odisha,0,9\n5,6,Dantewada, Chhattisgarh,0,0\n5,7,Dantewada, Chhattisgarh,4,5\n6,8,Kanker, Chhattisgarh,0,0\n1,9,Dantewada, Chhattisgarh,29,0\n\nQuestion: What are the notes of the death events which has substring 'East'?"}
{"db_id": "student_transcripts_tracking", "question": "what are all the addresses including line 1 and line 2?", "query": "SELECT line_1 ,  line_2 FROM addresses", "table_data_path": "csv_files/student_transcripts_tracking/addresses/data.csv", "execution_results": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\naddress_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details\n1,2294 Grant Square Apt. 235,Apt. 370,,Port Chelsea,148,Virginia,Iceland,\n2,3999 Aufderhar Ways Suite 593,Apt. 388,,Lake Laishafurt,943,Kentucky,Burundi,\n3,67942 Carlotta Ferry Apt. 686,Apt. 583,,Goodwinhaven,541,Kansas,Saudi Arabia,\n4,0144 Lamar Plaza Apt. 346,Suite 703,,Port Evanston,847,Washington,Angola,\n5,858 Peggie Bypass Suite 212,Apt. 335,,Michelleburgh,446,Hawaii,Haiti,\n6,16998 Mraz Lodge,Apt. 689,,North Omer,902,Kentucky,Gibraltar,\n7,193 Marlin Brook,Apt. 406,,Herzoghaven,068,Arkansas,Cook Islands,\n8,202 Hessel Views Apt. 468,Apt. 305,,Mariliehaven,638,Idaho,Croatia,\n9,0643 Muller Vista,Suite 383,,Port Elvisfurt,777,NorthCarolina,Gabon,\n10,7081 Eda Center,Suite 830,,Rutherfordtown,839,Delaware,Kyrgyz Republic,\n\nQuestion: what are all the addresses including line 1 and line 2?"}
{"db_id": "student_transcripts_tracking", "question": "What is the first and second line for all addresses?", "query": "SELECT line_1 ,  line_2 FROM addresses", "table_data_path": "csv_files/student_transcripts_tracking/addresses/data.csv", "execution_results": [["2294 Grant Square Apt. 235", "Apt. 370"], ["3999 Aufderhar Ways Suite 593", "Apt. 388"], ["67942 Carlotta Ferry Apt. 686", "Apt. 583"], ["0144 Lamar Plaza Apt. 346", "Suite 703"], ["858 Peggie Bypass Suite 212", "Apt. 335"], ["16998 Mraz Lodge", "Apt. 689"], ["193 Marlin Brook", "Apt. 406"], ["202 Hessel Views Apt. 468", "Apt. 305"], ["0643 Muller Vista", "Suite 383"], ["7081 Eda Center", "Suite 830"], ["9283 Schulist Falls Apt. 037", "Suite 239"], ["979 Haag Shores Suite 656", "Apt. 468"], ["492 Wilkinson Route", "Suite 865"], ["186 Evan Motorway Apt. 409", "Suite 079"], ["74046 Metz Walk Apt. 113", "Suite 674"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\naddress_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details\n1,2294 Grant Square Apt. 235,Apt. 370,,Port Chelsea,148,Virginia,Iceland,\n2,3999 Aufderhar Ways Suite 593,Apt. 388,,Lake Laishafurt,943,Kentucky,Burundi,\n3,67942 Carlotta Ferry Apt. 686,Apt. 583,,Goodwinhaven,541,Kansas,Saudi Arabia,\n4,0144 Lamar Plaza Apt. 346,Suite 703,,Port Evanston,847,Washington,Angola,\n5,858 Peggie Bypass Suite 212,Apt. 335,,Michelleburgh,446,Hawaii,Haiti,\n6,16998 Mraz Lodge,Apt. 689,,North Omer,902,Kentucky,Gibraltar,\n7,193 Marlin Brook,Apt. 406,,Herzoghaven,068,Arkansas,Cook Islands,\n8,202 Hessel Views Apt. 468,Apt. 305,,Mariliehaven,638,Idaho,Croatia,\n9,0643 Muller Vista,Suite 383,,Port Elvisfurt,777,NorthCarolina,Gabon,\n10,7081 Eda Center,Suite 830,,Rutherfordtown,839,Delaware,Kyrgyz Republic,\n\nQuestion: What is the first and second line for all addresses?"}
{"db_id": "student_transcripts_tracking", "question": "How many courses in total are listed?", "query": "SELECT count(*) FROM Courses", "table_data_path": "csv_files/student_transcripts_tracking/courses/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncourse_id,course_name,course_description,other_details\n1,ds,p,\n2,math,q,\n3,os,v,\n4,en,k,\n5,fr,c,\n6,la,n,\n7,cal,l,\n8,nlp,q,\n9,dl,l,\n10,ml,b,\n\nQuestion: How many courses in total are listed?"}
{"db_id": "student_transcripts_tracking", "question": "How many courses are there?", "query": "SELECT count(*) FROM Courses", "table_data_path": "csv_files/student_transcripts_tracking/courses/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncourse_id,course_name,course_description,other_details\n1,ds,p,\n2,math,q,\n3,os,v,\n4,en,k,\n5,fr,c,\n6,la,n,\n7,cal,l,\n8,nlp,q,\n9,dl,l,\n10,ml,b,\n\nQuestion: How many courses are there?"}
{"db_id": "student_transcripts_tracking", "question": "How is the math course described?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "table_data_path": "csv_files/student_transcripts_tracking/courses/data.csv", "execution_results": [["q"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncourse_id,course_name,course_description,other_details\n1,ds,p,\n2,math,q,\n3,os,v,\n4,en,k,\n5,fr,c,\n6,la,n,\n7,cal,l,\n8,nlp,q,\n9,dl,l,\n10,ml,b,\n\nQuestion: How is the math course described?"}
{"db_id": "student_transcripts_tracking", "question": "What are the descriptions for all the math courses?", "query": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "table_data_path": "csv_files/student_transcripts_tracking/courses/data.csv", "execution_results": [["q"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncourse_id,course_name,course_description,other_details\n1,ds,p,\n2,math,q,\n3,os,v,\n4,en,k,\n5,fr,c,\n6,la,n,\n7,cal,l,\n8,nlp,q,\n9,dl,l,\n10,ml,b,\n\nQuestion: What are the descriptions for all the math courses?"}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code of the address in the city Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "table_data_path": "csv_files/student_transcripts_tracking/addresses/data.csv", "execution_results": [["148"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\naddress_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details\n1,2294 Grant Square Apt. 235,Apt. 370,,Port Chelsea,148,Virginia,Iceland,\n2,3999 Aufderhar Ways Suite 593,Apt. 388,,Lake Laishafurt,943,Kentucky,Burundi,\n3,67942 Carlotta Ferry Apt. 686,Apt. 583,,Goodwinhaven,541,Kansas,Saudi Arabia,\n4,0144 Lamar Plaza Apt. 346,Suite 703,,Port Evanston,847,Washington,Angola,\n5,858 Peggie Bypass Suite 212,Apt. 335,,Michelleburgh,446,Hawaii,Haiti,\n6,16998 Mraz Lodge,Apt. 689,,North Omer,902,Kentucky,Gibraltar,\n7,193 Marlin Brook,Apt. 406,,Herzoghaven,068,Arkansas,Cook Islands,\n8,202 Hessel Views Apt. 468,Apt. 305,,Mariliehaven,638,Idaho,Croatia,\n9,0643 Muller Vista,Suite 383,,Port Elvisfurt,777,NorthCarolina,Gabon,\n10,7081 Eda Center,Suite 830,,Rutherfordtown,839,Delaware,Kyrgyz Republic,\n\nQuestion: What is the zip code of the address in the city Port Chelsea?"}
{"db_id": "student_transcripts_tracking", "question": "What is the zip code for Port Chelsea?", "query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "table_data_path": "csv_files/student_transcripts_tracking/addresses/data.csv", "execution_results": [["148"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\naddress_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details\n1,2294 Grant Square Apt. 235,Apt. 370,,Port Chelsea,148,Virginia,Iceland,\n2,3999 Aufderhar Ways Suite 593,Apt. 388,,Lake Laishafurt,943,Kentucky,Burundi,\n3,67942 Carlotta Ferry Apt. 686,Apt. 583,,Goodwinhaven,541,Kansas,Saudi Arabia,\n4,0144 Lamar Plaza Apt. 346,Suite 703,,Port Evanston,847,Washington,Angola,\n5,858 Peggie Bypass Suite 212,Apt. 335,,Michelleburgh,446,Hawaii,Haiti,\n6,16998 Mraz Lodge,Apt. 689,,North Omer,902,Kentucky,Gibraltar,\n7,193 Marlin Brook,Apt. 406,,Herzoghaven,068,Arkansas,Cook Islands,\n8,202 Hessel Views Apt. 468,Apt. 305,,Mariliehaven,638,Idaho,Croatia,\n9,0643 Muller Vista,Suite 383,,Port Elvisfurt,777,NorthCarolina,Gabon,\n10,7081 Eda Center,Suite 830,,Rutherfordtown,839,Delaware,Kyrgyz Republic,\n\nQuestion: What is the zip code for Port Chelsea?"}
{"db_id": "student_transcripts_tracking", "question": "How many departments offer any degree?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "table_data_path": "csv_files/student_transcripts_tracking/degree_programs/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndegree_program_id,department_id,degree_summary_name,degree_summary_description,other_details\n1,13,Master,architecto,\n2,2,Master,cumque,\n3,13,Master,placeat,\n4,8,Bachelor,unde,\n5,11,Master,officiis,\n6,8,Bachelor,aperiam,\n7,14,Bachelor,assumenda,\n8,15,Master,earum,\n9,3,Bachelor,voluptas,\n10,8,Bachelor,aut,\n\nQuestion: How many departments offer any degree?"}
{"db_id": "student_transcripts_tracking", "question": "How many different departments offer degrees?", "query": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "table_data_path": "csv_files/student_transcripts_tracking/degree_programs/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndegree_program_id,department_id,degree_summary_name,degree_summary_description,other_details\n1,13,Master,architecto,\n2,2,Master,cumque,\n3,13,Master,placeat,\n4,8,Bachelor,unde,\n5,11,Master,officiis,\n6,8,Bachelor,aperiam,\n7,14,Bachelor,assumenda,\n8,15,Master,earum,\n9,3,Bachelor,voluptas,\n10,8,Bachelor,aut,\n\nQuestion: How many different departments offer degrees?"}
{"db_id": "student_transcripts_tracking", "question": "How many different degree names are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "table_data_path": "csv_files/student_transcripts_tracking/degree_programs/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndegree_program_id,department_id,degree_summary_name,degree_summary_description,other_details\n1,13,Master,architecto,\n2,2,Master,cumque,\n3,13,Master,placeat,\n4,8,Bachelor,unde,\n5,11,Master,officiis,\n6,8,Bachelor,aperiam,\n7,14,Bachelor,assumenda,\n8,15,Master,earum,\n9,3,Bachelor,voluptas,\n10,8,Bachelor,aut,\n\nQuestion: How many different degree names are offered?"}
{"db_id": "student_transcripts_tracking", "question": "How many different degrees are offered?", "query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "table_data_path": "csv_files/student_transcripts_tracking/degree_programs/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndegree_program_id,department_id,degree_summary_name,degree_summary_description,other_details\n1,13,Master,architecto,\n2,2,Master,cumque,\n3,13,Master,placeat,\n4,8,Bachelor,unde,\n5,11,Master,officiis,\n6,8,Bachelor,aperiam,\n7,14,Bachelor,assumenda,\n8,15,Master,earum,\n9,3,Bachelor,voluptas,\n10,8,Bachelor,aut,\n\nQuestion: How many different degrees are offered?"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions of all the sections?", "query": "SELECT section_name ,  section_description FROM Sections", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: What are the names and descriptions of all the sections?"}
{"db_id": "student_transcripts_tracking", "question": "What are the names and descriptions for all the sections?", "query": "SELECT section_name ,  section_description FROM Sections", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["a", "non"], ["b", "voluptatem"], ["c", "qui"], ["d", "voluptas"], ["e", "ex"], ["f", "doloremque"], ["g", "provident"], ["h", "et"], ["j", "quis"], ["k", "nesciunt"], ["l", "ad"], ["o", "et"], ["p", "facilis"], ["u", "reprehenderit"], ["y", "qui"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: What are the names and descriptions for all the sections?"}
{"db_id": "student_transcripts_tracking", "question": "List the section_name in reversed lexicographical order.", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: List the section_name in reversed lexicographical order."}
{"db_id": "student_transcripts_tracking", "question": "What are the names of the sections in reverse alphabetical order?", "query": "SELECT section_name FROM Sections ORDER BY section_name DESC", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["y"], ["u"], ["p"], ["o"], ["l"], ["k"], ["j"], ["h"], ["g"], ["f"], ["e"], ["d"], ["c"], ["b"], ["a"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: What are the names of the sections in reverse alphabetical order?"}
{"db_id": "student_transcripts_tracking", "question": "What is the description of the department whose name has the substring the computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "table_data_path": "csv_files/student_transcripts_tracking/departments/data.csv", "execution_results": [["error"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndepartment_id,department_name,department_description,other_details\n1,computer science,error,\n2,history,nostrum,\n3,art,aliquam,\n4,linguistic,natus,\n5,management,nihil,\n6,engineer,autem,\n7,math,doloribus,\n8,statistics,nihil,\n9,law,dolorem,\n10,economics,non,\n\nQuestion: What is the description of the department whose name has the substring the computer?"}
{"db_id": "student_transcripts_tracking", "question": "What is the department description for the one whose name has the word computer?", "query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "table_data_path": "csv_files/student_transcripts_tracking/departments/data.csv", "execution_results": [["error"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndepartment_id,department_name,department_description,other_details\n1,computer science,error,\n2,history,nostrum,\n3,art,aliquam,\n4,linguistic,natus,\n5,management,nihil,\n6,engineer,autem,\n7,math,doloribus,\n8,statistics,nihil,\n9,law,dolorem,\n10,economics,non,\n\nQuestion: What is the department description for the one whose name has the word computer?"}
{"db_id": "student_transcripts_tracking", "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["(096)889-8954x524"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What is the phone number of the man with the first name Timmothy and the last name Ward?"}
{"db_id": "student_transcripts_tracking", "question": "Who is the first student to register? List the first name, middle name and last name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy", "Anna", "Ward"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: Who is the first student to register? List the first name, middle name and last name."}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the first student to register?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy", "Anna", "Ward"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What is the first, middle, and last name of the first student to register?"}
{"db_id": "student_transcripts_tracking", "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy", "Anna", "Ward"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: Who is the earliest graduate of the school? List the first name, middle name and last name."}
{"db_id": "student_transcripts_tracking", "question": "What is the first, middle, and last name of the earliest school graduate?", "query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy", "Anna", "Ward"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What is the first, middle, and last name of the earliest school graduate?"}
{"db_id": "student_transcripts_tracking", "question": "Whose permanent address is different from his or her current address? List his or her first name.", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: Whose permanent address is different from his or her current address? List his or her first name."}
{"db_id": "student_transcripts_tracking", "question": "What is the first name of the student whose permanent address is different from his or her current one?", "query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["Timmothy"], ["Hobart"], ["Warren"], ["Jarvis"], ["Stanford"], ["Frida"], ["Delaney"], ["Reva"], ["Helga"], ["Gregg"], ["Orrin"], ["Deon"], ["Jordy"], ["Jett"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What is the first name of the student whose permanent address is different from his or her current one?"}
{"db_id": "student_transcripts_tracking", "question": "On average, when were the transcripts printed?", "query": "SELECT avg(transcript_date) FROM Transcripts", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [[1989.9333333333334]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: On average, when were the transcripts printed?"}
{"db_id": "student_transcripts_tracking", "question": "What is the average transcript date?", "query": "SELECT avg(transcript_date) FROM Transcripts", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [[1989.9333333333334]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: What is the average transcript date?"}
{"db_id": "student_transcripts_tracking", "question": "When is the first transcript released? List the date and details.", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [["1975-05-06 12:04:47", null]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: When is the first transcript released? List the date and details."}
{"db_id": "student_transcripts_tracking", "question": "What is the earliest date of a transcript release, and what details can you tell me?", "query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [["1975-05-06 12:04:47", null]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: What is the earliest date of a transcript release, and what details can you tell me?"}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are released?", "query": "SELECT count(*) FROM Transcripts", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: How many transcripts are released?"}
{"db_id": "student_transcripts_tracking", "question": "How many transcripts are listed?", "query": "SELECT count(*) FROM Transcripts", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [[15]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: How many transcripts are listed?"}
{"db_id": "student_transcripts_tracking", "question": "What is the last transcript release date?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [["2013-06-30 13:01:40"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: What is the last transcript release date?"}
{"db_id": "student_transcripts_tracking", "question": "When was the last transcript released?", "query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcripts/data.csv", "execution_results": [["2013-06-30 13:01:40"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntranscript_id,transcript_date,other_details\n1,1988-04-30 01:19:47,\n2,1975-10-28 15:16:51,\n3,1984-12-19 00:37:21,\n4,1999-01-06 20:06:46,\n5,2013-06-30 13:01:40,\n6,2010-12-13 10:55:15,\n7,1990-03-05 11:59:41,\n8,1975-05-06 12:04:47,\n9,1984-01-18 23:07:07,\n10,1975-05-20 18:31:21,\n\nQuestion: When was the last transcript released?"}
{"db_id": "student_transcripts_tracking", "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcript_contents/data.csv", "execution_results": [[4, 0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_course_id,transcript_id\n0,2\n96,8\n76,9\n7,4\n0,15\n76,15\n0,6\n96,13\n76,12\n28982908,11\n\nQuestion: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id."}
{"db_id": "student_transcripts_tracking", "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/student_transcripts_tracking/transcript_contents/data.csv", "execution_results": [[4, 0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_course_id,transcript_id\n0,2\n96,8\n76,9\n7,4\n0,15\n76,15\n0,6\n96,13\n76,12\n28982908,11\n\nQuestion: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?"}
{"db_id": "student_transcripts_tracking", "question": "How many different addresses do the students currently live?", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: How many different addresses do the students currently live?"}
{"db_id": "student_transcripts_tracking", "question": "What are the different addresses that have students living there?", "query": "SELECT count(DISTINCT current_address_id) FROM Students", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What are the different addresses that have students living there?"}
{"db_id": "student_transcripts_tracking", "question": "List all the student details in reversed lexicographical order.", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: List all the student details in reversed lexicographical order."}
{"db_id": "student_transcripts_tracking", "question": "What other details can you tell me about students in reverse alphabetical order?", "query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "table_data_path": "csv_files/student_transcripts_tracking/students/data.csv", "execution_results": [["voluptatem"], ["rerum"], ["quia"], ["qui"], ["omnis"], ["omnis"], ["non"], ["nesciunt"], ["laborum"], ["facilis"], ["et"], ["dolorum"], ["autem"], ["atque"], ["assumenda"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details\n1,10,15,Timmothy,Anna,Ward,(096)889-8954x524,erwin.zboncak@example.com,965,1971-02-05 07:28:23,1971-05-17 19:28:49,quia\n2,12,5,Hobart,Lorenz,Balistreri,1-009-710-5151,swift.kolby@example.com,304246,1976-10-26 02:33:06,2013-10-05 17:41:28,autem\n3,9,5,Warren,Violet,Gleichner,07661787471,johns.unique@example.net,3,2007-08-29 23:25:41,2007-03-31 09:53:19,facilis\n4,7,11,Jarvis,Aaliyah,Carroll,09700166582,jillian26@example.net,141072406,2014-03-28 05:48:23,2007-08-02 04:12:58,atque\n5,9,9,Milton,Vaughn,Christiansen,171-642-5684,lhartmann@example.org,,1973-05-19 19:12:46,2007-11-28 12:50:21,laborum\n6,6,3,Stanford,Mona,Rogahn,436.613.7683,skassulke@example.net,248,1997-03-20 16:47:25,2016-04-09 12:27:04,qui\n7,15,3,Frida,Aisha,Huel,1-879-796-8987x164,baumbach.lucious@example.org,668,2018-03-13 09:56:22,1997-11-16 08:54:33,dolorum\n8,1,5,Delaney,Judd,Ankunding,03174364122,dell43@example.net,402,1982-02-14 08:46:35,2004-12-08 05:29:11,voluptatem\n9,2,15,Reva,Golda,Osinski,(507)365-8405,qo'kon@example.com,39,2017-01-04 08:10:25,1990-09-01 05:03:27,nesciunt\n10,15,14,Helga,Cleve,Mohr,677.401.9382,nya.lesch@example.net,43,2009-09-25 00:14:25,2017-07-09 21:38:43,rerum\n\nQuestion: What other details can you tell me about students in reverse alphabetical order?"}
{"db_id": "student_transcripts_tracking", "question": "Describe the section h.", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["et"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: Describe the section h."}
{"db_id": "student_transcripts_tracking", "question": "What is the description for the section named h?", "query": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "table_data_path": "csv_files/student_transcripts_tracking/sections/data.csv", "execution_results": [["et"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nsection_id,course_id,section_name,section_description,other_details\n1,9,a,non,\n2,2,b,voluptatem,\n3,8,c,qui,\n4,1,d,voluptas,\n5,5,e,ex,\n6,7,f,doloremque,\n7,12,g,provident,\n8,14,h,et,\n9,8,j,quis,\n10,14,k,nesciunt,\n\nQuestion: What is the description for the section named h?"}
{"db_id": "tvshow", "question": "List the title of all cartoons in alphabetical order.", "query": "SELECT Title FROM Cartoon ORDER BY title", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: List the title of all cartoons in alphabetical order."}
{"db_id": "tvshow", "question": "What are the titles of the cartoons sorted alphabetically?", "query": "SELECT Title FROM Cartoon ORDER BY title", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["Dawn of the Dead Man!"], ["Day of the Dark Knight!"], ["Deep Cover for Batman!"], ["Enter the Outsiders!"], ["Evil Under the Sea!"], ["Fall of the Blue Beetle!"], ["Invasion of the Secret Santas!"], ["Journey to the Center of the Bat!"], ["Return of the Fearsome Fangs!"], ["Terror on Dinosaur Island!"], ["The Eyes of Despero!"], ["The Rise of the Blue Beetle!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What are the titles of the cartoons sorted alphabetically?"}
{"db_id": "tvshow", "question": "List all cartoon directed by \"Ben Jones\".", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: List all cartoon directed by \"Ben Jones\"."}
{"db_id": "tvshow", "question": "What are the names of all cartoons directed by Ben Jones?", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["The Rise of the Blue Beetle!"], ["Day of the Dark Knight!"], ["Dawn of the Dead Man!"], ["The Eyes of Despero!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What are the names of all cartoons directed by Ben Jones?"}
{"db_id": "tvshow", "question": "How many cartoons were written by \"Joseph Kuhr\"?", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: How many cartoons were written by \"Joseph Kuhr\"?"}
{"db_id": "tvshow", "question": "What is the number of cartoones written by Joseph Kuhr?", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What is the number of cartoones written by Joseph Kuhr?"}
{"db_id": "tvshow", "question": "list all cartoon titles and their directors ordered by their air date", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: list all cartoon titles and their directors ordered by their air date"}
{"db_id": "tvshow", "question": "What is the name and directors of all the cartoons that are ordered by air date?", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["Invasion of the Secret Santas!", "Brandon Vietti"], ["Evil Under the Sea!", "Michael Chang"], ["Return of the Fearsome Fangs!", "Brandon Vietti"], ["Deep Cover for Batman!", "Michael Chang"], ["The Eyes of Despero!", "Ben Jones"], ["Dawn of the Dead Man!", "Ben Jones"], ["Day of the Dark Knight!", "Ben Jones"], ["Fall of the Blue Beetle!", "Brandon Vietti"], ["Journey to the Center of the Bat!", "Michael Chang"], ["Enter the Outsiders!", "Michael Chang"], ["The Rise of the Blue Beetle!", "Ben Jones"], ["Terror on Dinosaur Island!", "Brandon Vietti"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What is the name and directors of all the cartoons that are ordered by air date?"}
{"db_id": "tvshow", "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\"."}
{"db_id": "tvshow", "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [["The Rise of the Blue Beetle!"], ["Terror on Dinosaur Island!"], ["Day of the Dark Knight!"], ["Invasion of the Secret Santas!"], ["Dawn of the Dead Man!"], ["Fall of the Blue Beetle!"], ["The Eyes of Despero!"], ["Return of the Fearsome Fangs!"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?"}
{"db_id": "tvshow", "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Italy", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: Which country has the most of TV Channels? List the country and number of TV Channels it has."}
{"db_id": "tvshow", "question": "What is the country with the most number of TV Channels and how many does it have?", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Italy", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What is the country with the most number of TV Channels and how many does it have?"}
{"db_id": "tvshow", "question": "List the number of different series names and contents in the TV Channel table.", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [[15, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: List the number of different series names and contents in the TV Channel table."}
{"db_id": "tvshow", "question": "How many different series and contents are listed in the TV Channel table?", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [[15, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: How many different series and contents are listed in the TV Channel table?"}
{"db_id": "tvshow", "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["music"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What is the content of TV Channel with serial name \"Sky Radio\"?"}
{"db_id": "tvshow", "question": "What is the content of the series Sky Radio?", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["music"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What is the content of the series Sky Radio?"}
{"db_id": "tvshow", "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Sky Famiglia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What is the Package Option of TV Channel with serial name \"Sky Radio\"?"}
{"db_id": "tvshow", "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Sky Famiglia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What are the Package Options of the TV Channels whose series names are Sky Radio?"}
{"db_id": "tvshow", "question": "How many TV Channel using language English?", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: How many TV Channel using language English?"}
{"db_id": "tvshow", "question": "How many TV Channels use the English language?", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: How many TV Channels use the English language?"}
{"db_id": "tvshow", "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["English", 3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: List the language used least number of TV Channel. List language and number of TV Channel."}
{"db_id": "tvshow", "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["English", 3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What are the languages used by the least number of TV Channels and how many channels use it?"}
{"db_id": "tvshow", "question": "List each language and the number of TV Channels using it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["English", 3], ["Italian", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: List each language and the number of TV Channels using it."}
{"db_id": "tvshow", "question": "For each language, list the number of TV Channels that use it.", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["English", 3], ["Italian", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: For each language, list the number of TV Channels that use it."}
{"db_id": "tvshow", "question": "List the Episode of all TV series sorted by rating.", "query": "SELECT Episode FROM TV_series ORDER BY rating", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: List the Episode of all TV series sorted by rating."}
{"db_id": "tvshow", "question": "What are all of the episodes ordered by ratings?", "query": "SELECT Episode FROM TV_series ORDER BY rating", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["The Hanged Man"], ["Double Down"], ["Home By Another Way"], ["Keepers"], ["Emily"], ["Blowback"], ["The Legend of Dylan McCleen"], ["Winterland"], ["The Year of the Rabbit"], ["Game Three"], ["Friendly Skies"], ["A Love of a Lifetime"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What are all of the episodes ordered by ratings?"}
{"db_id": "tvshow", "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: List top 3 highest Rating  TV series. List the TV series's Episode and Rating."}
{"db_id": "tvshow", "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["A Love of a Lifetime", "5.8"], ["Friendly Skies", "5.3"], ["Game Three", "4.4"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What are 3 most highly rated episodes in the TV series table and what were those ratings?"}
{"db_id": "tvshow", "question": "What is minimum and maximum share of TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [[9.0, 5.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What is minimum and maximum share of TV series?"}
{"db_id": "tvshow", "question": "What is the maximum and minimum share for the TV series?", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [[9.0, 5.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What is the maximum and minimum share for the TV series?"}
{"db_id": "tvshow", "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["September 24, 2007"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What is the air date of TV series with Episode \"A Love of a Lifetime\"?"}
{"db_id": "tvshow", "question": "When did the episode \"A Love of a Lifetime\" air?", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [["September 24, 2007"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: When did the episode \"A Love of a Lifetime\" air?"}
{"db_id": "tvshow", "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [[43.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?"}
{"db_id": "tvshow", "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "table_data_path": "csv_files/tvshow/tv_series/data.csv", "execution_results": [[43.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Episode,Air_Date,Rating,Share,18_49_Rating_Share,Viewers_m,Weekly_Rank,Channel\n1.0,A Love of a Lifetime,September 24, 2007,5.8,9.0,3.5/9,9.16,43.0,700\n2.0,Friendly Skies,October 1, 2007,5.3,9.0,3.2/8,8.23,50.0,701\n3.0,Game Three,October 8, 2007,4.4,7.0,2.9/7,6.94,61.0,707\n4.0,The Year of the Rabbit,October 15, 2007,4.3,7.0,2.7/7,6.75,67.0,713\n5.0,The Legend of Dylan McCleen,October 22, 2007,3.8,6.0,2.4/6,6.06,72.0,714\n6.0,Keepers,October 29, 2007,3.7,6.0,2.2/6,5.75,71.0,700\n7.0,Double Down,November 5, 2007,3.4,6.0,2.1/5,5.13,80.0,708\n8.0,Winterland,November 12, 2007,4.0,7.0,2.4/6,6.09,70.0,707\n9.0,Emily,November 19, 2007,3.7,6.0,2.2/6,5.61,66.0,717\n10.0,Blowback,November 26, 2007,3.7,6.0,2.4/6,6.05,68.0,719\n\nQuestion: What is the weekly rank for the episode \"A Love of a Lifetime\"?"}
{"db_id": "tvshow", "question": "Find the number of cartoons directed by each of the listed directors.", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: Find the number of cartoons directed by each of the listed directors."}
{"db_id": "tvshow", "question": "How many cartoons did each director create?", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[4, "Ben Jones"], [4, "Brandon Vietti"], [4, "Michael Chang"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: How many cartoons did each director create?"}
{"db_id": "tvshow", "question": "Find the production code and channel of the most recently aired cartoon .", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[102.0, "701"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: Find the production code and channel of the most recently aired cartoon ."}
{"db_id": "tvshow", "question": "What is the produdction code and channel of the most recent cartoon ?", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "table_data_path": "csv_files/tvshow/cartoon/data.csv", "execution_results": [[102.0, "701"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,Title,Directed_by,Written_by,Original_air_date,Production_code,Channel\n1.0,The Rise of the Blue Beetle!,Ben Jones,Michael Jelenic,November14,2008,101.0,700\n2.0,Terror on Dinosaur Island!,Brandon Vietti,Steven Melching,November21,2008,102.0,701\n3.0,Evil Under the Sea!,Michael Chang,Joseph Kuhr,December5,2008,103.0,703\n4.0,Day of the Dark Knight!,Ben Jones,J. M. DeMatteis,January2,2009,104.0,704\n5.0,Invasion of the Secret Santas!,Brandon Vietti,Adam Beechen,December12,2008,105.0,705\n6.0,Enter the Outsiders!,Michael Chang,Todd Casey,January9,2009,106.0,706\n7.0,Dawn of the Dead Man!,Ben Jones,Steven Melching,January16,2009,107.0,707\n8.0,Fall of the Blue Beetle!,Brandon Vietti,James Krieg,January23,2009,108.0,708\n9.0,Journey to the Center of the Bat!,Michael Chang,Matt Wayne,January30,2009,109.0,707\n10.0,The Eyes of Despero!,Ben Jones,J. M. DeMatteis,February6,2009,110.0,728\n\nQuestion: What is the produdction code and channel of the most recent cartoon ?"}
{"db_id": "tvshow", "question": "Find the package choice and series name of the TV channel that has high definition TV.", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: Find the package choice and series name of the TV channel that has high definition TV."}
{"db_id": "tvshow", "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["Sky Famiglia + Sky HD", "MTV Live HD"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What are the package options and the name of the series for the TV Channel that supports high definition TV?"}
{"db_id": "tvshow", "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: find the pixel aspect ratio and nation of the tv channels that do not use English."}
{"db_id": "tvshow", "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["4:3", "Italy"], ["4:3", "Italy"], ["4:3 / 16:9", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3", "Italy"], ["16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3 / 16:9", "Italy"], ["4:3", "Italy"], ["4:3", "Italy"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What is the pixel aspect ratio and country of origin for all TV channels that do not use English?"}
{"db_id": "tvshow", "question": "find id of the tv channels that from the countries where have more than two tv channels.", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["700"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: find id of the tv channels that from the countries where have more than two tv channels."}
{"db_id": "tvshow", "question": "What are the ids of all tv channels that have more than 2 TV channels?", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "table_data_path": "csv_files/tvshow/tv_channel/data.csv", "execution_results": [["700"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nid,series_name,Country,Language,Content,Pixel_aspect_ratio_PAR,Hight_definition_TV,Pay_per_view_PPV,Package_Option\n700,Sky Radio,Italy,Italian,music,4:3,no,no,Sky Famiglia\n701,Sky Music,Italy,Italian,music,4:3,no,no,Sky Famiglia\n703,Music Box Italia,Italy,Italian,music,4:3 / 16:9,no,no,Sky Famiglia\n704,MTV Hits,Italy,Italian,music,16:9,no,no,Sky Famiglia\n705,MTV Classic,Italy,Italian,music,4:3,no,no,Sky Famiglia\n706,MTV Rocks,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n707,MTV Dance,United Kingdom,English,music,16:9,no,no,Sky Famiglia\n708,MTV Music,Italy,Italian,music,16:9,no,no,no ( FTV )\n709,MTV Live HD,Poland,English,music,16:9,yes,no,Sky Famiglia + Sky HD\n713,Radio Capital TiVù,Italy,Italian,music,4:3,no,no,no ( FTV )\n\nQuestion: What are the ids of all tv channels that have more than 2 TV channels?"}
{"db_id": "poker_player", "question": "How many poker players are there?", "query": "SELECT count(*) FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[5]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: How many poker players are there?"}
{"db_id": "poker_player", "question": "Count the number of poker players.", "query": "SELECT count(*) FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[5]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: Count the number of poker players."}
{"db_id": "poker_player", "question": "List the earnings of poker players in descending order.", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: List the earnings of poker players in descending order."}
{"db_id": "poker_player", "question": "What are the earnings of poker players, ordered descending by value?", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[596462.0], [476090.0], [189233.0], [142800.0], [104871.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: What are the earnings of poker players, ordered descending by value?"}
{"db_id": "poker_player", "question": "List the final tables made and the best finishes of poker players.", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: List the final tables made and the best finishes of poker players."}
{"db_id": "poker_player", "question": "What are the final tables made and best finishes for all poker players?", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[42.0, 1.0], [10.0, 2.0], [21.0, 1.0], [19.0, 2.0], [26.0, 3.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: What are the final tables made and best finishes for all poker players?"}
{"db_id": "poker_player", "question": "What is the average earnings of poker players?", "query": "SELECT avg(Earnings) FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[301891.2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: What is the average earnings of poker players?"}
{"db_id": "poker_player", "question": "Return the average earnings across all poker players.", "query": "SELECT avg(Earnings) FROM poker_player", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[301891.2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: Return the average earnings across all poker players."}
{"db_id": "poker_player", "question": "What is the money rank of the poker player with the highest earnings?", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[58.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: What is the money rank of the poker player with the highest earnings?"}
{"db_id": "poker_player", "question": "Return the money rank of the player with the greatest earnings.", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[58.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: Return the money rank of the player with the greatest earnings."}
{"db_id": "poker_player", "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[26.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: What is the maximum number of final tables made among poker players with earnings less than 200000?"}
{"db_id": "poker_player", "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "table_data_path": "csv_files/poker_player/poker_player/data.csv", "execution_results": [[26.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPoker_Player_ID,People_ID,Final_Table_Made,Best_Finish,Money_Rank,Earnings\n1,1,42.0,1.0,68.0,476090.0\n2,2,10.0,2.0,141.0,189233.0\n3,5,21.0,1.0,166.0,104871.0\n4,6,19.0,2.0,58.0,596462.0\n5,7,26.0,3.0,154.0,142800.0\n\nQuestion: Return the maximum final tables made across all poker players who have earnings below 200000."}
{"db_id": "poker_player", "question": "What are different nationalities of people and the corresponding number of people from each nation?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Bulgaria", 1], ["Russia", 6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: What are different nationalities of people and the corresponding number of people from each nation?"}
{"db_id": "poker_player", "question": "How many people are there of each nationality?", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Bulgaria", 1], ["Russia", 6]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: How many people are there of each nationality?"}
{"db_id": "poker_player", "question": "What is the most common nationality of people?", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Russia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: What is the most common nationality of people?"}
{"db_id": "poker_player", "question": "Give the nationality that is most common across all people.", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Russia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: Give the nationality that is most common across all people."}
{"db_id": "poker_player", "question": "What are the nationalities that are shared by at least two people?", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Russia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: What are the nationalities that are shared by at least two people?"}
{"db_id": "poker_player", "question": "Return the nationalities for which there are two or more people.", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Russia"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: Return the nationalities for which there are two or more people."}
{"db_id": "poker_player", "question": "List the names and birth dates of people in ascending alphabetical order of name.", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: List the names and birth dates of people in ascending alphabetical order of name."}
{"db_id": "poker_player", "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Aleksey Ostapenko", "May 26, 1986"], ["Maksim Botin", "July 14, 1983"], ["Roman Bragin", "April 17, 1987"], ["Semen Poltavskiy", "February 8, 1981"], ["Sergey Grankin", "January 22, 1987"], ["Teodor Salparov", "August 16, 1982"], ["Yevgeni Sivozhelez", "August 8, 1986"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: What are the names and birth dates of people, ordered by their names in alphabetical order?"}
{"db_id": "poker_player", "question": "Show names of people whose nationality is not \"Russia\".", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Teodor Salparov"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: Show names of people whose nationality is not \"Russia\"."}
{"db_id": "poker_player", "question": "What are the names of people who are not from Russia?", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [["Teodor Salparov"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: What are the names of people who are not from Russia?"}
{"db_id": "poker_player", "question": "How many distinct nationalities are there?", "query": "SELECT count(DISTINCT Nationality) FROM people", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: How many distinct nationalities are there?"}
{"db_id": "poker_player", "question": "Count the number of different nationalities.", "query": "SELECT count(DISTINCT Nationality) FROM people", "table_data_path": "csv_files/poker_player/people/data.csv", "execution_results": [[2]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPeople_ID,Nationality,Name,Birth_Date,Height\n1,Russia,Aleksey Ostapenko,May 26, 1986,207.0\n2,Bulgaria,Teodor Salparov,August 16, 1982,182.0\n3,Russia,Roman Bragin,April 17, 1987,187.0\n4,Russia,Sergey Grankin,January 22, 1987,193.0\n5,Russia,Yevgeni Sivozhelez,August 8, 1986,196.0\n6,Russia,Maksim Botin,July 14, 1983,194.0\n7,Russia,Semen Poltavskiy,February 8, 1981,205.0\n\nQuestion: Count the number of different nationalities."}
{"db_id": "voter_1", "question": "How many states are there?", "query": "SELECT count(*) FROM area_code_state", "table_data_path": "csv_files/voter_1/area_code_state/data.csv", "execution_results": [[305]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\narea_code,state\n201,NJ\n202,DC\n203,CT\n205,AL\n206,WA\n207,ME\n208,ID\n209,CA\n210,TX\n212,NY\n\nQuestion: How many states are there?"}
{"db_id": "voter_1", "question": "List the contestant numbers and names, ordered by contestant name descending.", "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "table_data_path": "csv_files/voter_1/contestants/data.csv", "execution_results": [[2, "Tabatha Gehling"], [8, "Nita Coster"], [11, "Loraine NygrenTania Mattioli"], [9, "Kurt Walser"], [3, "Kelly Clauss"], [6, "Jessie Eichman"], [4, "Jessie Alloway"], [10, "Ericka Dieter"], [1, "Edwina Burnam"], [7, "Allie Rogalski"], [5, "Alana Bregman"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncontestant_number,contestant_name\n1,Edwina Burnam\n2,Tabatha Gehling\n3,Kelly Clauss\n4,Jessie Alloway\n5,Alana Bregman\n6,Jessie Eichman\n7,Allie Rogalski\n8,Nita Coster\n9,Kurt Walser\n10,Ericka Dieter\n\nQuestion: List the contestant numbers and names, ordered by contestant name descending."}
{"db_id": "voter_1", "question": "List the vote ids, phone numbers and states of all votes.", "query": "SELECT vote_id ,  phone_number ,  state FROM votes", "table_data_path": "csv_files/voter_1/votes/data.csv", "execution_results": [[1, 7182887233, "NY"], [2, 7148407040, "NY"], [3, 6209222712, "CA"], [5, 5112677315, "NJ\n"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nvote_id,phone_number,state,contestant_number,created\n1,7182887233,NY,2,2018-03-09 19:03:21\n2,7148407040,NY,3,2018-03-09 19:03:36\n3,6209222712,CA,3,2018-03-09 19:03:39\n5,5112677315,NJ\n,5,2018-03-09 19:03:40\n\nQuestion: List the vote ids, phone numbers and states of all votes."}
{"db_id": "voter_1", "question": "What are the maximum and minimum values of area codes?", "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "table_data_path": "csv_files/voter_1/area_code_state/data.csv", "execution_results": [[989, 201]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\narea_code,state\n201,NJ\n202,DC\n203,CT\n205,AL\n206,WA\n207,ME\n208,ID\n209,CA\n210,TX\n212,NY\n\nQuestion: What are the maximum and minimum values of area codes?"}
{"db_id": "voter_1", "question": "What is last date created of votes from the state 'CA'?", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "table_data_path": "csv_files/voter_1/votes/data.csv", "execution_results": [["2018-03-09 19:03:39"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nvote_id,phone_number,state,contestant_number,created\n1,7182887233,NY,2,2018-03-09 19:03:21\n2,7148407040,NY,3,2018-03-09 19:03:36\n3,6209222712,CA,3,2018-03-09 19:03:39\n5,5112677315,NJ\n,5,2018-03-09 19:03:40\n\nQuestion: What is last date created of votes from the state 'CA'?"}
{"db_id": "voter_1", "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "table_data_path": "csv_files/voter_1/contestants/data.csv", "execution_results": [["Edwina Burnam"], ["Tabatha Gehling"], ["Kelly Clauss"], ["Alana Bregman"], ["Jessie Eichman"], ["Allie Rogalski"], ["Nita Coster"], ["Kurt Walser"], ["Ericka Dieter"], ["Loraine NygrenTania Mattioli"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncontestant_number,contestant_name\n1,Edwina Burnam\n2,Tabatha Gehling\n3,Kelly Clauss\n4,Jessie Alloway\n5,Alana Bregman\n6,Jessie Eichman\n7,Allie Rogalski\n8,Nita Coster\n9,Kurt Walser\n10,Ericka Dieter\n\nQuestion: What are the names of the contestants whose names are not 'Jessie Alloway'"}
{"db_id": "voter_1", "question": "What are the distinct states and create time of all votes?", "query": "SELECT DISTINCT state ,  created FROM votes", "table_data_path": "csv_files/voter_1/votes/data.csv", "execution_results": [["NY", "2018-03-09 19:03:21"], ["NY", "2018-03-09 19:03:36"], ["CA", "2018-03-09 19:03:39"], ["NJ\n", "2018-03-09 19:03:40"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nvote_id,phone_number,state,contestant_number,created\n1,7182887233,NY,2,2018-03-09 19:03:21\n2,7148407040,NY,3,2018-03-09 19:03:36\n3,6209222712,CA,3,2018-03-09 19:03:39\n5,5112677315,NJ\n,5,2018-03-09 19:03:40\n\nQuestion: What are the distinct states and create time of all votes?"}
{"db_id": "voter_1", "question": "What are the number of votes from state 'NY' or 'CA'?", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "table_data_path": "csv_files/voter_1/votes/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nvote_id,phone_number,state,contestant_number,created\n1,7182887233,NY,2,2018-03-09 19:03:21\n2,7148407040,NY,3,2018-03-09 19:03:36\n3,6209222712,CA,3,2018-03-09 19:03:39\n5,5112677315,NJ\n,5,2018-03-09 19:03:40\n\nQuestion: What are the number of votes from state 'NY' or 'CA'?"}
{"db_id": "voter_1", "question": "Return the names of the contestants whose names contain the substring 'Al' .", "query": "select contestant_name from contestants where contestant_name like \"%al%\"", "table_data_path": "csv_files/voter_1/contestants/data.csv", "execution_results": [["Jessie Alloway"], ["Alana Bregman"], ["Allie Rogalski"], ["Kurt Walser"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncontestant_number,contestant_name\n1,Edwina Burnam\n2,Tabatha Gehling\n3,Kelly Clauss\n4,Jessie Alloway\n5,Alana Bregman\n6,Jessie Eichman\n7,Allie Rogalski\n8,Nita Coster\n9,Kurt Walser\n10,Ericka Dieter\n\nQuestion: Return the names of the contestants whose names contain the substring 'Al' ."}
{"db_id": "world_1", "question": "What are the names of all the countries that became independent after 1950?", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Angola"], ["United Arab Emirates"], ["Armenia"], ["Antigua and Barbuda"], ["Azerbaijan"], ["Burundi"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Barbados"], ["Brunei"], ["Botswana"], ["Central African Republic"], ["Côte d’Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Comoros"], ["Cape Verde"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Algeria"], ["Eritrea"], ["Estonia"], ["Fiji Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["Georgia"], ["Ghana"], ["Guinea"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Grenada"], ["Guyana"], ["Croatia"], ["Jamaica"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["Kuwait"], ["Laos"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Lesotho"], ["Lithuania"], ["Latvia"], ["Morocco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Mozambique"], ["Mauritania"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Namibia"], ["Niger"], ["Nigeria"], ["Nauru"], ["Oman"], ["Palau"], ["Papua New Guinea"], ["Qatar"], ["Russian Federation"], ["Rwanda"], ["Sudan"], ["Senegal"], ["Singapore"], ["Solomon Islands"], ["Sierra Leone"], ["Somalia"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Swaziland"], ["Seychelles"], ["Chad"], ["Togo"], ["Tajikistan"], ["Turkmenistan"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Tuvalu"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Vanuatu"], ["Samoa"], ["Zambia"], ["Zimbabwe"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the names of all the countries that became independent after 1950?"}
{"db_id": "world_1", "question": "Give the names of the nations that were founded after 1950.", "query": "SELECT Name FROM country WHERE IndepYear  >  1950", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Angola"], ["United Arab Emirates"], ["Armenia"], ["Antigua and Barbuda"], ["Azerbaijan"], ["Burundi"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Barbados"], ["Brunei"], ["Botswana"], ["Central African Republic"], ["Côte d’Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Comoros"], ["Cape Verde"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Algeria"], ["Eritrea"], ["Estonia"], ["Fiji Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["Georgia"], ["Ghana"], ["Guinea"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Grenada"], ["Guyana"], ["Croatia"], ["Jamaica"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["Kuwait"], ["Laos"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Lesotho"], ["Lithuania"], ["Latvia"], ["Morocco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Mozambique"], ["Mauritania"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Namibia"], ["Niger"], ["Nigeria"], ["Nauru"], ["Oman"], ["Palau"], ["Papua New Guinea"], ["Qatar"], ["Russian Federation"], ["Rwanda"], ["Sudan"], ["Senegal"], ["Singapore"], ["Solomon Islands"], ["Sierra Leone"], ["Somalia"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Swaziland"], ["Seychelles"], ["Chad"], ["Togo"], ["Tajikistan"], ["Turkmenistan"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Tuvalu"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Vanuatu"], ["Samoa"], ["Zambia"], ["Zimbabwe"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the names of the nations that were founded after 1950."}
{"db_id": "world_1", "question": "How many countries have a republic as their form of government?", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[122]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How many countries have a republic as their form of government?"}
{"db_id": "world_1", "question": "How many countries have governments that are republics?", "query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[122]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How many countries have governments that are republics?"}
{"db_id": "world_1", "question": "What is the total surface area of the countries in the Caribbean region?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[234423.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the total surface area of the countries in the Caribbean region?"}
{"db_id": "world_1", "question": "How much surface area do the countires in the Carribean cover together?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[234423.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How much surface area do the countires in the Carribean cover together?"}
{"db_id": "world_1", "question": "Which continent is Anguilla in?", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["North America"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Which continent is Anguilla in?"}
{"db_id": "world_1", "question": "What is the continent name which Anguilla belongs to?", "query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["North America"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the continent name which Anguilla belongs to?"}
{"db_id": "world_1", "question": "What are the population and life expectancies in Brazil?", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[170115000, 62.9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the population and life expectancies in Brazil?"}
{"db_id": "world_1", "question": "Give me Brazil’s population and life expectancies.", "query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[170115000, 62.9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give me Brazil’s population and life expectancies."}
{"db_id": "world_1", "question": "What are the region and population of Angola?", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[12878000, "Central Africa"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the region and population of Angola?"}
{"db_id": "world_1", "question": "What region does Angola belong to and what is its population?", "query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[12878000, "Central Africa"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What region does Angola belong to and what is its population?"}
{"db_id": "world_1", "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[50.31111111111111]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the average expected life expectancy for countries in the region of Central Africa?"}
{"db_id": "world_1", "question": "How long is the people’s average life expectancy in Central Africa?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[50.31111111111111]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How long is the people’s average life expectancy in Central Africa?"}
{"db_id": "world_1", "question": "What is the name of country that has the shortest life expectancy in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Afghanistan"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the name of country that has the shortest life expectancy in Asia?"}
{"db_id": "world_1", "question": "Give the name of the country in Asia with the lowest life expectancy.", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Afghanistan"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the name of the country in Asia with the lowest life expectancy."}
{"db_id": "world_1", "question": "What is the total population and maximum GNP in Asia?", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[3705025700, 3787042.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the total population and maximum GNP in Asia?"}
{"db_id": "world_1", "question": "How many people live in Asia, and what is the largest GNP among them?", "query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[3705025700, 3787042.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How many people live in Asia, and what is the largest GNP among them?"}
{"db_id": "world_1", "question": "What is the average life expectancy in African countries that are republics?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[50.84347826086956]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the average life expectancy in African countries that are republics?"}
{"db_id": "world_1", "question": "Give the average life expectancy for countries in Africa which are republics?", "query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[50.84347826086956]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the average life expectancy for countries in Africa which are republics?"}
{"db_id": "world_1", "question": "What is the total surface area of the continents Asia and Europe?", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[54930138.9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the total surface area of the continents Asia and Europe?"}
{"db_id": "world_1", "question": "Give the total surface area covered by countries in Asia or Europe.", "query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[54930138.9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the total surface area covered by countries in Asia or Europe."}
{"db_id": "world_1", "question": "How many people live in Gelderland district?", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [[545548]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: How many people live in Gelderland district?"}
{"db_id": "world_1", "question": "What is the total population of Gelderland district?", "query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [[545548]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: What is the total population of Gelderland district?"}
{"db_id": "world_1", "question": "What is the average GNP and total population in all nations whose government is US territory?", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[510.3333333333333, 329000]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What is the average GNP and total population in all nations whose government is US territory?"}
{"db_id": "world_1", "question": "Give the mean GNP and total population of nations which are considered US territory.", "query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[510.3333333333333, 329000]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the mean GNP and total population of nations which are considered US territory."}
{"db_id": "world_1", "question": "How many type of governments are in Africa?", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How many type of governments are in Africa?"}
{"db_id": "world_1", "question": "How many different forms of governments are there in Africa?", "query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[10]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: How many different forms of governments are there in Africa?"}
{"db_id": "world_1", "question": "Find the name, population and expected life length of asian country with the largest area?", "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["China", 1277558000, 71.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Find the name, population and expected life length of asian country with the largest area?"}
{"db_id": "world_1", "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["China", 1277558000, 71.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the name, population, and life expectancy of the largest Asian country by land?"}
{"db_id": "world_1", "question": "What are the countries that have greater surface area than any country in Europe?", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Aruba"], ["Afghanistan"], ["Angola"], ["Anguilla"], ["Albania"], ["Andorra"], ["Netherlands Antilles"], ["United Arab Emirates"], ["Argentina"], ["Armenia"], ["American Samoa"], ["Antarctica"], ["French Southern territories"], ["Antigua and Barbuda"], ["Australia"], ["Austria"], ["Azerbaijan"], ["Burundi"], ["Belgium"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bulgaria"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Bermuda"], ["Bolivia"], ["Brazil"], ["Barbados"], ["Brunei"], ["Bhutan"], ["Bouvet Island"], ["Botswana"], ["Central African Republic"], ["Canada"], ["Cocos (Keeling) Islands"], ["Switzerland"], ["Chile"], ["China"], ["Côte d’Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Cook Islands"], ["Colombia"], ["Comoros"], ["Cape Verde"], ["Costa Rica"], ["Cuba"], ["Christmas Island"], ["Cayman Islands"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Denmark"], ["Dominican Republic"], ["Algeria"], ["Ecuador"], ["Egypt"], ["Eritrea"], ["Western Sahara"], ["Spain"], ["Estonia"], ["Ethiopia"], ["Finland"], ["Fiji Islands"], ["Falkland Islands"], ["France"], ["Faroe Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["United Kingdom"], ["Georgia"], ["Ghana"], ["Gibraltar"], ["Guinea"], ["Guadeloupe"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Greece"], ["Grenada"], ["Greenland"], ["Guatemala"], ["French Guiana"], ["Guam"], ["Guyana"], ["Hong Kong"], ["Heard Island and McDonald Islands"], ["Honduras"], ["Croatia"], ["Haiti"], ["Hungary"], ["Indonesia"], ["India"], ["British Indian Ocean Territory"], ["Ireland"], ["Iran"], ["Iraq"], ["Iceland"], ["Israel"], ["Italy"], ["Jamaica"], ["Jordan"], ["Japan"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["South Korea"], ["Kuwait"], ["Laos"], ["Lebanon"], ["Liberia"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Liechtenstein"], ["Sri Lanka"], ["Lesotho"], ["Lithuania"], ["Luxembourg"], ["Latvia"], ["Macao"], ["Morocco"], ["Monaco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Mexico"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Myanmar"], ["Mongolia"], ["Northern Mariana Islands"], ["Mozambique"], ["Mauritania"], ["Montserrat"], ["Martinique"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Mayotte"], ["Namibia"], ["New Caledonia"], ["Niger"], ["Norfolk Island"], ["Nigeria"], ["Nicaragua"], ["Niue"], ["Netherlands"], ["Norway"], ["Nepal"], ["Nauru"], ["New Zealand"], ["Oman"], ["Pakistan"], ["Panama"], ["Pitcairn"], ["Peru"], ["Philippines"], ["Palau"], ["Papua New Guinea"], ["Poland"], ["Puerto Rico"], ["North Korea"], ["Portugal"], ["Paraguay"], ["Palestine"], ["French Polynesia"], ["Qatar"], ["Réunion"], ["Romania"], ["Russian Federation"], ["Rwanda"], ["Saudi Arabia"], ["Sudan"], ["Senegal"], ["Singapore"], ["South Georgia and the South Sandwich Islands"], ["Saint Helena"], ["Svalbard and Jan Mayen"], ["Solomon Islands"], ["Sierra Leone"], ["El Salvador"], ["San Marino"], ["Somalia"], ["Saint Pierre and Miquelon"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Sweden"], ["Swaziland"], ["Seychelles"], ["Syria"], ["Turks and Caicos Islands"], ["Chad"], ["Togo"], ["Thailand"], ["Tajikistan"], ["Tokelau"], ["Turkmenistan"], ["East Timor"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Turkey"], ["Tuvalu"], ["Taiwan"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["United States Minor Outlying Islands"], ["Uruguay"], ["United States"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Venezuela"], ["Virgin Islands, British"], ["Virgin Islands, U.S."], ["Vietnam"], ["Vanuatu"], ["Wallis and Futuna"], ["Samoa"], ["Yemen"], ["Yugoslavia"], ["South Africa"], ["Zambia"], ["Zimbabwe"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the countries that have greater surface area than any country in Europe?"}
{"db_id": "world_1", "question": "Which countries have greater area than that of any country in Europe?", "query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Aruba"], ["Afghanistan"], ["Angola"], ["Anguilla"], ["Albania"], ["Andorra"], ["Netherlands Antilles"], ["United Arab Emirates"], ["Argentina"], ["Armenia"], ["American Samoa"], ["Antarctica"], ["French Southern territories"], ["Antigua and Barbuda"], ["Australia"], ["Austria"], ["Azerbaijan"], ["Burundi"], ["Belgium"], ["Benin"], ["Burkina Faso"], ["Bangladesh"], ["Bulgaria"], ["Bahrain"], ["Bahamas"], ["Bosnia and Herzegovina"], ["Belarus"], ["Belize"], ["Bermuda"], ["Bolivia"], ["Brazil"], ["Barbados"], ["Brunei"], ["Bhutan"], ["Bouvet Island"], ["Botswana"], ["Central African Republic"], ["Canada"], ["Cocos (Keeling) Islands"], ["Switzerland"], ["Chile"], ["China"], ["Côte d’Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Cook Islands"], ["Colombia"], ["Comoros"], ["Cape Verde"], ["Costa Rica"], ["Cuba"], ["Christmas Island"], ["Cayman Islands"], ["Cyprus"], ["Czech Republic"], ["Germany"], ["Djibouti"], ["Dominica"], ["Denmark"], ["Dominican Republic"], ["Algeria"], ["Ecuador"], ["Egypt"], ["Eritrea"], ["Western Sahara"], ["Spain"], ["Estonia"], ["Ethiopia"], ["Finland"], ["Fiji Islands"], ["Falkland Islands"], ["France"], ["Faroe Islands"], ["Micronesia, Federated States of"], ["Gabon"], ["United Kingdom"], ["Georgia"], ["Ghana"], ["Gibraltar"], ["Guinea"], ["Guadeloupe"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["Greece"], ["Grenada"], ["Greenland"], ["Guatemala"], ["French Guiana"], ["Guam"], ["Guyana"], ["Hong Kong"], ["Heard Island and McDonald Islands"], ["Honduras"], ["Croatia"], ["Haiti"], ["Hungary"], ["Indonesia"], ["India"], ["British Indian Ocean Territory"], ["Ireland"], ["Iran"], ["Iraq"], ["Iceland"], ["Israel"], ["Italy"], ["Jamaica"], ["Jordan"], ["Japan"], ["Kazakstan"], ["Kenya"], ["Kyrgyzstan"], ["Cambodia"], ["Kiribati"], ["Saint Kitts and Nevis"], ["South Korea"], ["Kuwait"], ["Laos"], ["Lebanon"], ["Liberia"], ["Libyan Arab Jamahiriya"], ["Saint Lucia"], ["Liechtenstein"], ["Sri Lanka"], ["Lesotho"], ["Lithuania"], ["Luxembourg"], ["Latvia"], ["Macao"], ["Morocco"], ["Monaco"], ["Moldova"], ["Madagascar"], ["Maldives"], ["Mexico"], ["Marshall Islands"], ["Macedonia"], ["Mali"], ["Malta"], ["Myanmar"], ["Mongolia"], ["Northern Mariana Islands"], ["Mozambique"], ["Mauritania"], ["Montserrat"], ["Martinique"], ["Mauritius"], ["Malawi"], ["Malaysia"], ["Mayotte"], ["Namibia"], ["New Caledonia"], ["Niger"], ["Norfolk Island"], ["Nigeria"], ["Nicaragua"], ["Niue"], ["Netherlands"], ["Norway"], ["Nepal"], ["Nauru"], ["New Zealand"], ["Oman"], ["Pakistan"], ["Panama"], ["Pitcairn"], ["Peru"], ["Philippines"], ["Palau"], ["Papua New Guinea"], ["Poland"], ["Puerto Rico"], ["North Korea"], ["Portugal"], ["Paraguay"], ["Palestine"], ["French Polynesia"], ["Qatar"], ["Réunion"], ["Romania"], ["Russian Federation"], ["Rwanda"], ["Saudi Arabia"], ["Sudan"], ["Senegal"], ["Singapore"], ["South Georgia and the South Sandwich Islands"], ["Saint Helena"], ["Svalbard and Jan Mayen"], ["Solomon Islands"], ["Sierra Leone"], ["El Salvador"], ["San Marino"], ["Somalia"], ["Saint Pierre and Miquelon"], ["Sao Tome and Principe"], ["Suriname"], ["Slovakia"], ["Slovenia"], ["Sweden"], ["Swaziland"], ["Seychelles"], ["Syria"], ["Turks and Caicos Islands"], ["Chad"], ["Togo"], ["Thailand"], ["Tajikistan"], ["Tokelau"], ["Turkmenistan"], ["East Timor"], ["Tonga"], ["Trinidad and Tobago"], ["Tunisia"], ["Turkey"], ["Tuvalu"], ["Taiwan"], ["Tanzania"], ["Uganda"], ["Ukraine"], ["United States Minor Outlying Islands"], ["Uruguay"], ["United States"], ["Uzbekistan"], ["Saint Vincent and the Grenadines"], ["Venezuela"], ["Virgin Islands, British"], ["Virgin Islands, U.S."], ["Vietnam"], ["Vanuatu"], ["Wallis and Futuna"], ["Samoa"], ["Yemen"], ["Yugoslavia"], ["South Africa"], ["Zambia"], ["Zimbabwe"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Which countries have greater area than that of any country in Europe?"}
{"db_id": "world_1", "question": "What are the African countries that have a  population less than any country in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Angola"], ["Burundi"], ["Benin"], ["Burkina Faso"], ["Botswana"], ["Central African Republic"], ["Côte d’Ivoire"], ["Cameroon"], ["Congo, The Democratic Republic of the"], ["Congo"], ["Comoros"], ["Cape Verde"], ["Djibouti"], ["Algeria"], ["Egypt"], ["Eritrea"], ["Western Sahara"], ["Ethiopia"], ["Gabon"], ["Ghana"], ["Guinea"], ["Gambia"], ["Guinea-Bissau"], ["Equatorial Guinea"], ["British Indian Ocean Territory"], ["Kenya"], ["Liberia"], ["Libyan Arab Jamahiriya"], ["Lesotho"], ["Morocco"], ["Madagascar"], ["Mali"], ["Mozambique"], ["Mauritania"], ["Mauritius"], ["Malawi"], ["Mayotte"], ["Namibia"], ["Niger"], ["Nigeria"], ["Réunion"], ["Rwanda"], ["Sudan"], ["Senegal"], ["Saint Helena"], ["Sierra Leone"], ["Somalia"], ["Sao Tome and Principe"], ["Swaziland"], ["Seychelles"], ["Chad"], ["Togo"], ["Tunisia"], ["Tanzania"], ["Uganda"], ["South Africa"], ["Zambia"], ["Zimbabwe"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the African countries that have a  population less than any country in Asia?"}
{"db_id": "world_1", "question": "Which African countries have a smaller population than that of any country in Asia?", "query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["British Indian Ocean Territory"], ["Mayotte"], ["Saint Helena"], ["Sao Tome and Principe"], ["Seychelles"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Which African countries have a smaller population than that of any country in Asia?"}
{"db_id": "world_1", "question": "Which Asian countries have a population that is larger than any country in Africa?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Bangladesh"], ["China"], ["Indonesia"], ["India"], ["Japan"], ["Pakistan"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Which Asian countries have a population that is larger than any country in Africa?"}
{"db_id": "world_1", "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Afghanistan"], ["United Arab Emirates"], ["Armenia"], ["Azerbaijan"], ["Bangladesh"], ["Bahrain"], ["Brunei"], ["Bhutan"], ["China"], ["Cyprus"], ["Georgia"], ["Hong Kong"], ["Indonesia"], ["India"], ["Iran"], ["Iraq"], ["Israel"], ["Jordan"], ["Japan"], ["Kazakstan"], ["Kyrgyzstan"], ["Cambodia"], ["South Korea"], ["Kuwait"], ["Laos"], ["Lebanon"], ["Sri Lanka"], ["Macao"], ["Maldives"], ["Myanmar"], ["Mongolia"], ["Malaysia"], ["Nepal"], ["Oman"], ["Pakistan"], ["Philippines"], ["North Korea"], ["Palestine"], ["Qatar"], ["Saudi Arabia"], ["Singapore"], ["Syria"], ["Thailand"], ["Tajikistan"], ["Turkmenistan"], ["East Timor"], ["Turkey"], ["Taiwan"], ["Uzbekistan"], ["Vietnam"], ["Yemen"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the Asian countries which have a population larger than that of any country in Africa?"}
{"db_id": "world_1", "question": "What are the name, independence year, and surface area of the country with the smallest population?", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Antarctica", 13120000.0, null]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the name, independence year, and surface area of the country with the smallest population?"}
{"db_id": "world_1", "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Antarctica", 13120000.0, null]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the name, year of independence, and surface area of the country that has the lowest population."}
{"db_id": "world_1", "question": "What are the population, name and leader of the country with the largest area?", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Russian Federation", 146934000, "Vladimir Putin"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the population, name and leader of the country with the largest area?"}
{"db_id": "world_1", "question": "Give the name, population, and head of state for the country that has the largest area.", "query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Russian Federation", 146934000, "Vladimir Putin"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Give the name, population, and head of state for the country that has the largest area."}
{"db_id": "world_1", "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [[1, "Abidjan"], [1, "Abu Dhabi"], [1, "Adana"], [1, "Addis Abeba"], [1, "Aden"], [1, "Aguascalientes"], [1, "Ahal"], [2, "Aichi"], [1, "Alagoas"], [2, "Alberta"], [1, "Aleksandria"], [1, "Aleppo"], [1, "Alger"], [1, "Almaty Qalasy"], [1, "Altai"], [1, "Amazonas"], [1, "Amman"], [1, "Anambra & Enugu & Eb"], [2, "Andalusia"], [5, "Andhra Pradesh"], [5, "Anhui"], [1, "Ankara"], [1, "Antalya"], [1, "Antananarivo"], [1, "Antioquia"], [1, "Antwerpen"], [1, "Aragonia"], [1, "Aragua"], [1, "Arequipa"], [3, "Arizona"], [1, "Arkangeli"], [1, "Ashanti"], [1, "Assam"], [1, "Astrahan"], [1, "Asunción"], [1, "Atlantique"], [1, "Atlántico"], [1, "Attika"], [1, "Auckland"], [1, "Baden-Württemberg"], [1, "Baghdad"], [2, "Bahia"], [2, "Baijeri"], [3, "Baja California"], [1, "Baki"], [1, "Bali"], [1, "Baluchistan"], [1, "Bamako"], [1, "Banaadir"], [1, "Bangkok"], [1, "Bangui"], [1, "Baskimaa"], [1, "Basra"], [1, "Baškortostan"], [1, "Beirut"], [1, "Bengasi"], [1, "Berliini"], [1, "Bihar"], [1, "Bishkek shaary"], [1, "Blantyre"], [2, "Bolívar"], [1, "Bratislava"], [1, "Brazzaville"], [1, "Bremen"], [1, "British Colombia"], [1, "Brjansk"], [1, "Budapest"], [12, "Buenos Aires"], [1, "Bukarest"], [1, "Bulawayo"], [1, "Burjatia"], [1, "Bursa"], [8, "California"], [1, "Callao"], [1, "Campania"], [1, "Canary Islands"], [2, "Cap-Vert"], [1, "Carabobo"], [1, "Casablanca"], [1, "Ceará"], [2, "Central"], [2, "Central Java"], [1, "Central Macedonia"], [1, "Central Serbia"], [1, "Central Visayas"], [1, "Centre"], [1, "Chandigarh"], [1, "Chari-Baguirmi"], [2, "Chhatisgarh"], [1, "Chiapas"], [4, "Chiba"], [2, "Chihuahua"], [1, "Chisinau"], [1, "Chittagong"], [1, "Chollabuk"], [1, "Chongqing"], [1, "Chungchongbuk"], [2, "Coahuila de Zaragoza"], [1, "Coast"], [1, "Cochabamba"], [2, "Colorado"], [1, "Conakry"], [1, "Constantine"], [1, "Cortés"], [1, "Córdoba"], [1, "Damascus"], [1, "Dar es Salaam"], [1, "Delhi"], [1, "Dhaka"], [1, "District of Columbia"], [1, "Distrito Central"], [4, "Distrito Federal"], [1, "Distrito Nacional"], [1, "Diyarbakir"], [1, "Djibouti"], [2, "Dnipropetrovsk"], [1, "Doha"], [1, "Dolnoslaskie"], [3, "Donetsk"], [1, "Dubai"], [1, "Durango"], [1, "East Azerbaidzan"], [2, "East Java"], [1, "East Kasai"], [1, "Eastern Cape"], [1, "Ehime"], [1, "Emilia-Romagna"], [7, "England"], [1, "Esfahan"], [1, "Eskisehir"], [1, "Estuaire"], [1, "Fars"], [1, "Federaatio"], [2, "Florida"], [2, "Fujian"], [2, "Fukuoka"], [1, "Fukushima"], [1, "Fès-Boulemane"], [1, "Gansu"], [7, "Gauteng"], [1, "Gaza"], [1, "Gaziantep"], [1, "Georgia"], [1, "Gifu"], [1, "Gilan"], [1, "Giza"], [1, "Goiás"], [1, "Gomel"], [1, "Grad Sofija"], [1, "Grad Zagreb"], [1, "Greater Accra"], [3, "Guanajuato"], [4, "Guangdong"], [3, "Guangxi"], [1, "Guatemala"], [1, "Guayas"], [1, "Guerrero"], [2, "Guizhou"], [5, "Gujarat"], [1, "Habarovsk"], [1, "Hainan"], [1, "Haiphong"], [1, "Hamadan"], [1, "Hamburg"], [1, "Hamgyong N"], [1, "Hamgyong P"], [1, "Hanoi"], [1, "Harare"], [1, "Harjumaa"], [1, "Harkova"], [1, "Haryana"], [1, "Haute-Zaïre"], [1, "Hawaii"], [6, "Hebei"], [9, "Heilongjiang"], [7, "Henan"], [1, "Herson"], [1, "Hessen"], [1, "Hims"], [2, "Hiroshima"], [1, "Hlavní mesto Praha"], [1, "Ho Chi Minh City"], [2, "Hokkaido"], [1, "Hongkong"], [1, "Horad Minsk"], [1, "Hsinchu"], [4, "Hubei"], [4, "Hunan"], [4, "Hyogo"], [1, "Illinois"], [1, "Inchon"], [1, "Indiana"], [3, "Inner Mongolia"], [1, "Irbil"], [1, "Irkutsk"], [1, "Ishikawa"], [1, "Islamabad"], [1, "Istanbul"], [1, "Ivanovo"], [1, "Izmir"], [1, "Içel"], [1, "Jakarta Raya"], [3, "Jalisco"], [1, "Jambi"], [1, "Jammu and Kashmir"], [1, "Jaroslavl"], [1, "Jerusalem"], [2, "Jharkhand"], [7, "Jiangsu"], [2, "Jiangxi"], [4, "Jilin"], [1, "Jizní Morava"], [1, "Kabol"], [1, "Kadiogo"], [1, "Kaduna"], [1, "Kagoshima"], [1, "Kairo"], [1, "Kalimantan Barat"], [1, "Kalimantan Selatan"], [1, "Kalimantan Timur"], [1, "Kaliningrad"], [5, "Kanagawa"], [1, "Kano & Jigawa"], [1, "Kaohsiung"], [3, "Karnataka"], [1, "Karotegin"], [1, "Katalonia"], [1, "Kaunas"], [1, "Kayseri"], [1, "Keelung"], [2, "Kemerovo"], [3, "Kerala"], [1, "Kerman"], [1, "Kermanshah"], [3, "Khartum"], [1, "Khorasan"], [1, "Khulna"], [1, "Khuzestan"], [1, "Kinshasa"], [1, "Kiova"], [1, "Kirov"], [1, "Konya"], [1, "Kouilou"], [1, "Kowloon and New Kowl"], [2, "Krasnodar"], [1, "Krasnojarsk"], [1, "Kujawsko-Pomorskie"], [1, "Kumamoto"], [1, "Kurgan"], [1, "Kursk"], [4, "KwaZulu-Natal"], [1, "Kwangju"], [1, "Kwara & Kogi"], [7, "Kyonggi"], [1, "Kyongsangbuk"], [3, "Kyongsangnam"], [1, "Kyoto"], [1, "København"], [1, "La Habana"], [1, "La Libertad"], [2, "La Paz"], [1, "Lagos"], [1, "Lambayeque"], [1, "Lampung"], [1, "Lara"], [1, "Latium"], [1, "Leinster"], [12, "Liaoning"], [1, "Liguria"], [1, "Lilongwe"], [1, "Lima"], [1, "Lipetsk"], [2, "Lisboa"], [1, "Littoral"], [1, "Lodzkie"], [1, "Lombardia"], [1, "Loreto"], [1, "Louisiana"], [1, "Luanda"], [1, "Lubelskie"], [1, "Lugansk"], [1, "Lusaka"], [1, "Luxor"], [1, "Lviv"], [1, "Macau"], [5, "Madhya Pradesh"], [1, "Madrid"], [1, "Maekel"], [1, "Magdalena"], [13, "Maharashtra"], [1, "Malopolskie"], [1, "Managua"], [1, "Mandalay"], [1, "Manitoba"], [2, "Maputo"], [1, "Maranhão"], [1, "Maritime"], [1, "Markazi"], [1, "Marrakech-Tensift-Al"], [1, "Maryland"], [1, "Massachusetts"], [1, "Mato Grosso"], [1, "Mato Grosso do Sul"], [1, "Mazowieckie"], [1, "Medina"], [3, "Mekka"], [1, "Meknès-Tafilalet"], [1, "Michigan"], [1, "Michoacán de Ocampo"], [1, "Midi-Pyrénées"], [4, "Minas Gerais"], [1, "Minnesota"], [1, "Miranda"], [1, "Missouri"], [1, "Miyagi"], [1, "Mogiljov"], [1, "Montevideo"], [1, "Montserrado"], [1, "Moscow (City)"], [1, "Murcia"], [1, "Murmansk"], [1, "Mykolajiv"], [9, "México"], [1, "Nagano"], [1, "Nagasaki"], [1, "Nairobi"], [1, "Namangan"], [1, "Nampo-si"], [1, "Nara"], [12, "National Capital Reg"], [1, "Nebraska"], [1, "Nevada"], [1, "New Mexico"], [1, "New South Wales"], [1, "New York"], [1, "Newmaa"], [1, "Niamey"], [1, "Niedersachsen"], [1, "Niigata"], [1, "Ninawa"], [1, "Ningxia"], [1, "Nizni Novgorod"], [1, "Noord-Holland"], [7, "Nordrhein-Westfalen"], [1, "Norte de Santander"], [1, "North Carolina"], [1, "Northern Mindanao"], [1, "Nothwest Border Prov"], [1, "Nouakchott"], [1, "Novosibirsk"], [3, "Nuevo León"], [1, "Odesa"], [1, "Ogun"], [2, "Ohio"], [1, "Oita"], [2, "Okayama"], [2, "Oklahoma"], [1, "Omsk"], [1, "Ondo & Ekiti"], [4, "Ontario"], [1, "Oran"], [1, "Oregon"], [1, "Orenburg"], [1, "Oriental"], [2, "Orissa"], [6, "Osaka"], [1, "Oslo"], [1, "Ouest"], [5, "Oyo & Osun"], [1, "Panamá"], [2, "Paraná"], [2, "Paraíba"], [2, "Pará"], [1, "Peking"], [1, "Pennsylvania"], [1, "Penza"], [1, "Perak"], [1, "Perm"], [3, "Pernambuco"], [1, "Phnom Penh"], [1, "Piauí"], [1, "Pichincha"], [1, "Piemonte"], [1, "Pietari"], [1, "Pomorskie"], [1, "Port Said"], [1, "Primorje"], [1, "Provence-Alpes-Côte"], [1, "Puebla"], [11, "Punjab"], [1, "Pusan"], [1, "Pyongyang-si"], [1, "Qaraghandy"], [1, "Qinghai"], [1, "Qom"], [1, "Quang Nam-Da Nang"], [1, "Queensland"], [1, "Querétaro de Arteaga"], [1, "Quintana Roo"], [1, "Québec"], [2, "Rabat-Salé-Zammour-Z"], [5, "Rajasthan"], [1, "Rangoon [Yangon]"], [1, "Rhône-Alpes"], [1, "Riau"], [1, "Riika"], [1, "Rio Grande do Norte"], [1, "Rio Grande do Sul"], [8, "Rio de Janeiro"], [1, "Risaralda"], [1, "Rivers & Bayelsa"], [1, "Riyadh"], [1, "Rjazan"], [1, "Rostov-na-Donu"], [3, "Saitama"], [2, "Saksi"], [1, "Salta"], [2, "Samara"], [1, "Samarkand"], [1, "San Juan"], [1, "San Luis Potosí"], [1, "San Salvador"], [1, "Sanaa"], [1, "Sanliurfa"], [1, "Santa Catarina"], [1, "Santa Cruz"], [2, "Santa Fé"], [1, "Santafé de Bogotá"], [1, "Santander"], [3, "Santiago"], [1, "Santiago de Cuba"], [1, "Saratov"], [2, "Scotland"], [1, "Seoul"], [1, "Sergipe"], [2, "Shaanxi"], [2, "Shaba"], [7, "Shandong"], [1, "Shanghai"], [3, "Shanxi"], [2, "Shizuoka"], [3, "Sichuan"], [3, "Sinaloa"], [2, "Sindh"], [1, "Sisilia"], [1, "Sistan va Baluchesta"], [1, "Skopje"], [1, "Smolensk"], [1, "Sofala"], [2, "Sonora"], [1, "South Australia"], [1, "South Kazakstan"], [2, "Southern Mindanao"], [2, "Southern Tagalog"], [1, "Suez"], [1, "Sulawesi Selatan"], [1, "Sumatera Barat"], [1, "Sumatera Selatan"], [1, "Sumatera Utara"], [2, "Sverdlovsk"], [13, "São Paulo"], [1, "Tabasco"], [1, "Taegu"], [1, "Taejon"], [1, "Taichung"], [1, "Tainan"], [5, "Taipei"], [2, "Tamaulipas"], [5, "Tamil Nadu"], [1, "Tanger-Tétouan"], [2, "Tatarstan"], [1, "Tbilisi"], [2, "Teheran"], [2, "Tennessee"], [6, "Texas"], [1, "Tianjin"], [1, "Tjumen"], [1, "Tochigi"], [3, "Tokyo-to"], [1, "Tolima"], [1, "Tomsk"], [1, "Toscana"], [1, "Toskent Shahri"], [1, "Tripoli"], [1, "Tucumán"], [1, "Tula"], [1, "Tunis"], [1, "Tver"], [2, "Tšeljabinsk"], [1, "Tšuvassia"], [1, "Udmurtia"], [1, "Ulaanbaatar"], [1, "Uljanovsk"], [12, "Uttar Pradesh"], [1, "Valencia"], [1, "Valle"], [2, "Veracruz"], [1, "Viangchan"], [1, "Victoria"], [1, "Vilna"], [1, "Vinnytsja"], [1, "Virginia"], [1, "Volgograd"], [1, "Voronez"], [1, "Wakayama"], [1, "Washington"], [1, "West Australia"], [1, "West Azerbaidzan"], [3, "West Bengali"], [1, "West Götanmaan län"], [4, "West Java"], [1, "West Kasai"], [2, "Western"], [1, "Western Cape"], [1, "Western Mindanao"], [2, "Western Visayas"], [1, "Wielkopolskie"], [1, "Wien"], [1, "Wilayah Persekutuan"], [1, "Wisconsin"], [1, "Xinxiang"], [1, "Yerevan"], [1, "Yogyakarta"], [1, "Yucatán"], [1, "Yunnan"], [1, "Zachodnio-Pomorskie"], [1, "Zaporizzja"], [3, "Zhejiang"], [2, "Zuid-Holland"], [1, "Zulia"], [1, "al-Daqahliya"], [2, "al-Gharbiya"], [1, "al-Qalyubiya"], [1, "al-Sharqiya"], [1, "al-Sulaymaniya"], [1, "al-Tamim"], [1, "al-Zarqa"], [1, "Île-de-France"], [1, "–"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: Find the number of cities in each district whose population is greater than the average population of cities?"}
{"db_id": "world_1", "question": "How many cities in each district have a population that is above the average population across all cities?", "query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [[1, "Abidjan"], [1, "Abu Dhabi"], [1, "Adana"], [1, "Addis Abeba"], [1, "Aden"], [1, "Aguascalientes"], [1, "Ahal"], [2, "Aichi"], [1, "Alagoas"], [2, "Alberta"], [1, "Aleksandria"], [1, "Aleppo"], [1, "Alger"], [1, "Almaty Qalasy"], [1, "Altai"], [1, "Amazonas"], [1, "Amman"], [1, "Anambra & Enugu & Eb"], [2, "Andalusia"], [5, "Andhra Pradesh"], [5, "Anhui"], [1, "Ankara"], [1, "Antalya"], [1, "Antananarivo"], [1, "Antioquia"], [1, "Antwerpen"], [1, "Aragonia"], [1, "Aragua"], [1, "Arequipa"], [3, "Arizona"], [1, "Arkangeli"], [1, "Ashanti"], [1, "Assam"], [1, "Astrahan"], [1, "Asunción"], [1, "Atlantique"], [1, "Atlántico"], [1, "Attika"], [1, "Auckland"], [1, "Baden-Württemberg"], [1, "Baghdad"], [2, "Bahia"], [2, "Baijeri"], [3, "Baja California"], [1, "Baki"], [1, "Bali"], [1, "Baluchistan"], [1, "Bamako"], [1, "Banaadir"], [1, "Bangkok"], [1, "Bangui"], [1, "Baskimaa"], [1, "Basra"], [1, "Baškortostan"], [1, "Beirut"], [1, "Bengasi"], [1, "Berliini"], [1, "Bihar"], [1, "Bishkek shaary"], [1, "Blantyre"], [2, "Bolívar"], [1, "Bratislava"], [1, "Brazzaville"], [1, "Bremen"], [1, "British Colombia"], [1, "Brjansk"], [1, "Budapest"], [12, "Buenos Aires"], [1, "Bukarest"], [1, "Bulawayo"], [1, "Burjatia"], [1, "Bursa"], [8, "California"], [1, "Callao"], [1, "Campania"], [1, "Canary Islands"], [2, "Cap-Vert"], [1, "Carabobo"], [1, "Casablanca"], [1, "Ceará"], [2, "Central"], [2, "Central Java"], [1, "Central Macedonia"], [1, "Central Serbia"], [1, "Central Visayas"], [1, "Centre"], [1, "Chandigarh"], [1, "Chari-Baguirmi"], [2, "Chhatisgarh"], [1, "Chiapas"], [4, "Chiba"], [2, "Chihuahua"], [1, "Chisinau"], [1, "Chittagong"], [1, "Chollabuk"], [1, "Chongqing"], [1, "Chungchongbuk"], [2, "Coahuila de Zaragoza"], [1, "Coast"], [1, "Cochabamba"], [2, "Colorado"], [1, "Conakry"], [1, "Constantine"], [1, "Cortés"], [1, "Córdoba"], [1, "Damascus"], [1, "Dar es Salaam"], [1, "Delhi"], [1, "Dhaka"], [1, "District of Columbia"], [1, "Distrito Central"], [4, "Distrito Federal"], [1, "Distrito Nacional"], [1, "Diyarbakir"], [1, "Djibouti"], [2, "Dnipropetrovsk"], [1, "Doha"], [1, "Dolnoslaskie"], [3, "Donetsk"], [1, "Dubai"], [1, "Durango"], [1, "East Azerbaidzan"], [2, "East Java"], [1, "East Kasai"], [1, "Eastern Cape"], [1, "Ehime"], [1, "Emilia-Romagna"], [7, "England"], [1, "Esfahan"], [1, "Eskisehir"], [1, "Estuaire"], [1, "Fars"], [1, "Federaatio"], [2, "Florida"], [2, "Fujian"], [2, "Fukuoka"], [1, "Fukushima"], [1, "Fès-Boulemane"], [1, "Gansu"], [7, "Gauteng"], [1, "Gaza"], [1, "Gaziantep"], [1, "Georgia"], [1, "Gifu"], [1, "Gilan"], [1, "Giza"], [1, "Goiás"], [1, "Gomel"], [1, "Grad Sofija"], [1, "Grad Zagreb"], [1, "Greater Accra"], [3, "Guanajuato"], [4, "Guangdong"], [3, "Guangxi"], [1, "Guatemala"], [1, "Guayas"], [1, "Guerrero"], [2, "Guizhou"], [5, "Gujarat"], [1, "Habarovsk"], [1, "Hainan"], [1, "Haiphong"], [1, "Hamadan"], [1, "Hamburg"], [1, "Hamgyong N"], [1, "Hamgyong P"], [1, "Hanoi"], [1, "Harare"], [1, "Harjumaa"], [1, "Harkova"], [1, "Haryana"], [1, "Haute-Zaïre"], [1, "Hawaii"], [6, "Hebei"], [9, "Heilongjiang"], [7, "Henan"], [1, "Herson"], [1, "Hessen"], [1, "Hims"], [2, "Hiroshima"], [1, "Hlavní mesto Praha"], [1, "Ho Chi Minh City"], [2, "Hokkaido"], [1, "Hongkong"], [1, "Horad Minsk"], [1, "Hsinchu"], [4, "Hubei"], [4, "Hunan"], [4, "Hyogo"], [1, "Illinois"], [1, "Inchon"], [1, "Indiana"], [3, "Inner Mongolia"], [1, "Irbil"], [1, "Irkutsk"], [1, "Ishikawa"], [1, "Islamabad"], [1, "Istanbul"], [1, "Ivanovo"], [1, "Izmir"], [1, "Içel"], [1, "Jakarta Raya"], [3, "Jalisco"], [1, "Jambi"], [1, "Jammu and Kashmir"], [1, "Jaroslavl"], [1, "Jerusalem"], [2, "Jharkhand"], [7, "Jiangsu"], [2, "Jiangxi"], [4, "Jilin"], [1, "Jizní Morava"], [1, "Kabol"], [1, "Kadiogo"], [1, "Kaduna"], [1, "Kagoshima"], [1, "Kairo"], [1, "Kalimantan Barat"], [1, "Kalimantan Selatan"], [1, "Kalimantan Timur"], [1, "Kaliningrad"], [5, "Kanagawa"], [1, "Kano & Jigawa"], [1, "Kaohsiung"], [3, "Karnataka"], [1, "Karotegin"], [1, "Katalonia"], [1, "Kaunas"], [1, "Kayseri"], [1, "Keelung"], [2, "Kemerovo"], [3, "Kerala"], [1, "Kerman"], [1, "Kermanshah"], [3, "Khartum"], [1, "Khorasan"], [1, "Khulna"], [1, "Khuzestan"], [1, "Kinshasa"], [1, "Kiova"], [1, "Kirov"], [1, "Konya"], [1, "Kouilou"], [1, "Kowloon and New Kowl"], [2, "Krasnodar"], [1, "Krasnojarsk"], [1, "Kujawsko-Pomorskie"], [1, "Kumamoto"], [1, "Kurgan"], [1, "Kursk"], [4, "KwaZulu-Natal"], [1, "Kwangju"], [1, "Kwara & Kogi"], [7, "Kyonggi"], [1, "Kyongsangbuk"], [3, "Kyongsangnam"], [1, "Kyoto"], [1, "København"], [1, "La Habana"], [1, "La Libertad"], [2, "La Paz"], [1, "Lagos"], [1, "Lambayeque"], [1, "Lampung"], [1, "Lara"], [1, "Latium"], [1, "Leinster"], [12, "Liaoning"], [1, "Liguria"], [1, "Lilongwe"], [1, "Lima"], [1, "Lipetsk"], [2, "Lisboa"], [1, "Littoral"], [1, "Lodzkie"], [1, "Lombardia"], [1, "Loreto"], [1, "Louisiana"], [1, "Luanda"], [1, "Lubelskie"], [1, "Lugansk"], [1, "Lusaka"], [1, "Luxor"], [1, "Lviv"], [1, "Macau"], [5, "Madhya Pradesh"], [1, "Madrid"], [1, "Maekel"], [1, "Magdalena"], [13, "Maharashtra"], [1, "Malopolskie"], [1, "Managua"], [1, "Mandalay"], [1, "Manitoba"], [2, "Maputo"], [1, "Maranhão"], [1, "Maritime"], [1, "Markazi"], [1, "Marrakech-Tensift-Al"], [1, "Maryland"], [1, "Massachusetts"], [1, "Mato Grosso"], [1, "Mato Grosso do Sul"], [1, "Mazowieckie"], [1, "Medina"], [3, "Mekka"], [1, "Meknès-Tafilalet"], [1, "Michigan"], [1, "Michoacán de Ocampo"], [1, "Midi-Pyrénées"], [4, "Minas Gerais"], [1, "Minnesota"], [1, "Miranda"], [1, "Missouri"], [1, "Miyagi"], [1, "Mogiljov"], [1, "Montevideo"], [1, "Montserrado"], [1, "Moscow (City)"], [1, "Murcia"], [1, "Murmansk"], [1, "Mykolajiv"], [9, "México"], [1, "Nagano"], [1, "Nagasaki"], [1, "Nairobi"], [1, "Namangan"], [1, "Nampo-si"], [1, "Nara"], [12, "National Capital Reg"], [1, "Nebraska"], [1, "Nevada"], [1, "New Mexico"], [1, "New South Wales"], [1, "New York"], [1, "Newmaa"], [1, "Niamey"], [1, "Niedersachsen"], [1, "Niigata"], [1, "Ninawa"], [1, "Ningxia"], [1, "Nizni Novgorod"], [1, "Noord-Holland"], [7, "Nordrhein-Westfalen"], [1, "Norte de Santander"], [1, "North Carolina"], [1, "Northern Mindanao"], [1, "Nothwest Border Prov"], [1, "Nouakchott"], [1, "Novosibirsk"], [3, "Nuevo León"], [1, "Odesa"], [1, "Ogun"], [2, "Ohio"], [1, "Oita"], [2, "Okayama"], [2, "Oklahoma"], [1, "Omsk"], [1, "Ondo & Ekiti"], [4, "Ontario"], [1, "Oran"], [1, "Oregon"], [1, "Orenburg"], [1, "Oriental"], [2, "Orissa"], [6, "Osaka"], [1, "Oslo"], [1, "Ouest"], [5, "Oyo & Osun"], [1, "Panamá"], [2, "Paraná"], [2, "Paraíba"], [2, "Pará"], [1, "Peking"], [1, "Pennsylvania"], [1, "Penza"], [1, "Perak"], [1, "Perm"], [3, "Pernambuco"], [1, "Phnom Penh"], [1, "Piauí"], [1, "Pichincha"], [1, "Piemonte"], [1, "Pietari"], [1, "Pomorskie"], [1, "Port Said"], [1, "Primorje"], [1, "Provence-Alpes-Côte"], [1, "Puebla"], [11, "Punjab"], [1, "Pusan"], [1, "Pyongyang-si"], [1, "Qaraghandy"], [1, "Qinghai"], [1, "Qom"], [1, "Quang Nam-Da Nang"], [1, "Queensland"], [1, "Querétaro de Arteaga"], [1, "Quintana Roo"], [1, "Québec"], [2, "Rabat-Salé-Zammour-Z"], [5, "Rajasthan"], [1, "Rangoon [Yangon]"], [1, "Rhône-Alpes"], [1, "Riau"], [1, "Riika"], [1, "Rio Grande do Norte"], [1, "Rio Grande do Sul"], [8, "Rio de Janeiro"], [1, "Risaralda"], [1, "Rivers & Bayelsa"], [1, "Riyadh"], [1, "Rjazan"], [1, "Rostov-na-Donu"], [3, "Saitama"], [2, "Saksi"], [1, "Salta"], [2, "Samara"], [1, "Samarkand"], [1, "San Juan"], [1, "San Luis Potosí"], [1, "San Salvador"], [1, "Sanaa"], [1, "Sanliurfa"], [1, "Santa Catarina"], [1, "Santa Cruz"], [2, "Santa Fé"], [1, "Santafé de Bogotá"], [1, "Santander"], [3, "Santiago"], [1, "Santiago de Cuba"], [1, "Saratov"], [2, "Scotland"], [1, "Seoul"], [1, "Sergipe"], [2, "Shaanxi"], [2, "Shaba"], [7, "Shandong"], [1, "Shanghai"], [3, "Shanxi"], [2, "Shizuoka"], [3, "Sichuan"], [3, "Sinaloa"], [2, "Sindh"], [1, "Sisilia"], [1, "Sistan va Baluchesta"], [1, "Skopje"], [1, "Smolensk"], [1, "Sofala"], [2, "Sonora"], [1, "South Australia"], [1, "South Kazakstan"], [2, "Southern Mindanao"], [2, "Southern Tagalog"], [1, "Suez"], [1, "Sulawesi Selatan"], [1, "Sumatera Barat"], [1, "Sumatera Selatan"], [1, "Sumatera Utara"], [2, "Sverdlovsk"], [13, "São Paulo"], [1, "Tabasco"], [1, "Taegu"], [1, "Taejon"], [1, "Taichung"], [1, "Tainan"], [5, "Taipei"], [2, "Tamaulipas"], [5, "Tamil Nadu"], [1, "Tanger-Tétouan"], [2, "Tatarstan"], [1, "Tbilisi"], [2, "Teheran"], [2, "Tennessee"], [6, "Texas"], [1, "Tianjin"], [1, "Tjumen"], [1, "Tochigi"], [3, "Tokyo-to"], [1, "Tolima"], [1, "Tomsk"], [1, "Toscana"], [1, "Toskent Shahri"], [1, "Tripoli"], [1, "Tucumán"], [1, "Tula"], [1, "Tunis"], [1, "Tver"], [2, "Tšeljabinsk"], [1, "Tšuvassia"], [1, "Udmurtia"], [1, "Ulaanbaatar"], [1, "Uljanovsk"], [12, "Uttar Pradesh"], [1, "Valencia"], [1, "Valle"], [2, "Veracruz"], [1, "Viangchan"], [1, "Victoria"], [1, "Vilna"], [1, "Vinnytsja"], [1, "Virginia"], [1, "Volgograd"], [1, "Voronez"], [1, "Wakayama"], [1, "Washington"], [1, "West Australia"], [1, "West Azerbaidzan"], [3, "West Bengali"], [1, "West Götanmaan län"], [4, "West Java"], [1, "West Kasai"], [2, "Western"], [1, "Western Cape"], [1, "Western Mindanao"], [2, "Western Visayas"], [1, "Wielkopolskie"], [1, "Wien"], [1, "Wilayah Persekutuan"], [1, "Wisconsin"], [1, "Xinxiang"], [1, "Yerevan"], [1, "Yogyakarta"], [1, "Yucatán"], [1, "Yunnan"], [1, "Zachodnio-Pomorskie"], [1, "Zaporizzja"], [3, "Zhejiang"], [2, "Zuid-Holland"], [1, "Zulia"], [1, "al-Daqahliya"], [2, "al-Gharbiya"], [1, "al-Qalyubiya"], [1, "al-Sharqiya"], [1, "al-Sulaymaniya"], [1, "al-Tamim"], [1, "al-Zarqa"], [1, "Île-de-France"], [1, "–"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: How many cities in each district have a population that is above the average population across all cities?"}
{"db_id": "world_1", "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[3947000, "Commonwealth of the US"], [1972000, "Constitutional Monarchy (Emirate)"], [82516000, "Constitutional Monarchy, Federation"], [193050, "Dependent Territory of the UK"], [2441000, "Emirate Federation"], [7160400, "Federation"], [617000, "Monarchy (Emirate)"], [2870000, "Monarchy (Sultanate)"], [464000, "Nonmetropolitan Territory of France"], [320000, "Nonmetropolitan Territory of The Netherlands"], [1731000, "Overseas Department of France"], [78000, "Parliamentary Coprincipality"], [99000, "Part of Denmark"], [115072000, "Socialistic Republic"], [5605000, "Socialistic State"], [7255000, "Special Administrative Region of China"], [329000, "US Territory"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Find the government form name and total population for each government form whose average life expectancy is longer than 72."}
{"db_id": "world_1", "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[3947000, "Commonwealth of the US"], [1972000, "Constitutional Monarchy (Emirate)"], [82516000, "Constitutional Monarchy, Federation"], [193050, "Dependent Territory of the UK"], [2441000, "Emirate Federation"], [7160400, "Federation"], [617000, "Monarchy (Emirate)"], [2870000, "Monarchy (Sultanate)"], [464000, "Nonmetropolitan Territory of France"], [320000, "Nonmetropolitan Territory of The Netherlands"], [1731000, "Overseas Department of France"], [78000, "Parliamentary Coprincipality"], [99000, "Part of Denmark"], [115072000, "Socialistic Republic"], [5605000, "Socialistic State"], [7255000, "Special Administrative Region of China"], [329000, "US Territory"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?"}
{"db_id": "world_1", "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[784475000, 52.571929824561394, "Africa"], [3705025700, 67.44117647058825, "Asia"], [30401150, 69.715, "Oceania"], [345780000, 70.94615384615386, "South America"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?"}
{"db_id": "world_1", "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[784475000, 52.571929824561394, "Africa"], [3705025700, 67.44117647058825, "Asia"], [30401150, 69.715, "Oceania"], [345780000, 70.94615384615386, "South America"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?"}
{"db_id": "world_1", "question": "What are the names and areas of countries with the top 5 largest area?", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Russian Federation", 17075400.0], ["Antarctica", 13120000.0], ["Canada", 9970610.0], ["China", 9572900.0], ["United States", 9363520.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the names and areas of countries with the top 5 largest area?"}
{"db_id": "world_1", "question": "Return the names and surface areas of the 5 largest countries.", "query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Russian Federation", 17075400.0], ["Antarctica", 13120000.0], ["Canada", 9970610.0], ["China", 9572900.0], ["United States", 9363520.0]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Return the names and surface areas of the 5 largest countries."}
{"db_id": "world_1", "question": "What are names of countries with the top 3 largest population?", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["China"], ["India"], ["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are names of countries with the top 3 largest population?"}
{"db_id": "world_1", "question": "Return the names of the 3 most populated countries.", "query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["China"], ["India"], ["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Return the names of the 3 most populated countries."}
{"db_id": "world_1", "question": "What are the names of the nations with the 3 lowest populations?", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Antarctica"], ["French Southern territories"], ["Bouvet Island"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: What are the names of the nations with the 3 lowest populations?"}
{"db_id": "world_1", "question": "Return the names of the 3 countries with the fewest people.", "query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [["Antarctica"], ["French Southern territories"], ["Bouvet Island"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Return the names of the 3 countries with the fewest people."}
{"db_id": "world_1", "question": "how many countries are in Asia?", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[51]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: how many countries are in Asia?"}
{"db_id": "world_1", "question": "Count the number of countries in Asia.", "query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "table_data_path": "csv_files/world_1/country/data.csv", "execution_results": [[51]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nCode,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,LocalName,GovernmentForm,HeadOfState,Capital,Code2\nABW,Aruba,North America,Caribbean,193.0,,103000,78.4,828.0,793.0,Aruba,Nonmetropolitan Territory of The Netherlands,Beatrix,129,AW\nAFG,Afghanistan,Asia,Southern and Central Asia,652090.0,1919,22720000,45.9,5976.0,,Afganistan/Afqanestan,Islamic Emirate,Mohammad Omar,1,AF\nAGO,Angola,Africa,Central Africa,1246700.0,1975,12878000,38.3,6648.0,7984.0,Angola,Republic,José Eduardo dos Santos,56,AO\nAIA,Anguilla,North America,Caribbean,96.0,,8000,76.1,63.2,,Anguilla,Dependent Territory of the UK,Elisabeth II,62,AI\nALB,Albania,Europe,Southern Europe,28748.0,1912,3401200,71.6,3205.0,2500.0,Shqipëria,Republic,Rexhep Mejdani,34,AL\nAND,Andorra,Europe,Southern Europe,468.0,1278,78000,83.5,1630.0,,Andorra,Parliamentary Coprincipality,,55,AD\nANT,Netherlands Antilles,North America,Caribbean,800.0,,217000,74.7,1941.0,,Nederlandse Antillen,Nonmetropolitan Territory of The Netherlands,Beatrix,33,AN\nARE,United Arab Emirates,Asia,Middle East,83600.0,1971,2441000,74.1,37966.0,36846.0,Al-Imarat al-´Arabiya al-Muttahida,Emirate Federation,Zayid bin Sultan al-Nahayan,65,AE\nARG,Argentina,South America,South America,2780400.0,1816,37032000,75.1,340238.0,323310.0,Argentina,Federal Republic,Fernando de la Rúa,69,AR\nARM,Armenia,Asia,Middle East,29800.0,1991,3520000,66.4,1813.0,1627.0,Hajastan,Republic,Robert Kotšarjan,126,AM\n\nQuestion: Count the number of countries in Asia."}
{"db_id": "world_1", "question": "What are the cities whose population is between 160000 and 900000?", "query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["Sétif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucumán"], ["Lanús"], ["Merlo"], ["General San Martín"], ["Salta"], ["Moreno"], ["Santa Fé"], ["Avellaneda"], ["Tres de Febrero"], ["Morón"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente López"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bahía Blanca"], ["Esteban Echeverría"], ["Resistencia"], ["José C. Paz"], ["Paraná"], ["Godoy Cruz"], ["Posadas"], ["Guaymallén"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuquén"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["Gäncä"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Liège"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["São Gonçalo"], ["Nova Iguaçu"], ["São Luís"], ["Maceió"], ["Duque de Caxias"], ["São Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo André"], ["João Pessoa"], ["Jaboatão dos Guararapes"], ["Contagem"], ["São José dos Campos"], ["Uberlândia"], ["Feira de Santana"], ["Ribeirão Preto"], ["Sorocaba"], ["Niterói"], ["Cuiabá"], ["Juiz de Fora"], ["Aracaju"], ["São João de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mauá"], ["Carapicuíba"], ["Olinda"], ["Campina Grande"], ["São José do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goiânia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jundíaí"], ["Canoas"], ["Franca"], ["São Vicente"], ["Maringá"], ["Montes Claros"], ["Anápolis"], ["Florianópolis"], ["Petrópolis"], ["Itaquaquecetuba"], ["Vitória"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Iguaçu"], ["Macapá"], ["Ilhéus"], ["Vitória da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santarém"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guarujá"], ["Ribeirão das Neves"], ["Governador Valadares"], ["Taubaté"], ["Imperatriz"], ["Gravataí"], ["Embu"], ["Mossoró"], ["Várzea Grande"], ["Petrolina"], ["Barueri"], ["Viamão"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Taboão da Serra"], ["São José dos Pinhais"], ["Magé"], ["Suzano"], ["São Leopoldo"], ["Marília"], ["São Carlos"], ["Sumaré"], ["Presidente Prudente"], ["Divinópolis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequié"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itaboraí"], ["Santa Bárbara d´Oeste"], ["Nova Friburgo"], ["Jacareí"], ["Araçatuba"], ["Barra Mansa"], ["Praia Grande"], ["Marabá"], ["Criciúma"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracanaú"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Viña del Mar"], ["Valparaíso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepción"], ["Rancagua"], ["Arica"], ["Talca"], ["Chillán"], ["Iquique"], ["San José"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["Málaga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["Córdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gijón"], ["L´Hospitalet de Llobregat"], ["Granada"], ["A Coruña (La Coruña)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["Móstoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iruña]"], ["Donostia-San Sebastián"], ["Cartagena"], ["Leganés"], ["Fuenlabrada"], ["Almería"], ["Terrassa"], ["Alcalá de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Piñas"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Parañaque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmariñas"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San José del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Biñan"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Niš"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Québec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["Öskemen"], ["Pavlodar"], ["Semey"], ["Aqtöbe"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai´an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma´anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei´an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["Cúcuta"], ["Bucaramanga"], ["Ibagué"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Montería"], ["Itagüí"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popayán"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camagüey"], ["Holguín"], ["Santa Clara"], ["Guantánamo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aaiún"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["Fès"], ["Tanger"], ["Salé"], ["Meknès"], ["Oujda"], ["Kénitra"], ["Tétouan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Juárez"], ["Mexicali"], ["Culiacán"], ["Acapulco de Juárez"], ["Tlalnepantla de Baz"], ["Mérida"], ["Chihuahua"], ["San Luis Potosí"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Querétaro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torreón"], ["Centro (Villahermosa)"], ["San Nicolás de los Garza"], ["Durango"], ["Chimalhuacán"], ["Tlaquepaque"], ["Atizapán de Zaragoza"], ["Veracruz"], ["Cuautitlán Izcalli"], ["Irapuato"], ["Tuxtla Gutiérrez"], ["Tultitlán"], ["Reynosa"], ["Benito Juárez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatlán"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonalá"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["Gómez Palacio"], ["Tapachula"], ["Nicolás Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Juárez"], ["Coacalco de Berriozábal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuacán"], ["Chalco"], ["Cárdenas"], ["Campeche"], ["La Paz"], ["Othón P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano Sánchez"], ["San Juan del Río"], ["San Felipe del Progreso"], ["Córdoba"], ["Tecámac"], ["Ocosingo"], ["Carmen"], ["Lázaro Cárdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouaké"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panamá"], ["San Miguelito"], ["Port Moresby"], ["Asunción"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayamón"], ["Ponce"], ["Carolina"], ["Lódz"], ["Kraków"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzeszów"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-Étienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["Târgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [Göteborg]"], ["Malmö"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["Düsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["Nürnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["Münster"], ["Mönchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["Lübeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbrücken"], ["Mainz"], ["Hamm"], ["Herne"], ["Mülheim an der Ruhr"], ["Solingen"], ["Osnabrück"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thiès"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Košice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [Åbo]"], ["Zürich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["København"], ["Århus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lomé"], ["N´Djaména"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (Içel)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["Elâzig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Chärjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["Tšernigiv"], ["Tšerkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["Tšernivtsi"], ["Rivne"], ["Krementšuk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kertš"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["Kükon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovitši"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Maturín"], ["San Cristóbal"], ["Ciudad Bolívar"], ["Cumaná"], ["Mérida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje Tšelny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["Tšeboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sotši"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahatškala"], ["Tšerepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["Tšita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Joškar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Naltšik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagoveštšensk"], ["Šahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamtšatski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novotšerkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Biên Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: What are the cities whose population is between 160000 and 900000?"}
{"db_id": "world_1", "question": "Return the names of cities that have a population between 160000 and 900000 .", "query": "select name from city where population between 160000 and 900000", "table_data_path": "csv_files/world_1/city/data.csv", "execution_results": [["Qandahar"], ["Herat"], ["Amsterdam"], ["Rotterdam"], ["Haag"], ["Utrecht"], ["Eindhoven"], ["Tilburg"], ["Groningen"], ["Breda"], ["Tirana"], ["Oran"], ["Constantine"], ["Annaba"], ["Batna"], ["Sétif"], ["Huambo"], ["Dubai"], ["Abu Dhabi"], ["Sharja"], ["al-Ayn"], ["Lomas de Zamora"], ["Quilmes"], ["Almirante Brown"], ["La Plata"], ["Mar del Plata"], ["San Miguel de Tucumán"], ["Lanús"], ["Merlo"], ["General San Martín"], ["Salta"], ["Moreno"], ["Santa Fé"], ["Avellaneda"], ["Tres de Febrero"], ["Morón"], ["Florencio Varela"], ["San Isidro"], ["Tigre"], ["Malvinas Argentinas"], ["Vicente López"], ["Berazategui"], ["Corrientes"], ["San Miguel"], ["Bahía Blanca"], ["Esteban Echeverría"], ["Resistencia"], ["José C. Paz"], ["Paraná"], ["Godoy Cruz"], ["Posadas"], ["Guaymallén"], ["Santiago del Estero"], ["San Salvador de Jujuy"], ["Hurlingham"], ["Neuquén"], ["Gjumri"], ["Vanadzor"], ["Canberra"], ["Gold Coast"], ["Newcastle"], ["Central Coast"], ["Wollongong"], ["Gäncä"], ["Sumqayit"], ["Nassau"], ["Khulna"], ["Rajshahi"], ["Narayanganj"], ["Rangpur"], ["Mymensingh"], ["Barisal"], ["Tungi"], ["Antwerpen"], ["Gent"], ["Charleroi"], ["Liège"], ["Cotonou"], ["Porto-Novo"], ["La Paz"], ["El Alto"], ["Cochabamba"], ["Oruro"], ["Sucre"], ["Sarajevo"], ["Gaborone"], ["São Gonçalo"], ["Nova Iguaçu"], ["São Luís"], ["Maceió"], ["Duque de Caxias"], ["São Bernardo do Campo"], ["Teresina"], ["Natal"], ["Osasco"], ["Campo Grande"], ["Santo André"], ["João Pessoa"], ["Jaboatão dos Guararapes"], ["Contagem"], ["São José dos Campos"], ["Uberlândia"], ["Feira de Santana"], ["Ribeirão Preto"], ["Sorocaba"], ["Niterói"], ["Cuiabá"], ["Juiz de Fora"], ["Aracaju"], ["São João de Meriti"], ["Londrina"], ["Joinville"], ["Belford Roxo"], ["Santos"], ["Ananindeua"], ["Campos dos Goytacazes"], ["Mauá"], ["Carapicuíba"], ["Olinda"], ["Campina Grande"], ["São José do Rio Preto"], ["Caxias do Sul"], ["Moji das Cruzes"], ["Diadema"], ["Aparecida de Goiânia"], ["Piracicaba"], ["Cariacica"], ["Vila Velha"], ["Pelotas"], ["Bauru"], ["Porto Velho"], ["Serra"], ["Betim"], ["Jundíaí"], ["Canoas"], ["Franca"], ["São Vicente"], ["Maringá"], ["Montes Claros"], ["Anápolis"], ["Florianópolis"], ["Petrópolis"], ["Itaquaquecetuba"], ["Vitória"], ["Ponta Grossa"], ["Rio Branco"], ["Foz do Iguaçu"], ["Macapá"], ["Ilhéus"], ["Vitória da Conquista"], ["Uberaba"], ["Paulista"], ["Limeira"], ["Blumenau"], ["Caruaru"], ["Santarém"], ["Volta Redonda"], ["Novo Hamburgo"], ["Caucaia"], ["Santa Maria"], ["Cascavel"], ["Guarujá"], ["Ribeirão das Neves"], ["Governador Valadares"], ["Taubaté"], ["Imperatriz"], ["Gravataí"], ["Embu"], ["Mossoró"], ["Várzea Grande"], ["Petrolina"], ["Barueri"], ["Viamão"], ["Ipatinga"], ["Juazeiro"], ["Juazeiro do Norte"], ["Taboão da Serra"], ["São José dos Pinhais"], ["Magé"], ["Suzano"], ["São Leopoldo"], ["Marília"], ["São Carlos"], ["Sumaré"], ["Presidente Prudente"], ["Divinópolis"], ["Sete Lagoas"], ["Rio Grande"], ["Itabuna"], ["Jequié"], ["Arapiraca"], ["Colombo"], ["Americana"], ["Alvorada"], ["Araraquara"], ["Itaboraí"], ["Santa Bárbara d´Oeste"], ["Nova Friburgo"], ["Jacareí"], ["Araçatuba"], ["Barra Mansa"], ["Praia Grande"], ["Marabá"], ["Criciúma"], ["Boa Vista"], ["Passo Fundo"], ["Dourados"], ["Santa Luzia"], ["Rio Claro"], ["Maracanaú"], ["Guarapuava"], ["Glasgow"], ["Liverpool"], ["Edinburgh"], ["Sheffield"], ["Manchester"], ["Leeds"], ["Bristol"], ["Cardiff"], ["Coventry"], ["Leicester"], ["Bradford"], ["Belfast"], ["Nottingham"], ["Kingston upon Hull"], ["Plymouth"], ["Stoke-on-Trent"], ["Wolverhampton"], ["Derby"], ["Swansea"], ["Southampton"], ["Aberdeen"], ["Northampton"], ["Dudley"], ["Portsmouth"], ["Newcastle upon Tyne"], ["Sunderland"], ["Luton"], ["Swindon"], ["Southend-on-Sea"], ["Walsall"], ["Bournemouth"], ["Plovdiv"], ["Varna"], ["Burgas"], ["Ruse"], ["Ouagadougou"], ["Bobo-Dioulasso"], ["Bujumbura"], ["Puente Alto"], ["Viña del Mar"], ["Valparaíso"], ["Talcahuano"], ["Antofagasta"], ["San Bernardo"], ["Temuco"], ["Concepción"], ["Rancagua"], ["Arica"], ["Talca"], ["Chillán"], ["Iquique"], ["San José"], ["Djibouti"], ["Santiago de los Caballeros"], ["Cuenca"], ["Machala"], ["Santo Domingo de los Colorados"], ["Portoviejo"], ["Ambato"], ["Manta"], ["Shubra al-Khayma"], ["Port Said"], ["Suez"], ["al-Mahallat al-Kubra"], ["Tanta"], ["al-Mansura"], ["Luxor"], ["Asyut"], ["Bahtim"], ["Zagazig"], ["al-Faiyum"], ["Ismailia"], ["Kafr al-Dawwar"], ["Assuan"], ["Damanhur"], ["al-Minya"], ["Bani Suwayf"], ["Qina"], ["Sawhaj"], ["San Salvador"], ["Asmara"], ["Valencia"], ["Sevilla"], ["Zaragoza"], ["Málaga"], ["Bilbao"], ["Las Palmas de Gran Canaria"], ["Murcia"], ["Palma de Mallorca"], ["Valladolid"], ["Córdoba"], ["Vigo"], ["Alicante [Alacant]"], ["Gijón"], ["L´Hospitalet de Llobregat"], ["Granada"], ["A Coruña (La Coruña)"], ["Vitoria-Gasteiz"], ["Santa Cruz de Tenerife"], ["Badalona"], ["Oviedo"], ["Móstoles"], ["Elche [Elx]"], ["Sabadell"], ["Santander"], ["Jerez de la Frontera"], ["Pamplona [Iruña]"], ["Donostia-San Sebastián"], ["Cartagena"], ["Leganés"], ["Fuenlabrada"], ["Almería"], ["Terrassa"], ["Alcalá de Henares"], ["Burgos"], ["Johannesburg"], ["Port Elizabeth"], ["Pretoria"], ["Inanda"], ["Durban"], ["Vanderbijlpark"], ["Kempton Park"], ["Alberton"], ["Pinetown"], ["Pietermaritzburg"], ["Benoni"], ["Randburg"], ["Umlazi"], ["Bloemfontein"], ["Vereeniging"], ["Wonderboom"], ["Roodepoort"], ["Boksburg"], ["Klerksdorp"], ["Soshanguve"], ["Newcastle"], ["East London"], ["Welkom"], ["Kimberley"], ["Uitenhage"], ["Chatsworth"], ["Mdantsane"], ["Krugersdorp"], ["Botshabelo"], ["Brakpan"], ["Witbank"], ["Oberholzer"], ["Germiston"], ["Springs"], ["Dire Dawa"], ["Cebu"], ["Zamboanga"], ["Pasig"], ["Valenzuela"], ["Las Piñas"], ["Antipolo"], ["Taguig"], ["Cagayan de Oro"], ["Parañaque"], ["Makati"], ["Bacolod"], ["General Santos"], ["Marikina"], ["Dasmariñas"], ["Muntinlupa"], ["Iloilo"], ["Pasay"], ["Malabon"], ["San José del Monte"], ["Bacoor"], ["Iligan"], ["Calamba"], ["Mandaluyong"], ["Butuan"], ["Angeles"], ["Tarlac"], ["Mandaue"], ["Baguio"], ["Batangas"], ["Cainta"], ["San Pedro"], ["Navotas"], ["Cabanatuan"], ["San Fernando"], ["Lipa"], ["Lapu-Lapu"], ["San Pablo"], ["Biñan"], ["Taytay"], ["Lucena"], ["Imus"], ["Olongapo"], ["Binangonan"], ["Santa Rosa"], ["Tagum"], ["Tacloban"], ["Malolos"], ["Mabalacat"], ["Cotabato"], ["Meycauayan"], ["Puerto Princesa"], ["Libreville"], ["Kutaisi"], ["Kumasi"], ["Ciudad de Guatemala"], ["Mixco"], ["Bissau"], ["Georgetown"], ["Port-au-Prince"], ["Carrefour"], ["Delmas"], ["Tegucigalpa"], ["San Pedro Sula"], ["Malang"], ["Bandar Lampung"], ["Bekasi"], ["Padang"], ["Surakarta"], ["Banjarmasin"], ["Pekan Baru"], ["Denpasar"], ["Yogyakarta"], ["Pontianak"], ["Samarinda"], ["Jambi"], ["Depok"], ["Cimahi"], ["Balikpapan"], ["Manado"], ["Mataram"], ["Pekalongan"], ["Tegal"], ["Bogor"], ["Ciputat"], ["Pondokgede"], ["Cirebon"], ["Kediri"], ["Ambon"], ["Jember"], ["Cilacap"], ["Cimanggis"], ["Pematang Siantar"], ["Purwokerto"], ["Ciomas"], ["Tasikmalaya"], ["Madiun"], ["Srinagar"], ["Agra"], ["Coimbatore"], ["Thane (Thana)"], ["Allahabad"], ["Meerut"], ["Vishakhapatnam"], ["Jabalpur"], ["Amritsar"], ["Faridabad"], ["Vijayawada"], ["Gwalior"], ["Jodhpur"], ["Nashik (Nasik)"], ["Hubli-Dharwad"], ["Solapur (Sholapur)"], ["Ranchi"], ["Bareilly"], ["Guwahati (Gauhati)"], ["Shambajinagar (Aurangabad)"], ["Cochin (Kochi)"], ["Rajkot"], ["Kota"], ["Thiruvananthapuram (Trivandrum"], ["Pimpri-Chinchwad"], ["Jalandhar (Jullundur)"], ["Gorakhpur"], ["Chandigarh"], ["Mysore"], ["Aligarh"], ["Guntur"], ["Jamshedpur"], ["Ghaziabad"], ["Warangal"], ["Raipur"], ["Moradabad"], ["Durgapur"], ["Amravati"], ["Calicut (Kozhikode)"], ["Bikaner"], ["Bhubaneswar"], ["Kolhapur"], ["Kataka (Cuttack)"], ["Ajmer"], ["Bhavnagar"], ["Tiruchirapalli"], ["Bhilai"], ["Bhiwandi"], ["Saharanpur"], ["Ulhasnagar"], ["Salem"], ["Ujjain"], ["Malegaon"], ["Jamnagar"], ["Bokaro Steel City"], ["Akola"], ["Belgaum"], ["Rajahmundry"], ["Nellore"], ["Udaipur"], ["New Bombay"], ["Bhatpara"], ["Gulbarga"], ["New Delhi"], ["Jhansi"], ["Gaya"], ["Kakinada"], ["Dhule (Dhulia)"], ["Panihati"], ["Nanded (Nander)"], ["Mangalore"], ["Dehra Dun"], ["Kamarhati"], ["Davangere"], ["Asansol"], ["Bhagalpur"], ["Bellary"], ["Barddhaman (Burdwan)"], ["Rampur"], ["Jalgaon"], ["Muzaffarpur"], ["Nizamabad"], ["Muzaffarnagar"], ["Patiala"], ["Shahjahanpur"], ["Kurnool"], ["Tiruppur (Tirupper)"], ["Rohtak"], ["South Dum Dum"], ["Mathura"], ["Chandrapur"], ["Barahanagar (Baranagar)"], ["Darbhanga"], ["Siliguri (Shiliguri)"], ["Raurkela"], ["Ambattur"], ["Panipat"], ["Firozabad"], ["Ichalkaranji"], ["Jammu"], ["Ramagundam"], ["Eluru"], ["Brahmapur"], ["Alwar"], ["Pondicherry"], ["Thanjavur"], ["Bihar Sharif"], ["Tuticorin"], ["Imphal"], ["Latur"], ["Sagar"], ["Farrukhabad-cum-Fatehgarh"], ["Sangli"], ["Parbhani"], ["Nagar Coil"], ["Bijapur"], ["Kukatpalle"], ["Bally"], ["Bhilwara"], ["Ratlam"], ["Avadi"], ["Dindigul"], ["Ahmadnagar"], ["Bilaspur"], ["Shimoga"], ["Kharagpur"], ["Mira Bhayandar"], ["Vellore"], ["Jalna"], ["Burnpur"], ["Anantapur"], ["Allappuzha (Alleppey)"], ["Tirupati"], ["Karnal"], ["Burhanpur"], ["Hisar (Hissar)"], ["Tiruvottiyur"], ["Mirzapur-cum-Vindhyachal"], ["Secunderabad"], ["Nadiad"], ["Dewas"], ["Murwara (Katni)"], ["Ganganagar"], ["Vizianagaram"], ["Mosul"], ["Irbil"], ["Kirkuk"], ["Basra"], ["al-Sulaymaniya"], ["al-Najaf"], ["Karbala"], ["al-Hilla"], ["al-Nasiriya"], ["al-Amara"], ["al-Diwaniya"], ["al-Ramadi"], ["al-Kut"], ["Ahvaz"], ["Qom"], ["Kermanshah"], ["Urmia"], ["Zahedan"], ["Rasht"], ["Hamadan"], ["Kerman"], ["Arak"], ["Ardebil"], ["Yazd"], ["Qazvin"], ["Zanjan"], ["Sanandaj"], ["Bandar-e-Abbas"], ["Khorramabad"], ["Eslamshahr"], ["Borujerd"], ["Abadan"], ["Dezful"], ["Kashan"], ["Sari"], ["Gorgan"], ["Najafabad"], ["Sabzevar"], ["Khomeynishahr"], ["Dublin"], ["Jerusalem"], ["Tel Aviv-Jaffa"], ["Haifa"], ["Rishon Le Ziyyon"], ["Beerseba"], ["Holon"], ["Palermo"], ["Genova"], ["Bologna"], ["Firenze"], ["Catania"], ["Bari"], ["Venezia"], ["Messina"], ["Verona"], ["Trieste"], ["Padova"], ["Taranto"], ["Brescia"], ["Reggio di Calabria"], ["Modena"], ["Prato"], ["Parma"], ["Cagliari"], ["Livorno"], ["Graz"], ["Linz"], ["Chiba"], ["Sakai"], ["Kumamoto"], ["Okayama"], ["Sagamihara"], ["Hamamatsu"], ["Kagoshima"], ["Funabashi"], ["Higashiosaka"], ["Hachioji"], ["Niigata"], ["Amagasaki"], ["Himeji"], ["Shizuoka"], ["Urawa"], ["Matsuyama"], ["Matsudo"], ["Kanazawa"], ["Kawaguchi"], ["Ichikawa"], ["Omiya"], ["Utsunomiya"], ["Oita"], ["Nagasaki"], ["Yokosuka"], ["Kurashiki"], ["Gifu"], ["Hirakata"], ["Nishinomiya"], ["Toyonaka"], ["Wakayama"], ["Fukuyama"], ["Fujisawa"], ["Asahikawa"], ["Machida"], ["Nara"], ["Takatsuki"], ["Iwaki"], ["Nagano"], ["Toyohashi"], ["Toyota"], ["Suita"], ["Takamatsu"], ["Koriyama"], ["Okazaki"], ["Kawagoe"], ["Tokorozawa"], ["Toyama"], ["Kochi"], ["Kashiwa"], ["Akita"], ["Miyazaki"], ["Koshigaya"], ["Naha"], ["Aomori"], ["Hakodate"], ["Akashi"], ["Yokkaichi"], ["Fukushima"], ["Morioka"], ["Maebashi"], ["Kasugai"], ["Otsu"], ["Ichihara"], ["Yao"], ["Ichinomiya"], ["Tokushima"], ["Kakogawa"], ["Ibaraki"], ["Neyagawa"], ["Shimonoseki"], ["Yamagata"], ["Fukui"], ["Hiratsuka"], ["Mito"], ["Sasebo"], ["Hachinohe"], ["Takasaki"], ["Shimizu"], ["Kurume"], ["Fuji"], ["Soka"], ["Fuchu"], ["Chigasaki"], ["Atsugi"], ["Numazu"], ["Ageo"], ["Yamato"], ["Matsumoto"], ["Kure"], ["Takarazuka"], ["Kasukabe"], ["Chofu"], ["Odawara"], ["Kofu"], ["Kushiro"], ["Kishiwada"], ["Hitachi"], ["Nagaoka"], ["Itami"], ["Uji"], ["Suzuka"], ["Hirosaki"], ["Ube"], ["Kodaira"], ["Takaoka"], ["Obihiro"], ["Tomakomai"], ["Saga"], ["Sakura"], ["Kamakura"], ["Mitaka"], ["Izumi"], ["Hino"], ["Hadano"], ["Ashikaga"], ["Tsu"], ["Sayama"], ["Yachiyo"], ["Tsukuba"], ["Sanaa"], ["Aden"], ["Taizz"], ["Hodeida"], ["al-Zarqa"], ["Irbid"], ["Novi Sad"], ["Niš"], ["Phnom Penh"], ["Garoua"], ["Calgary"], ["Toronto"], ["North York"], ["Winnipeg"], ["Edmonton"], ["Mississauga"], ["Scarborough"], ["Vancouver"], ["Etobicoke"], ["London"], ["Hamilton"], ["Ottawa"], ["Laval"], ["Surrey"], ["Brampton"], ["Windsor"], ["Saskatoon"], ["Kitchener"], ["Markham"], ["Regina"], ["Burnaby"], ["Québec"], ["Qaraghandy"], ["Shymkent"], ["Taraz"], ["Astana"], ["Öskemen"], ["Pavlodar"], ["Semey"], ["Aqtöbe"], ["Qostanay"], ["Petropavl"], ["Oral"], ["Temirtau"], ["Mombasa"], ["Kisumu"], ["Nakuru"], ["Bangui"], ["Handan"], ["Wuxi"], ["Xuzhou"], ["Datong"], ["Yichun"], ["Benxi"], ["Luoyang"], ["Suzhou"], ["Xining"], ["Huainan"], ["Jixi"], ["Daqing"], ["Fuxin"], ["Amoy [Xiamen]"], ["Liuzhou"], ["Shantou"], ["Jinzhou"], ["Mudanjiang"], ["Yinchuan"], ["Changzhou"], ["Zhangjiakou"], ["Dandong"], ["Hegang"], ["Kaifeng"], ["Jiamusi"], ["Liaoyang"], ["Hengyang"], ["Baoding"], ["Hunjiang"], ["Xinxiang"], ["Huangshi"], ["Haikou"], ["Yantai"], ["Bengbu"], ["Xiangtan"], ["Weifang"], ["Wuhu"], ["Pingxiang"], ["Yingkou"], ["Anyang"], ["Panzhihua"], ["Pingdingshan"], ["Xiangfan"], ["Zhuzhou"], ["Jiaozuo"], ["Wenzhou"], ["Zhangjiang"], ["Zigong"], ["Shuangyashan"], ["Zaozhuang"], ["Yakeshi"], ["Yichang"], ["Zhenjiang"], ["Huaibei"], ["Qinhuangdao"], ["Guilin"], ["Liupanshui"], ["Panjin"], ["Yangquan"], ["Jinxi"], ["Liaoyuan"], ["Lianyungang"], ["Xianyang"], ["Tai´an"], ["Chifeng"], ["Shaoguan"], ["Nantong"], ["Leshan"], ["Baoji"], ["Linyi"], ["Tonghua"], ["Siping"], ["Changzhi"], ["Tengzhou"], ["Chaozhou"], ["Yangzhou"], ["Dongwan"], ["Ma´anshan"], ["Foshan"], ["Yueyang"], ["Xingtai"], ["Changde"], ["Shihezi"], ["Yancheng"], ["Jiujiang"], ["Dongying"], ["Shashi"], ["Xintai"], ["Jingdezhen"], ["Tongchuan"], ["Zhongshan"], ["Shiyan"], ["Tieli"], ["Jining"], ["Wuhai"], ["Mianyang"], ["Luzhou"], ["Zunyi"], ["Shizuishan"], ["Neijiang"], ["Tongliao"], ["Tieling"], ["Wafangdian"], ["Anqing"], ["Shaoyang"], ["Laiwu"], ["Chengde"], ["Tianshui"], ["Nanyang"], ["Cangzhou"], ["Yibin"], ["Huaiyin"], ["Dunhua"], ["Yanji"], ["Jiangmen"], ["Tongling"], ["Suihua"], ["Gongziling"], ["Xiantao"], ["Chaoyang"], ["Ganzhou"], ["Huzhou"], ["Baicheng"], ["Shangzi"], ["Yangjiang"], ["Qitaihe"], ["Gejiu"], ["Jiangyin"], ["Hebi"], ["Jiaxing"], ["Wuzhou"], ["Meihekou"], ["Xuchang"], ["Liaocheng"], ["Haicheng"], ["Qianjiang"], ["Baiyin"], ["Bei´an"], ["Yixing"], ["Laizhou"], ["Qaramay"], ["Acheng"], ["Dezhou"], ["Nanping"], ["Zhaoqing"], ["Beipiao"], ["Fengcheng"], ["Fuyu"], ["Xinyang"], ["Dongtai"], ["Yuci"], ["Honghu"], ["Ezhou"], ["Heze"], ["Daxian"], ["Linfen"], ["Tianmen"], ["Yiyang"], ["Quanzhou"], ["Rizhao"], ["Deyang"], ["Guangyuan"], ["Changshu"], ["Zhangzhou"], ["Hailar"], ["Nanchong"], ["Jiutai"], ["Zhaodong"], ["Shaoxing"], ["Fuyang"], ["Maoming"], ["Qujing"], ["Ghulja"], ["Jiaohe"], ["Puyang"], ["Huadian"], ["Jiangyou"], ["Qashqar"], ["Anshun"], ["Fuling"], ["Xinyu"], ["Hanzhong"], ["Danyang"], ["Chenzhou"], ["Xiaogan"], ["Shangqiu"], ["Zhuhai"], ["Qingyuan"], ["Aqsu"], ["Jining"], ["Xiaoshan"], ["Zaoyang"], ["Xinghua"], ["Hami"], ["Huizhou"], ["Jinmen"], ["Sanming"], ["Bishkek"], ["Osh"], ["Cartagena"], ["Cúcuta"], ["Bucaramanga"], ["Ibagué"], ["Pereira"], ["Santa Marta"], ["Manizales"], ["Bello"], ["Pasto"], ["Neiva"], ["Soledad"], ["Armenia"], ["Villavicencio"], ["Soacha"], ["Valledupar"], ["Montería"], ["Itagüí"], ["Palmira"], ["Buenaventura"], ["Floridablanca"], ["Sincelejo"], ["Popayán"], ["Barrancabermeja"], ["Pointe-Noire"], ["Lubumbashi"], ["Mbuji-Mayi"], ["Kolwezi"], ["Kisangani"], ["Kananga"], ["Likasi"], ["Bukavu"], ["Kikwit"], ["Tshikapa"], ["Matadi"], ["Mbandaka"], ["Hamhung"], ["Chongjin"], ["Nampo"], ["Sinuiju"], ["Wonsan"], ["Phyongsong"], ["Sariwon"], ["Haeju"], ["Kanggye"], ["Kimchaek"], ["Hyesan"], ["Kaesong"], ["Songnam"], ["Puchon"], ["Suwon"], ["Anyang"], ["Chonju"], ["Chongju"], ["Koyang"], ["Ansan"], ["Pohang"], ["Chang-won"], ["Masan"], ["Kwangmyong"], ["Chonan"], ["Chinju"], ["Iksan"], ["Pyongtaek"], ["Kumi"], ["Uijongbu"], ["Kyongju"], ["Kunsan"], ["Cheju"], ["Kimhae"], ["Sunchon"], ["Mokpo"], ["Yong-in"], ["Wonju"], ["Kunpo"], ["Chunchon"], ["Namyangju"], ["Kangnung"], ["Chungju"], ["Andong"], ["Yosu"], ["Kyongsan"], ["Paju"], ["Yangsan"], ["Athenai"], ["Thessaloniki"], ["Pireus"], ["Zagreb"], ["Split"], ["Rijeka"], ["Santiago de Cuba"], ["Camagüey"], ["Holguín"], ["Santa Clara"], ["Guantánamo"], ["Nicosia"], ["Vientiane"], ["Riga"], ["Maseru"], ["Tripoli"], ["Monrovia"], ["Bengasi"], ["Vilnius"], ["Kaunas"], ["Klaipeda"], ["El-Aaiún"], ["Macao"], ["Antananarivo"], ["Skopje"], ["Blantyre"], ["Lilongwe"], ["Ipoh"], ["Johor Baharu"], ["Petaling Jaya"], ["Kelang"], ["Kuala Terengganu"], ["Pinang"], ["Kota Bharu"], ["Kuantan"], ["Taiping"], ["Seremban"], ["Bamako"], ["Rabat"], ["Marrakech"], ["Fès"], ["Tanger"], ["Salé"], ["Meknès"], ["Oujda"], ["Kénitra"], ["Tétouan"], ["Safi"], ["Nouakchott"], ["Naucalpan de Juárez"], ["Mexicali"], ["Culiacán"], ["Acapulco de Juárez"], ["Tlalnepantla de Baz"], ["Mérida"], ["Chihuahua"], ["San Luis Potosí"], ["Guadalupe"], ["Toluca"], ["Aguascalientes"], ["Querétaro"], ["Morelia"], ["Hermosillo"], ["Saltillo"], ["Torreón"], ["Centro (Villahermosa)"], ["San Nicolás de los Garza"], ["Durango"], ["Chimalhuacán"], ["Tlaquepaque"], ["Atizapán de Zaragoza"], ["Veracruz"], ["Cuautitlán Izcalli"], ["Irapuato"], ["Tuxtla Gutiérrez"], ["Tultitlán"], ["Reynosa"], ["Benito Juárez"], ["Matamoros"], ["Xalapa"], ["Celaya"], ["Mazatlán"], ["Ensenada"], ["Ahome"], ["Cajeme"], ["Cuernavaca"], ["Tonalá"], ["Valle de Chalco Solidaridad"], ["Nuevo Laredo"], ["Tepic"], ["Tampico"], ["Ixtapaluca"], ["Apodaca"], ["Guasave"], ["Gómez Palacio"], ["Tapachula"], ["Nicolás Romero"], ["Coatzacoalcos"], ["Uruapan"], ["Victoria"], ["Oaxaca de Juárez"], ["Coacalco de Berriozábal"], ["Pachuca de Soto"], ["General Escobedo"], ["Salamanca"], ["Santa Catarina"], ["Tehuacán"], ["Chalco"], ["Cárdenas"], ["Campeche"], ["La Paz"], ["Othón P. Blanco (Chetumal)"], ["Texcoco"], ["La Paz"], ["Metepec"], ["Monclova"], ["Huixquilucan"], ["Chilpancingo de los Bravo"], ["Puerto Vallarta"], ["Fresnillo"], ["Ciudad Madero"], ["Soledad de Graciano Sánchez"], ["San Juan del Río"], ["San Felipe del Progreso"], ["Córdoba"], ["Tecámac"], ["Ocosingo"], ["Carmen"], ["Lázaro Cárdenas"], ["Jiutepec"], ["Papantla"], ["Comalcalco"], ["Zamora"], ["Chisinau"], ["Tiraspol"], ["Ulan Bator"], ["Matola"], ["Beira"], ["Nampula"], ["Chimoio"], ["Mandalay"], ["Moulmein (Mawlamyine)"], ["Pegu (Bago)"], ["Bassein (Pathein)"], ["Windhoek"], ["Kathmandu"], ["Niamey"], ["Ogbomosho"], ["Kano"], ["Oshogbo"], ["Ilorin"], ["Abeokuta"], ["Port Harcourt"], ["Zaria"], ["Ilesha"], ["Onitsha"], ["Iwo"], ["Ado-Ekiti"], ["Abuja"], ["Kaduna"], ["Mushin"], ["Maiduguri"], ["Enugu"], ["Ede"], ["Aba"], ["Ife"], ["Ila"], ["Oyo"], ["Ikerre"], ["Benin City"], ["Iseyin"], ["Katsina"], ["Jos"], ["Sokoto"], ["Ilobu"], ["Offa"], ["Ikorodu"], ["Ilawe-Ekiti"], ["Owo"], ["Ikirun"], ["Shaki"], ["Calabar"], ["Ondo"], ["Akure"], ["Oslo"], ["Bergen"], ["Bouaké"], ["Quetta"], ["Islamabad"], ["Sargodha"], ["Sialkot"], ["Bahawalpur"], ["Sukkur"], ["Jhang"], ["Sheikhupura"], ["Larkana"], ["Gujrat"], ["Mardan"], ["Kasur"], ["Rahim Yar Khan"], ["Sahiwal"], ["Okara"], ["Wah"], ["Dera Ghazi Khan"], ["Mirpur Khas"], ["Nawabshah"], ["Mingora"], ["Chiniot"], ["Ciudad de Panamá"], ["San Miguelito"], ["Port Moresby"], ["Asunción"], ["Arequipa"], ["Trujillo"], ["Chiclayo"], ["Callao"], ["Iquitos"], ["Chimbote"], ["Huancayo"], ["Piura"], ["Cusco"], ["Pucallpa"], ["Tacna"], ["Ica"], ["Lisboa"], ["Porto"], ["San Juan"], ["Bayamón"], ["Ponce"], ["Carolina"], ["Lódz"], ["Kraków"], ["Wroclaw"], ["Poznan"], ["Gdansk"], ["Szczecin"], ["Bydgoszcz"], ["Lublin"], ["Katowice"], ["Bialystok"], ["Czestochowa"], ["Gdynia"], ["Sosnowiec"], ["Radom"], ["Kielce"], ["Gliwice"], ["Torun"], ["Bytom"], ["Zabrze"], ["Bielsko-Biala"], ["Olsztyn"], ["Rzeszów"], ["Doha"], ["Marseille"], ["Lyon"], ["Toulouse"], ["Nice"], ["Nantes"], ["Strasbourg"], ["Montpellier"], ["Bordeaux"], ["Rennes"], ["Le Havre"], ["Reims"], ["Lille"], ["St-Étienne"], ["Toulon"], ["Iasi"], ["Constanta"], ["Cluj-Napoca"], ["Galati"], ["Timisoara"], ["Brasov"], ["Craiova"], ["Ploiesti"], ["Braila"], ["Oradea"], ["Bacau"], ["Pitesti"], ["Arad"], ["Sibiu"], ["Târgu Mures"], ["Kigali"], ["Stockholm"], ["Gothenburg [Göteborg]"], ["Malmö"], ["Uppsala"], ["Frankfurt am Main"], ["Essen"], ["Dortmund"], ["Stuttgart"], ["Düsseldorf"], ["Bremen"], ["Duisburg"], ["Hannover"], ["Leipzig"], ["Nürnberg"], ["Dresden"], ["Bochum"], ["Wuppertal"], ["Bielefeld"], ["Mannheim"], ["Bonn"], ["Gelsenkirchen"], ["Karlsruhe"], ["Wiesbaden"], ["Münster"], ["Mönchengladbach"], ["Chemnitz"], ["Augsburg"], ["Halle/Saale"], ["Braunschweig"], ["Aachen"], ["Krefeld"], ["Magdeburg"], ["Kiel"], ["Oberhausen"], ["Lübeck"], ["Hagen"], ["Rostock"], ["Freiburg im Breisgau"], ["Erfurt"], ["Kassel"], ["Saarbrücken"], ["Mainz"], ["Hamm"], ["Herne"], ["Mülheim an der Ruhr"], ["Solingen"], ["Osnabrück"], ["Ludwigshafen am Rhein"], ["Leverkusen"], ["Ndola"], ["Kitwe"], ["Medina"], ["al-Dammam"], ["al-Taif"], ["Tabuk"], ["Burayda"], ["al-Hufuf"], ["al-Mubarraz"], ["Khamis Mushayt"], ["Hail"], ["Pikine"], ["Dakar"], ["Thiès"], ["Kaolack"], ["Ziguinchor"], ["Freetown"], ["Bratislava"], ["Košice"], ["Ljubljana"], ["Colombo"], ["Dehiwala"], ["Moratuwa"], ["Sharq al-Nil"], ["Port Sudan"], ["Kassala"], ["Obeid"], ["Nyala"], ["Wad Madani"], ["al-Qadarif"], ["Kusti"], ["Helsinki [Helsingfors]"], ["Espoo"], ["Tampere"], ["Vantaa"], ["Turku [Åbo]"], ["Zürich"], ["Geneve"], ["Basel"], ["Hims"], ["Hama"], ["Latakia"], ["Dushanbe"], ["Khujand"], ["Tainan"], ["Panchiao"], ["Chungho"], ["Keelung (Chilung)"], ["Sanchung"], ["Hsinchuang"], ["Hsinchu"], ["Chungli"], ["Fengshan"], ["Taoyuan"], ["Chiayi"], ["Hsintien"], ["Changhwa"], ["Yungho"], ["Tucheng"], ["Pingtung"], ["Yungkang"], ["Pingchen"], ["Tali"], ["Taiping"], ["Pate"], ["Fengyuan"], ["Luchou"], ["Dodoma"], ["Mwanza"], ["København"], ["Århus"], ["Odense"], ["Aalborg"], ["Nonthaburi"], ["Nakhon Ratchasima"], ["Chiang Mai"], ["Lomé"], ["N´Djaména"], ["Brno"], ["Ostrava"], ["Plzen"], ["Tunis"], ["Sfax"], ["Ariana"], ["Ettadhamen"], ["Gaziantep"], ["Konya"], ["Mersin (Içel)"], ["Antalya"], ["Diyarbakir"], ["Kayseri"], ["Eskisehir"], ["Sanliurfa"], ["Samsun"], ["Malatya"], ["Gebze"], ["Denizli"], ["Sivas"], ["Erzurum"], ["Tarsus"], ["Kahramanmaras"], ["Elâzig"], ["Van"], ["Sultanbeyli"], ["Izmit (Kocaeli)"], ["Manisa"], ["Batman"], ["Balikesir"], ["Sakarya (Adapazari)"], ["Ashgabat"], ["Chärjew"], ["Kampala"], ["Zaporizzja"], ["Lviv"], ["Kryvyi Rig"], ["Mykolajiv"], ["Mariupol"], ["Lugansk"], ["Vinnytsja"], ["Makijivka"], ["Herson"], ["Sevastopol"], ["Simferopol"], ["Pultava [Poltava]"], ["Tšernigiv"], ["Tšerkasy"], ["Gorlivka"], ["Zytomyr"], ["Sumy"], ["Dniprodzerzynsk"], ["Kirovograd"], ["Hmelnytskyi"], ["Tšernivtsi"], ["Rivne"], ["Krementšuk"], ["Ivano-Frankivsk"], ["Ternopil"], ["Lutsk"], ["Bila Tserkva"], ["Kramatorsk"], ["Melitopol"], ["Kertš"], ["Debrecen"], ["Miskolc"], ["Auckland"], ["Christchurch"], ["Manukau"], ["North Shore"], ["Waitakere"], ["Wellington"], ["Namangan"], ["Samarkand"], ["Andijon"], ["Buhoro"], ["Karsi"], ["Nukus"], ["Kükon"], ["Fargona"], ["Gomel"], ["Mogiljov"], ["Vitebsk"], ["Grodno"], ["Brest"], ["Bobruisk"], ["Baranovitši"], ["Barquisimeto"], ["Valencia"], ["Ciudad Guayana"], ["Petare"], ["Maracay"], ["Barcelona"], ["Maturín"], ["San Cristóbal"], ["Ciudad Bolívar"], ["Cumaná"], ["Mérida"], ["Cabimas"], ["Barinas"], ["Turmero"], ["Baruta"], ["Puerto Cabello"], ["Santa Ana de Coro"], ["Los Teques"], ["Punto Fijo"], ["Guarenas"], ["Krasnojarsk"], ["Saratov"], ["Toljatti"], ["Uljanovsk"], ["Izevsk"], ["Krasnodar"], ["Jaroslavl"], ["Habarovsk"], ["Vladivostok"], ["Irkutsk"], ["Barnaul"], ["Novokuznetsk"], ["Penza"], ["Rjazan"], ["Orenburg"], ["Lipetsk"], ["Nabereznyje Tšelny"], ["Tula"], ["Tjumen"], ["Kemerovo"], ["Astrahan"], ["Tomsk"], ["Kirov"], ["Ivanovo"], ["Tšeboksary"], ["Brjansk"], ["Tver"], ["Kursk"], ["Magnitogorsk"], ["Kaliningrad"], ["Nizni Tagil"], ["Murmansk"], ["Ulan-Ude"], ["Kurgan"], ["Arkangeli"], ["Sotši"], ["Smolensk"], ["Orjol"], ["Stavropol"], ["Belgorod"], ["Kaluga"], ["Vladimir"], ["Mahatškala"], ["Tšerepovets"], ["Saransk"], ["Tambov"], ["Vladikavkaz"], ["Tšita"], ["Vologda"], ["Veliki Novgorod"], ["Komsomolsk-na-Amure"], ["Kostroma"], ["Volzski"], ["Taganrog"], ["Petroskoi"], ["Bratsk"], ["Dzerzinsk"], ["Surgut"], ["Orsk"], ["Sterlitamak"], ["Angarsk"], ["Joškar-Ola"], ["Rybinsk"], ["Prokopjevsk"], ["Niznevartovsk"], ["Naltšik"], ["Syktyvkar"], ["Severodvinsk"], ["Bijsk"], ["Niznekamsk"], ["Blagoveštšensk"], ["Šahty"], ["Staryi Oskol"], ["Zelenograd"], ["Balakovo"], ["Novorossijsk"], ["Pihkova"], ["Zlatoust"], ["Jakutsk"], ["Podolsk"], ["Petropavlovsk-Kamtšatski"], ["Kamensk-Uralski"], ["Engels"], ["Syzran"], ["Grozny"], ["Novotšerkassk"], ["Berezniki"], ["Juzno-Sahalinsk"], ["Volgodonsk"], ["Abakan"], ["Maikop"], ["Miass"], ["Armavir"], ["Ljubertsy"], ["Rubtsovsk"], ["Haiphong"], ["Da Nang"], ["Biên Hoa"], ["Nha Trang"], ["Hue"], ["Can Tho"], ["Cam Pha"], ["Nam Dinh"], ["Quy Nhon"], ["Tallinn"], ["San Jose"], ["Indianapolis"], ["San Francisco"], ["Jacksonville"], ["Columbus"], ["Austin"], ["Baltimore"], ["Memphis"], ["Milwaukee"], ["Boston"], ["Washington"], ["Nashville-Davidson"], ["El Paso"], ["Seattle"], ["Denver"], ["Charlotte"], ["Fort Worth"], ["Portland"], ["Oklahoma City"], ["Tucson"], ["New Orleans"], ["Las Vegas"], ["Cleveland"], ["Long Beach"], ["Albuquerque"], ["Kansas City"], ["Fresno"], ["Virginia Beach"], ["Atlanta"], ["Sacramento"], ["Oakland"], ["Mesa"], ["Tulsa"], ["Omaha"], ["Minneapolis"], ["Honolulu"], ["Miami"], ["Colorado Springs"], ["Saint Louis"], ["Wichita"], ["Santa Ana"], ["Pittsburgh"], ["Arlington"], ["Cincinnati"], ["Anaheim"], ["Toledo"], ["Tampa"], ["Buffalo"], ["Saint Paul"], ["Corpus Christi"], ["Aurora"], ["Raleigh"], ["Newark"], ["Lexington-Fayette"], ["Anchorage"], ["Louisville"], ["Riverside"], ["Saint Petersburg"], ["Bakersfield"], ["Stockton"], ["Birmingham"], ["Jersey City"], ["Norfolk"], ["Baton Rouge"], ["Hialeah"], ["Lincoln"], ["Greensboro"], ["Plano"], ["Rochester"], ["Glendale"], ["Akron"], ["Garland"], ["Madison"], ["Fort Wayne"], ["Fremont"], ["Scottsdale"], ["Montgomery"], ["Shreveport"], ["Augusta-Richmond County"], ["Lubbock"], ["Chesapeake"], ["Mobile"], ["Des Moines"], ["Grand Rapids"], ["Richmond"], ["Yonkers"], ["Spokane"], ["Glendale"], ["Tacoma"], ["Irving"], ["Huntington Beach"], ["Modesto"], ["Durham"], ["Columbus"], ["Orlando"], ["Boise City"], ["Winston-Salem"], ["San Bernardino"], ["Jackson"], ["Little Rock"], ["Salt Lake City"], ["Reno"], ["Newport News"], ["Chandler"], ["Laredo"], ["Henderson"], ["Arlington"], ["Knoxville"], ["Amarillo"], ["Providence"], ["Chula Vista"], ["Worcester"], ["Oxnard"], ["Dayton"], ["Garden Grove"], ["Oceanside"], ["Bulawayo"], ["Chitungwiza"], ["Mount Darwin"], ["Gaza"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,Name,CountryCode,District,Population\n1,Kabul,AFG,Kabol,1780000\n2,Qandahar,AFG,Qandahar,237500\n3,Herat,AFG,Herat,186800\n4,Mazar-e-Sharif,AFG,Balkh,127800\n5,Amsterdam,NLD,Noord-Holland,731200\n6,Rotterdam,NLD,Zuid-Holland,593321\n7,Haag,NLD,Zuid-Holland,440900\n8,Utrecht,NLD,Utrecht,234323\n9,Eindhoven,NLD,Noord-Brabant,201843\n10,Tilburg,NLD,Noord-Brabant,193238\n\nQuestion: Return the names of cities that have a population between 160000 and 900000 ."}
{"db_id": "orchestra", "question": "How many conductors are there?", "query": "SELECT count(*) FROM conductor", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: How many conductors are there?"}
{"db_id": "orchestra", "question": "Count the number of conductors.", "query": "SELECT count(*) FROM conductor", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: Count the number of conductors."}
{"db_id": "orchestra", "question": "List the names of conductors in ascending order of age.", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Antal Doráti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: List the names of conductors in ascending order of age."}
{"db_id": "orchestra", "question": "What are the names of conductors, ordered by age?", "query": "SELECT Name FROM conductor ORDER BY Age ASC", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Antal Doráti"], ["Igor Stravinsky"], ["Colin Davis"], ["Michael Tilson Thomas"], ["Paul Jorgensen"], ["Antal Brown"], ["Charles Dutoit"], ["Seiji Ozawa"], ["Valeri Gergiev"], ["Pierre Boulez"], ["Gerard Schwarz"], ["Robert Craft"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: What are the names of conductors, ordered by age?"}
{"db_id": "orchestra", "question": "What are the names of conductors whose nationalities are not \"USA\"?", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: What are the names of conductors whose nationalities are not \"USA\"?"}
{"db_id": "orchestra", "question": "Return the names of conductors that do not have the nationality \"USA\".", "query": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Igor Stravinsky"], ["Paul Jorgensen"], ["Charles Dutoit"], ["Pierre Boulez"], ["Robert Craft"], ["Michael Tilson Thomas"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: Return the names of conductors that do not have the nationality \"USA\"."}
{"db_id": "orchestra", "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: What are the record companies of orchestras in descending order of years in which they were founded?"}
{"db_id": "orchestra", "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Columbia Masterworks"], ["Philips"], ["Philips Classics Records"], ["RCA"], ["EMI"], ["Koch Records / Naxos Records"], ["Decca Records"], ["Mercury Records"], ["Deutsche Grammophon"], ["Kultur"], ["Decca Records"], ["Delos Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Return the record companies of orchestras, sorted descending by the years in which they were founded."}
{"db_id": "orchestra", "question": "What is the average attendance of shows?", "query": "SELECT avg(Attendance) FROM SHOW", "table_data_path": "csv_files/orchestra/show/data.csv", "execution_results": [[1326.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShow_ID,Performance_ID,If_first_show,Result,Attendance\n1,1,Glebe Park,T,1026.0\n2,2,Fir Park,T,695.0\n3,3,St. Mirren Park,F,555.0\n4,4,St. Mirren Park,F,1925.0\n5,5,Hampden Park,T,2431.0\n\nQuestion: What is the average attendance of shows?"}
{"db_id": "orchestra", "question": "Return the average attendance across all shows.", "query": "SELECT avg(Attendance) FROM SHOW", "table_data_path": "csv_files/orchestra/show/data.csv", "execution_results": [[1326.4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nShow_ID,Performance_ID,If_first_show,Result,Attendance\n1,1,Glebe Park,T,1026.0\n2,2,Fir Park,T,695.0\n3,3,St. Mirren Park,F,555.0\n4,4,St. Mirren Park,F,1925.0\n5,5,Hampden Park,T,2431.0\n\nQuestion: Return the average attendance across all shows."}
{"db_id": "orchestra", "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "table_data_path": "csv_files/orchestra/performance/data.csv", "execution_results": [["44.7%", "22.7%"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPerformance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share\n1,1,Auditions 1,9 June,5.2,12,22.7%\n2,2,Auditions 2,10 June,6.73,8,28.0%\n3,3,Auditions 3,11 June,7.28,15,29.4%\n4,4,Auditions 4,12 June,7.39,13,29.3%\n5,5,Auditions 5,13 June,7.51,11,29.2%\n11,11,Semi-final 1,14 June,8.36,9,34.0%\n6,6,Semi-final 2,15 June,9.28,8,38.1%\n7,7,Semi-final 3,16 June,9.29,7,40.9%\n8,8,Live final,17 June,11.58,1,43.7%\n9,9,Live final results,17 June,11.45,2,44.7%\n\nQuestion: What are the maximum and minimum share of performances whose type is not \"Live final\"."}
{"db_id": "orchestra", "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "table_data_path": "csv_files/orchestra/performance/data.csv", "execution_results": [["44.7%", "22.7%"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nPerformance_ID,Orchestra_ID,Type,Date,Official_ratings_(millions),Weekly_rank,Share\n1,1,Auditions 1,9 June,5.2,12,22.7%\n2,2,Auditions 2,10 June,6.73,8,28.0%\n3,3,Auditions 3,11 June,7.28,15,29.4%\n4,4,Auditions 4,12 June,7.39,13,29.3%\n5,5,Auditions 5,13 June,7.51,11,29.2%\n11,11,Semi-final 1,14 June,8.36,9,34.0%\n6,6,Semi-final 2,15 June,9.28,8,38.1%\n7,7,Semi-final 3,16 June,9.29,7,40.9%\n8,8,Live final,17 June,11.58,1,43.7%\n9,9,Live final results,17 June,11.45,2,44.7%\n\nQuestion: Return the maximum and minimum shares for performances that do not have the type \"Live final\"."}
{"db_id": "orchestra", "question": "How many different nationalities do conductors have?", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: How many different nationalities do conductors have?"}
{"db_id": "orchestra", "question": "Count the number of different nationalities of conductors.", "query": "SELECT count(DISTINCT Nationality) FROM conductor", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: Count the number of different nationalities of conductors."}
{"db_id": "orchestra", "question": "List names of conductors in descending order of years of work.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Doráti"], ["Seiji Ozawa"], ["Colin Davis"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: List names of conductors in descending order of years of work."}
{"db_id": "orchestra", "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Robert Craft"], ["Antal Brown"], ["Gerard Schwarz"], ["Valeri Gergiev"], ["Charles Dutoit"], ["Michael Tilson Thomas"], ["Igor Stravinsky"], ["Paul Jorgensen"], ["Pierre Boulez"], ["Antal Doráti"], ["Seiji Ozawa"], ["Colin Davis"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: What are the names of conductors, sorted descending by the number of years they have worked?"}
{"db_id": "orchestra", "question": "List the name of the conductor with the most years of work.", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Robert Craft"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: List the name of the conductor with the most years of work."}
{"db_id": "orchestra", "question": "What is the name of the conductor who has worked the greatest number of years?", "query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "table_data_path": "csv_files/orchestra/conductor/data.csv", "execution_results": [["Robert Craft"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nConductor_ID,Name,Age,Nationality,Year_of_Work\n1,Antal Doráti,40,USA,10\n2,Igor Stravinsky,41,UK,11\n3,Colin Davis,42,USA,6\n4,Paul Jorgensen,43,UK,11\n5,Antal Brown,43,USA,20\n6,Charles Dutoit,43,France,12\n7,Gerard Schwarz,50,USA,20\n8,Pierre Boulez,49,UK,11\n9,Valeri Gergiev,47,USA,16\n10,Robert Craft,63,UK,21\n\nQuestion: What is the name of the conductor who has worked the greatest number of years?"}
{"db_id": "orchestra", "question": "Please show the different record companies and the corresponding number of orchestras.", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Please show the different record companies and the corresponding number of orchestras."}
{"db_id": "orchestra", "question": "How many orchestras does each record company manage?", "query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Columbia Masterworks", 1], ["Decca Records", 2], ["Delos Records", 1], ["Deutsche Grammophon", 1], ["EMI", 1], ["Koch Records / Naxos Records", 1], ["Kultur", 1], ["Mercury Records", 1], ["Philips", 1], ["Philips Classics Records", 1], ["RCA", 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: How many orchestras does each record company manage?"}
{"db_id": "orchestra", "question": "Please show the record formats of orchestras in ascending order of count.", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["CD / LP"], ["DVD"], ["CD"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Please show the record formats of orchestras in ascending order of count."}
{"db_id": "orchestra", "question": "What are the major record formats of orchestras, sorted by their frequency?", "query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["CD / LP"], ["DVD"], ["CD"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: What are the major record formats of orchestras, sorted by their frequency?"}
{"db_id": "orchestra", "question": "List the record company shared by the most number of orchestras.", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Decca Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: List the record company shared by the most number of orchestras."}
{"db_id": "orchestra", "question": "What is the record company used by the greatest number of orchestras?", "query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Decca Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: What is the record company used by the greatest number of orchestras?"}
{"db_id": "orchestra", "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Decca Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Show the record companies shared by orchestras founded before 2003 and after 2003."}
{"db_id": "orchestra", "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [["Decca Records"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?"}
{"db_id": "orchestra", "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [[11]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Find the number of orchestras whose record format is \"CD\" or \"DVD\"."}
{"db_id": "orchestra", "question": "Count the number of orchestras that have CD or DVD as their record format.", "query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "table_data_path": "csv_files/orchestra/orchestra/data.csv", "execution_results": [[11]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nOrchestra_ID,Orchestra,Conductor_ID,Record_Company,Year_of_Founded,Major_Record_Format\n1,London Symphony Orchestra,1,Mercury Records,2003.0,CD\n2,Columbia Symphony Orchestra,2,Columbia Masterworks,2009.0,CD / LP\n3,Royal Concertgebouw Orchestra,3,Philips,2008.0,CD\n4,Royal Danish Orchestra,4,Kultur,2002.0,DVD\n5,Detroit Symphony Orchestra,5,Decca Records,2002.0,CD\n6,Montreal Symphony Orchestra,6,Decca Records,2004.0,CD\n7,Seattle Symphony Orchestra,7,Delos Records,2002.0,CD\n8,Chicago Symphony Orchestra,8,Deutsche Grammophon,2003.0,CD\n9,Kirov Orchestra,9,Philips Classics Records,2008.0,CD\n10,Philharmonia Orchestra,10,Koch Records / Naxos Records,2006.0,CD\n\nQuestion: Count the number of orchestras that have CD or DVD as their record format."}
{"db_id": "network_1", "question": "How many high schoolers are there?", "query": "SELECT count(*) FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[16]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: How many high schoolers are there?"}
{"db_id": "network_1", "question": "Count the number of high schoolers.", "query": "SELECT count(*) FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[16]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Count the number of high schoolers."}
{"db_id": "network_1", "question": "Show the names and grades of each high schooler.", "query": "SELECT name ,  grade FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show the names and grades of each high schooler."}
{"db_id": "network_1", "question": "What are the names and grades for each high schooler?", "query": "SELECT name ,  grade FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [["Jordan", 9], ["Gabriel", 9], ["Tiffany", 9], ["Cassandra", 9], ["Haley", 10], ["Andrew", 10], ["Kris", 10], ["Brittany", 10], ["Alexis", 11], ["Austin", 11], ["Gabriel", 11], ["Jessica", 11], ["Jordan", 12], ["John", 12], ["Kyle", 12], ["Logan", 12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: What are the names and grades for each high schooler?"}
{"db_id": "network_1", "question": "Show all the grades of the high schoolers.", "query": "SELECT grade FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show all the grades of the high schoolers."}
{"db_id": "network_1", "question": "What is the grade of each high schooler?", "query": "SELECT grade FROM Highschooler", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9], [9], [9], [9], [10], [10], [10], [10], [11], [11], [11], [11], [12], [12], [12], [12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: What is the grade of each high schooler?"}
{"db_id": "network_1", "question": "What grade is Kyle in?", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: What grade is Kyle in?"}
{"db_id": "network_1", "question": "Return the grade for the high schooler named Kyle.", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Return the grade for the high schooler named Kyle."}
{"db_id": "network_1", "question": "Show the names of all high schoolers in grade 10.", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show the names of all high schoolers in grade 10."}
{"db_id": "network_1", "question": "What are the names of all high schoolers in grade 10?", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [["Haley"], ["Andrew"], ["Kris"], ["Brittany"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: What are the names of all high schoolers in grade 10?"}
{"db_id": "network_1", "question": "Show the ID of the high schooler named Kyle.", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[1934]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show the ID of the high schooler named Kyle."}
{"db_id": "network_1", "question": "What is Kyle's id?", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[1934]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: What is Kyle's id?"}
{"db_id": "network_1", "question": "How many high schoolers are there in grade 9 or 10?", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: How many high schoolers are there in grade 9 or 10?"}
{"db_id": "network_1", "question": "Count the number of high schoolers in grades 9 or 10.", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Count the number of high schoolers in grades 9 or 10."}
{"db_id": "network_1", "question": "Show the number of high schoolers for each grade.", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9, 4], [10, 4], [11, 4], [12, 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show the number of high schoolers for each grade."}
{"db_id": "network_1", "question": "How many high schoolers are in each grade?", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9, 4], [10, 4], [11, 4], [12, 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: How many high schoolers are in each grade?"}
{"db_id": "network_1", "question": "Which grade has the most high schoolers?", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Which grade has the most high schoolers?"}
{"db_id": "network_1", "question": "Return the grade that has the greatest number of high schoolers.", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Return the grade that has the greatest number of high schoolers."}
{"db_id": "network_1", "question": "Show me all grades that have at least 4 students.", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9], [10], [11], [12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Show me all grades that have at least 4 students."}
{"db_id": "network_1", "question": "Which grades have 4 or more high schoolers?", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "table_data_path": "csv_files/network_1/highschooler/data.csv", "execution_results": [[9], [10], [11], [12]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nID,name,grade\n1510,Jordan,9\n1689,Gabriel,9\n1381,Tiffany,9\n1709,Cassandra,9\n1101,Haley,10\n1782,Andrew,10\n1468,Kris,10\n1641,Brittany,10\n1247,Alexis,11\n1316,Austin,11\n\nQuestion: Which grades have 4 or more high schoolers?"}
{"db_id": "network_1", "question": "Show the student IDs and numbers of friends corresponding to each.", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "table_data_path": "csv_files/network_1/friend/data.csv", "execution_results": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,friend_id\n1510,1381\n1510,1689\n1689,1709\n1381,1247\n1709,1247\n1689,1782\n1782,1468\n1782,1316\n1782,1304\n1468,1101\n\nQuestion: Show the student IDs and numbers of friends corresponding to each."}
{"db_id": "network_1", "question": "How many friends does each student have?", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "table_data_path": "csv_files/network_1/friend/data.csv", "execution_results": [[1101, 1], [1247, 2], [1304, 1], [1316, 1], [1381, 1], [1468, 2], [1501, 1], [1510, 2], [1661, 1], [1689, 2], [1709, 1], [1782, 3], [1911, 1], [1934, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,friend_id\n1510,1381\n1510,1689\n1689,1709\n1381,1247\n1709,1247\n1689,1782\n1782,1468\n1782,1316\n1782,1304\n1468,1101\n\nQuestion: How many friends does each student have?"}
{"db_id": "network_1", "question": "Count the number of likes for each student id.", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "table_data_path": "csv_files/network_1/likes/data.csv", "execution_results": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,liked_id\n1689,1709\n1709,1689\n1782,1709\n1911,1247\n1247,1468\n1641,1468\n1316,1304\n1501,1934\n1934,1501\n1025,1101\n\nQuestion: Count the number of likes for each student id."}
{"db_id": "network_1", "question": "How many likes correspond to each student id?", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "table_data_path": "csv_files/network_1/likes/data.csv", "execution_results": [[1025, 1], [1247, 1], [1316, 1], [1501, 1], [1641, 1], [1689, 1], [1709, 1], [1782, 1], [1911, 1], [1934, 1]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nstudent_id,liked_id\n1689,1709\n1709,1689\n1782,1709\n1911,1247\n1247,1468\n1641,1468\n1316,1304\n1501,1934\n1934,1501\n1025,1101\n\nQuestion: How many likes correspond to each student id?"}
{"db_id": "dog_kennels", "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["uboehm@example.org"], ["mekhi.little@example.org"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin."}
{"db_id": "dog_kennels", "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["uboehm@example.org"], ["mekhi.little@example.org"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?"}
{"db_id": "dog_kennels", "question": "What are the arriving date and the departing date of all the dogs?", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: What are the arriving date and the departing date of all the dogs?"}
{"db_id": "dog_kennels", "question": "List the arrival date and the departure date for all the dogs.", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["2017-09-08 20:10:13", "2018-03-25 06:58:44"], ["2017-12-22 05:02:02", "2018-03-25 02:11:32"], ["2017-06-25 10:14:05", "2018-03-25 10:25:46"], ["2017-04-20 00:58:55", "2018-03-24 19:12:22"], ["2017-10-25 00:55:34", "2018-03-25 04:50:22"], ["2017-04-15 09:25:31", "2018-03-25 13:07:04"], ["2017-05-06 08:03:52", "2018-03-25 06:29:10"], ["2017-10-16 20:06:21", "2018-03-25 02:47:40"], ["2018-01-17 11:44:16", "2018-03-25 06:46:07"], ["2017-12-29 06:08:26", "2018-03-25 04:42:14"], ["2017-07-25 15:19:07", "2018-03-25 15:05:16"], ["2017-10-24 04:45:13", "2018-03-25 14:15:41"], ["2018-01-02 03:15:29", "2018-03-25 05:07:47"], ["2017-06-18 19:45:38", "2018-03-24 23:48:59"], ["2017-12-29 23:24:13", "2018-03-24 19:36:59"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: List the arrival date and the departure date for all the dogs."}
{"db_id": "dog_kennels", "question": "How many dogs went through any treatments?", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: How many dogs went through any treatments?"}
{"db_id": "dog_kennels", "question": "Count the number of dogs that went through a treatment.", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: Count the number of dogs that went through a treatment."}
{"db_id": "dog_kennels", "question": "How many professionals have performed any treatment to dogs?", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: How many professionals have performed any treatment to dogs?"}
{"db_id": "dog_kennels", "question": "Find the number of professionals who have ever treated dogs.", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: Find the number of professionals who have ever treated dogs."}
{"db_id": "dog_kennels", "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state."}
{"db_id": "dog_kennels", "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["Employee", "6915 Oberbrunner Point Suite 491\nGleasonville, LA ", "West Heidi", "Indiana"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'."}
{"db_id": "dog_kennels", "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "table_data_path": "csv_files/dog_kennels/owners/data.csv", "execution_results": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nowner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number\n1,Nora,Haley,0647 Hintz Village Apt. 024,Lake Tia,Wisconsin,93165,lynn81@example.org,1-682-845-0116x63235,478.978.0729\n2,Melisa,DuBuque,1204 Mae Highway Apt. 107,Port Reannamouth,Virginia,45244,ykris@example.com,(799)563-0260x454,(722)768-5439x484\n3,Jaclyn,Stoltenberg,2635 Caitlyn Plains,Barrettburgh,Vermont,02647,hudson.favian@example.com,916.976.9480x13851,481-483-9083x37986\n4,Tre,Hamill,692 Jaskolski Forges,Brakusfurt,Florida,87304,marks.gail@example.org,1-332-849-1908,739-136-7202\n5,Johann,Fisher,68118 Daniel Row,Lake Valentin,NorthDakota,61019,zboncak.madonna@example.net,(544)034-1670,1-626-264-7659x1697\n6,Kade,Rippin,51934 Treutel Harbor,Lake Carleyborough,Arizona,25609,margaretta.runte@example.net,318-052-6573,+70(4)9217952551\n7,Emelie,Mertz,2417 Keara Stravenue Apt. 146,Lake Jennyferfort,NewYork,00589,angeline99@example.com,(058)997-7627,121.381.3316x6535\n8,Rolando,Prohaska,57382 Yost Ridges,South Afton,Arkansas,86010,kturner@example.net,01802479758,(783)271-6744x4507\n9,Adelle,Ondricka,9212 Rosenbaum Lights,East Hillardberg,Washington,92406,fschoen@example.net,066.264.7885,+00(2)4323592985\n10,Lorenz,Nicolas,59509 Mellie Mountain,New Margaretteborough,SouthDakota,78297,ymaggio@example.com,085.557.0379x84348,559.874.3011x989\n\nQuestion: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email."}
{"db_id": "dog_kennels", "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "table_data_path": "csv_files/dog_kennels/owners/data.csv", "execution_results": [["Johann", "Fisher", "zboncak.madonna@example.net"], ["Cindy", "Schmitt", "wpfeffer@example.net"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nowner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number\n1,Nora,Haley,0647 Hintz Village Apt. 024,Lake Tia,Wisconsin,93165,lynn81@example.org,1-682-845-0116x63235,478.978.0729\n2,Melisa,DuBuque,1204 Mae Highway Apt. 107,Port Reannamouth,Virginia,45244,ykris@example.com,(799)563-0260x454,(722)768-5439x484\n3,Jaclyn,Stoltenberg,2635 Caitlyn Plains,Barrettburgh,Vermont,02647,hudson.favian@example.com,916.976.9480x13851,481-483-9083x37986\n4,Tre,Hamill,692 Jaskolski Forges,Brakusfurt,Florida,87304,marks.gail@example.org,1-332-849-1908,739-136-7202\n5,Johann,Fisher,68118 Daniel Row,Lake Valentin,NorthDakota,61019,zboncak.madonna@example.net,(544)034-1670,1-626-264-7659x1697\n6,Kade,Rippin,51934 Treutel Harbor,Lake Carleyborough,Arizona,25609,margaretta.runte@example.net,318-052-6573,+70(4)9217952551\n7,Emelie,Mertz,2417 Keara Stravenue Apt. 146,Lake Jennyferfort,NewYork,00589,angeline99@example.com,(058)997-7627,121.381.3316x6535\n8,Rolando,Prohaska,57382 Yost Ridges,South Afton,Arkansas,86010,kturner@example.net,01802479758,(783)271-6744x4507\n9,Adelle,Ondricka,9212 Rosenbaum Lights,East Hillardberg,Washington,92406,fschoen@example.net,066.264.7885,+00(2)4323592985\n10,Lorenz,Nicolas,59509 Mellie Mountain,New Margaretteborough,SouthDakota,78297,ymaggio@example.com,085.557.0379x84348,559.874.3011x989\n\nQuestion: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'."}
{"db_id": "dog_kennels", "question": "How many dogs have an age below the average?", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: How many dogs have an age below the average?"}
{"db_id": "dog_kennels", "question": "Count the number of dogs of an age below the average.", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [[9]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: Count the number of dogs of an age below the average."}
{"db_id": "dog_kennels", "question": "How much does the most recent treatment cost?", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[407]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: How much does the most recent treatment cost?"}
{"db_id": "dog_kennels", "question": "Show me the cost of the most recently performed treatment.", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "table_data_path": "csv_files/dog_kennels/treatments/data.csv", "execution_results": [[407]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ntreatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment\n1,14,9,WALK,2018-03-19 04:39:54,567\n2,4,10,VAC,2018-03-15 20:25:34,147\n3,14,4,EXAM,2018-03-08 05:26:23,429\n4,2,8,VAC,2018-03-01 04:14:46,266\n5,12,14,VAC,2018-03-23 13:52:10,668\n6,10,4,EXAM,2018-03-11 04:23:15,313\n7,15,14,EXAM,2018-03-10 11:45:58,852\n8,2,6,EXAM,2018-03-24 22:25:58,407\n9,14,10,WALK,2018-03-14 19:10:40,139\n10,10,7,WALK,2018-02-28 17:09:43,681\n\nQuestion: Show me the cost of the most recently performed treatment."}
{"db_id": "dog_kennels", "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no."}
{"db_id": "dog_kennels", "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["Kacey", "6", "7.57"], ["Lyric", "4", "4.36"], ["Evangeline", "1", "4.01"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables."}
{"db_id": "dog_kennels", "question": "What is the average age of all the dogs?", "query": "SELECT avg(age) FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [[5.066666666666666]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: What is the average age of all the dogs?"}
{"db_id": "dog_kennels", "question": "Compute the average age of all the dogs.", "query": "SELECT avg(age) FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [[5.066666666666666]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: Compute the average age of all the dogs."}
{"db_id": "dog_kennels", "question": "What is the age of the oldest dog?", "query": "SELECT max(age) FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["9"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: What is the age of the oldest dog?"}
{"db_id": "dog_kennels", "question": "Tell me the age of the oldest dog.", "query": "SELECT max(age) FROM Dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["9"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: Tell me the age of the oldest dog."}
{"db_id": "dog_kennels", "question": "How much does each charge type costs? List both charge type and amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges", "table_data_path": "csv_files/dog_kennels/charges/data.csv", "execution_results": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncharge_id,charge_type,charge_amount\n1,Daily Accommodation,98\n2,Drugs,322\n3,Health Check,640\n\nQuestion: How much does each charge type costs? List both charge type and amount."}
{"db_id": "dog_kennels", "question": "List each charge type and its amount.", "query": "SELECT charge_type ,  charge_amount FROM Charges", "table_data_path": "csv_files/dog_kennels/charges/data.csv", "execution_results": [["Daily Accommodation", 98], ["Drugs", 322], ["Health Check", 640]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncharge_id,charge_type,charge_amount\n1,Daily Accommodation,98\n2,Drugs,322\n3,Health Check,640\n\nQuestion: List each charge type and its amount."}
{"db_id": "dog_kennels", "question": "How much does the most expensive charge type costs?", "query": "SELECT max(charge_amount) FROM Charges", "table_data_path": "csv_files/dog_kennels/charges/data.csv", "execution_results": [[640]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncharge_id,charge_type,charge_amount\n1,Daily Accommodation,98\n2,Drugs,322\n3,Health Check,640\n\nQuestion: How much does the most expensive charge type costs?"}
{"db_id": "dog_kennels", "question": "What is the charge amount of the most expensive charge type?", "query": "SELECT max(charge_amount) FROM Charges", "table_data_path": "csv_files/dog_kennels/charges/data.csv", "execution_results": [[640]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ncharge_id,charge_type,charge_amount\n1,Daily Accommodation,98\n2,Drugs,322\n3,Health Check,640\n\nQuestion: What is the charge amount of the most expensive charge type?"}
{"db_id": "dog_kennels", "question": "List the email, cell phone and home phone of all the professionals.", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: List the email, cell phone and home phone of all the professionals."}
{"db_id": "dog_kennels", "question": "What are the email, cell phone and home phone of each professional?", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "table_data_path": "csv_files/dog_kennels/professionals/data.csv", "execution_results": [["deanna.schuster@example.com", "(275)939-2435x80863", "+71(6)2898266914"], ["lucile.shanahan@example.org", "889-940-2676", "+02(1)0259033559"], ["uboehm@example.org", "(369)908-7311x065", "325-155-0801x7005"], ["lourdes.lowe@example.net", "00230569697", "312.216.3352"], ["mekhi.little@example.org", "011.193.9081x3186", "1-609-566-2752x25197"], ["jacynthe.mclaughlin@example.net", "139-321-7313", "+43(5)1132733868"], ["lambert62@example.org", "499-434-0215x1628", "022.529.0550x1319"], ["goyette.roosevelt@example.net", "328.842.3792", "891.475.2256"], ["schneider.kathryne@example.org", "962-983-8109x3509", "320-508-6023"], ["jerrod.bahringer@example.org", "461-801-2600", "(230)338-3342x585"], ["west.eula@example.net", "609-405-2990", "(920)304-4499x59146"], ["marquardt.furman@example.org", "1-181-670-9466", "246-951-0080x76716"], ["delphine29@example.com", "880-659-7577x736", "346.594.3739"], ["cole.margarita@example.org", "1-185-137-1945x409", "971.048.3763x9404"], ["jeichmann@example.com", "1-258-285-4707x8020", "1-138-287-3775"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nprofessional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number\n1,Employee,Taryn,6915 Oberbrunner Point Suite 491\nGleasonville, LA ,West Heidi,Indiana,06646,Braun,deanna.schuster@example.com,+71(6)2898266914,(275)939-2435x80863\n2,Employee,Jayson,88665 Terence Lodge Apt. 904\nCorneliusfort, NC 194,North Odellfurt,Connecticut,43129,Ullrich,lucile.shanahan@example.org,+02(1)0259033559,889-940-2676\n3,Employee,Olaf,68589 Bradly Manor\nNew Audrey, IN 91497,Jaceton,Wisconsin,77129,Watsica,uboehm@example.org,325-155-0801x7005,(369)908-7311x065\n4,Veterenarian,Vernice,72532 Hane Course\nLake Berylland, ND 95283,Domenickton,Mississippi,02281,Tillman,lourdes.lowe@example.net,312.216.3352,00230569697\n5,Veterenarian,Danny,188 VonRueden Tunnel Suite 630\nNorth Macibury, NV ,New Laurytown,Hawaii,84515,Considine,mekhi.little@example.org,1-609-566-2752x25197,011.193.9081x3186\n6,Veterenarian,Ruben,17286 Waters Green\nEast Bernadinefort, CA 89573,Baileymouth,NewMexico,52476,O'Reilly,jacynthe.mclaughlin@example.net,+43(5)1132733868,139-321-7313\n7,Veterenarian,Velva,44234 Marvin Shoals Suite 659\nNorth Frances, AL 23,McLaughlinfort,NorthCarolina,67980,Hayes,lambert62@example.org,022.529.0550x1319,499-434-0215x1628\n8,Employee,Karley,36895 Eli Ferry\nPort Marcelle, FL 45712,Kirastad,Indiana,33020,Hyatt,goyette.roosevelt@example.net,891.475.2256,328.842.3792\n9,Veterenarian,Monte,07073 Brenna Ways Suite 089\nLowehaven, KY 93275-96,South Rockyport,SouthCarolina,80775,Kshlerin,schneider.kathryne@example.org,320-508-6023,962-983-8109x3509\n10,Employee,Domenica,7284 Torphy Flats Apt. 610\nDiannaburgh, SC 78560,New Maryjane,California,54312,Jacobs,jerrod.bahringer@example.org,(230)338-3342x585,461-801-2600\n\nQuestion: What are the email, cell phone and home phone of each professional?"}
{"db_id": "dog_kennels", "question": "What are all the possible breed type and size type combinations?", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: What are all the possible breed type and size type combinations?"}
{"db_id": "dog_kennels", "question": "Find the distinct breed type and size type combinations for dogs.", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "table_data_path": "csv_files/dog_kennels/dogs/data.csv", "execution_results": [["ESK", "LGE"], ["BUL", "LGE"], ["BUL", "MED"], ["HUS", "MED"], ["ESK", "SML"], ["HUS", "SML"], ["ESK", "MED"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\ndog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed\n1,3,1,ESK,LGE,Kacey,6,2012-01-27 05:11:53,1,7.57,2017-09-08 20:10:13,2018-03-06 16:32:11,2018-03-25 06:58:44\n2,11,0,BUL,LGE,Hipolito,9,2013-02-13 05:15:21,0,1.72,2017-12-22 05:02:02,2018-03-25 08:12:51,2018-03-25 02:11:32\n3,1,0,BUL,MED,Mavis,8,2008-05-19 15:54:49,1,8.04,2017-06-25 10:14:05,2018-03-07 21:45:43,2018-03-25 10:25:46\n4,14,0,ESK,LGE,Houston,5,2008-10-09 22:38:53,0,2.18,2017-04-20 00:58:55,2018-03-18 15:12:50,2018-03-24 19:12:22\n5,7,0,BUL,MED,Jeffrey,4,2018-03-17 04:05:12,0,1.39,2017-10-25 00:55:34,2018-02-27 11:54:35,2018-03-25 04:50:22\n6,5,0,HUS,MED,Merritt,9,2015-02-26 21:31:22,1,9.8,2017-04-15 09:25:31,2018-03-08 15:03:00,2018-03-25 13:07:04\n7,3,0,BUL,MED,Narciso,2,2017-09-19 05:39:09,1,9.48,2017-05-06 08:03:52,2018-02-27 00:27:57,2018-03-25 06:29:10\n8,14,0,ESK,SML,George,2,2013-02-20 14:50:56,0,8.95,2017-10-16 20:06:21,2018-03-23 16:02:04,2018-03-25 02:47:40\n9,2,0,BUL,MED,Bessie,4,2012-05-31 08:01:36,1,3.52,2018-01-17 11:44:16,2018-02-25 23:45:30,2018-03-25 06:46:07\n10,6,0,HUS,MED,Troy,9,2012-07-11 17:15:10,0,8.96,2017-12-29 06:08:26,2018-03-18 07:47:40,2018-03-25 04:42:14\n\nQuestion: Find the distinct breed type and size type combinations for dogs."}
{"db_id": "singer", "question": "How many singers are there?", "query": "SELECT count(*) FROM singer", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: How many singers are there?"}
{"db_id": "singer", "question": "What is the count of singers?", "query": "SELECT count(*) FROM singer", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [[8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What is the count of singers?"}
{"db_id": "singer", "question": "List the name of singers in ascending order of net worth.", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: List the name of singers in ascending order of net worth."}
{"db_id": "singer", "question": "What are the names of singers ordered by ascending net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Abigail Johnson"], ["Susanne Klatten"], ["Gina Rinehart"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Alice Walton"], ["Christy Walton"], ["Liliane Bettencourt"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the names of singers ordered by ascending net worth?"}
{"db_id": "singer", "question": "What are the birth year and citizenship of singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the birth year and citizenship of singers?"}
{"db_id": "singer", "question": "What are the birth years and citizenships of the singers?", "query": "SELECT Birth_Year ,  Citizenship FROM singer", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [[1944.0, "France"], [1948.0, "United States"], [1949.0, "United States"], [1942.0, "Chile"], [1940.0, "United States"], [1953.0, "Australia"], [1962.0, "Germany"], [1961.0, "United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the birth years and citizenships of the singers?"}
{"db_id": "singer", "question": "List the name of singers whose citizenship is not \"France\".", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: List the name of singers whose citizenship is not \"France\"."}
{"db_id": "singer", "question": "What are the names of the singers who are not French citizens?", "query": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Christy Walton"], ["Alice Walton"], ["Iris Fontbona"], ["Jacqueline Mars"], ["Gina Rinehart"], ["Susanne Klatten"], ["Abigail Johnson"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the names of the singers who are not French citizens?"}
{"db_id": "singer", "question": "Show the name of singers whose birth year is either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Christy Walton"], ["Alice Walton"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: Show the name of singers whose birth year is either 1948 or 1949?"}
{"db_id": "singer", "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Christy Walton"], ["Alice Walton"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the names of the singers whose birth years are either 1948 or 1949?"}
{"db_id": "singer", "question": "What is the name of the singer with the largest net worth?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Liliane Bettencourt"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What is the name of the singer with the largest net worth?"}
{"db_id": "singer", "question": "What is the name of the singer who is worth the most?", "query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Liliane Bettencourt"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What is the name of the singer who is worth the most?"}
{"db_id": "singer", "question": "Show different citizenship of singers and the number of singers of each citizenship.", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: Show different citizenship of singers and the number of singers of each citizenship."}
{"db_id": "singer", "question": "For each citizenship, how many singers are from that country?", "query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Australia", 1], ["Chile", 1], ["France", 1], ["Germany", 1], ["United States", 4]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: For each citizenship, how many singers are from that country?"}
{"db_id": "singer", "question": "Please show the most common citizenship of singers.", "query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: Please show the most common citizenship of singers."}
{"db_id": "singer", "question": "What is the most common singer citizenship ?", "query": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What is the most common singer citizenship ?"}
{"db_id": "singer", "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: Show different citizenships and the maximum net worth of singers of each citizenship."}
{"db_id": "singer", "question": "For each citizenship, what is the maximum net worth?", "query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["Australia", 17.0], ["Chile", 17.4], ["France", 30.0], ["Germany", 14.3], ["United States", 28.8]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: For each citizenship, what is the maximum net worth?"}
{"db_id": "singer", "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: Show the citizenship shared by singers with birth year before 1945 and after 1955."}
{"db_id": "singer", "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "table_data_path": "csv_files/singer/singer/data.csv", "execution_results": [["United States"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nSinger_ID,Name,Birth_Year,Net_Worth_Millions,Citizenship\n1,Liliane Bettencourt,1944.0,30.0,France\n2,Christy Walton,1948.0,28.8,United States\n3,Alice Walton,1949.0,26.3,United States\n4,Iris Fontbona,1942.0,17.4,Chile\n5,Jacqueline Mars,1940.0,17.8,United States\n6,Gina Rinehart,1953.0,17.0,Australia\n7,Susanne Klatten,1962.0,14.3,Germany\n8,Abigail Johnson,1961.0,12.7,United States\n\nQuestion: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?"}
{"db_id": "real_estate_properties", "question": "How many available features are there in total?", "query": "SELECT count(*) FROM Other_Available_Features", "table_data_path": "csv_files/real_estate_properties/other_available_features/data.csv", "execution_results": [[3]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nfeature_id,feature_type_code,feature_name,feature_description\n2,Amenity,AirCon,Air Conditioning.\n3,Amenity,Pool,Swimming Pool.\n4,Security,BurglarAlarm,Burglar Alarm\n\nQuestion: How many available features are there in total?"}
{"db_id": "real_estate_properties", "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "table_data_path": "csv_files/real_estate_properties/properties/data.csv", "execution_results": [["longacre"], ["parc coliseum"], ["parc east"], ["park"], ["renoir"], ["ten tower"], ["the cole"], ["vogue"]], "prompt": "Below are the first few lines of a CSV file. You need to write a Python program to solve the provided question.\n\nHeader and first few lines of CSV file:\nproperty_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details\n1,House,1991-06-21 23:52:10,1979-05-13 16:58:06,park,4745 Emerson Stravenue Suite 829\nSouth Garret, IN 16772-5682,7,372652.2909,1.68,4201.8,aut,suscipit,,,,,,,,,,,,,,\n2,House,1990-05-25 23:01:51,1990-11-14 19:16:38,the cole,098 Tremaine Highway Suite 569\nSouth Wilford, NJ 46587-3537,1,661536468.4429,8.7122,21769471.8328,est,est,,,,,,,,,,,,,,\n3,Other,1986-11-26 04:12:18,1981-06-26 21:28:28,prism,062 Micaela Court Apt. 707\nMargretville, WV 51628-3617,8,1337,11375259.502,5,ut,et,,,,,,,,,,,,,,\n4,Field,2017-09-14 15:49:23,2003-02-27 18:17:11,riverside,49578 Ayden Mountains\nNew Russellhaven, UT 46626,6,192374065.8,15.17,4514.807,nesciunt,adipisci,,,,,,,,,,,,,,\n5,Apartment,2016-05-06 16:53:39,2012-08-19 07:36:57,parc east,2765 Schulist Stream\nLindmouth, UT 03391-3817,5,983.8596,10.1067,1.0012,quo,sequi,,,,,,,,,,,,,,\n6,Shop,1994-02-14 02:27:13,1995-01-31 11:18:42,high line,6837 Darien Views Apt. 475\nSouth Maraview, KS 77770,9,2573,0,476919.3,sed,culpa,,,,,,,,,,,,,,\n7,Shop,1996-09-16 22:04:27,1998-09-15 05:26:22,avalon,092 Paucek Highway Apt. 772\nEast Erika, IA 61358,8,150045.7568,296733,2794972.2495,quos,est,,,,,,,,,,,,,,\n8,Apartment,1976-06-10 20:25:38,2001-11-09 04:37:33,vogue,24365 Ulices Run\nHomenicktown, MD 88485-6198,9,13.4715,0,0,fuga,odio,,,,,,,,,,,,,,\n9,Apartment,1978-05-15 10:53:37,1971-04-14 03:23:49,longacre,107 Roob Courts\nErdmanburgh, IA 42926-0873,5,2219.6778,3520911.5258,3344706.5755,enim,sit,,,,,,,,,,,,,,\n10,Apartment,2003-12-25 16:13:19,1997-01-07 19:52:45,renoir,084 Lakin Vista Apt. 394\nFishertown, MA 16876,9,77172926.3,1.5509,244353758.1824,consequatur,vero,,,,,,,,,,,,,,\n\nQuestion: What are the names of properties that are either houses or apartments with more than 1 room?"}
