{"csv1_path": "infiagent/merge_test/2_0_0.csv", "csv2_path": "infiagent/merge_test/2_0_1.csv", "questions": ["Merge all rows in the two tables that the length of 'sch_dep_time' is less than 17 and the length of 'station' is less than 12, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/41_1_0.csv", "csv2_path": "infiagent/merge_test/41_1_1.csv", "questions": ["Combine all rows from both tables where the value of 'sqft_above' is not '1300', joining on shared column values and replacing missing values with NA."]}
{"csv1_path": "infiagent/merge_test/46_2_0.csv", "csv2_path": "infiagent/merge_test/46_2_1.csv", "questions": ["Combine all rows from both tables, display the values of TIME and LOCATION columns, and group them by the shared column names. Only display the merged rows that were successful."]}
{"csv1_path": "infiagent/merge_test/18_2_0.csv", "csv2_path": "infiagent/merge_test/18_2_1.csv", "questions": ["Combine the tables by aligning rows with matching column names, where the value of 'age' is greater than 53 and the length of 'income' is greater than 6, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/25_0_0.csv", "csv2_path": "infiagent/merge_test/25_0_1.csv", "questions": ["Merge all rows in the two tables that the value of 'NumberOfDependents' is greater than 1.0, show the value of  NumberOfTime60-89DaysPastDueNotWorse, NumberOfDependents , RevolvingUtilizationOfUnsecuredLines , DebtRatio , NumberOfOpenCreditLinesAndLoans , NumberRealEstateLoansOrLines , age  and Unnamed: 0, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/13_3_0.csv", "csv2_path": "infiagent/merge_test/13_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'WINDSPEED' is less than 7.0, show the value of VIS and DATE TIME, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/14_3_0.csv", "csv2_path": "infiagent/merge_test/14_3_1.csv", "questions": ["Combine the data from both tables where the value of 'number_of_errors' is more than 6.0 and the value of 'salary_in_thousands_of_dollars' is below 990, and merge it based on the same column names. Only retain the rows that were successfully merged."]}
{"csv1_path": "infiagent/merge_test/23_1_0.csv", "csv2_path": "infiagent/merge_test/23_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'number_of_dependents' is not less than 0.0 and the value of 'number_of_open_credit_lines_and_loans' is not greater than 8, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/11_3_0.csv", "csv2_path": "infiagent/merge_test/11_3_1.csv", "questions": ["Merge all rows in the two tables, show the value of  origin, modelyear , horsepower  and mpg, merging by entries with the same column name,  and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/16_1_0.csv", "csv2_path": "infiagent/merge_test/16_1_1.csv", "questions": ["Combine rows from the two tables where 'casual' is not '0', merging by entries with the same column names, and retain only the successfully merged data."]}
{"csv1_path": "infiagent/merge_test/19_1_0.csv", "csv2_path": "infiagent/merge_test/19_1_1.csv", "questions": ["Combine the rows in two tables where the 'Department Name' length is greater than 20 and 'budget_year_end' is not '9/30/2017'. Merge entries with the same column name and retain only the successfully merged segments."]}
{"csv1_path": "infiagent/merge_test/9_2_0.csv", "csv2_path": "infiagent/merge_test/9_2_1.csv", "questions": ["Merge all rows in the two tables that the value of 'contempt' is '0.0' and the value of 'anger' is '0.0', merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/18_3_0.csv", "csv2_path": "infiagent/merge_test/18_3_1.csv", "questions": ["Combine rows from both tables where the length of the 'education' field exceeds 8, and display the values of 'income', 'hour-per-week', 'workclass', 'capital-loos', 'marital-status', and 'age' during the merge process. The merged rows will be outputted, preserving only the successfully merged portions, with matching column names used as the merge key."]}
{"csv1_path": "infiagent/merge_test/47_3_0.csv", "csv2_path": "infiagent/merge_test/47_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'Engineering' is not less than 14.1, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/4_3_0.csv", "csv2_path": "infiagent/merge_test/4_3_1.csv", "questions": ["Combine rows from both tables where the length of the 'timestamp' column is less than 23 and the value of 'num. calls answered' is greater than 0, joining on common column names, and leaving blank values as NAN."]}
{"csv1_path": "infiagent/merge_test/3_1_0.csv", "csv2_path": "infiagent/merge_test/3_1_1.csv", "questions": ["Combine the rows from both tables where the 'Generosity' value is greater than or equal to 0.21684, using matching column names, and replace any missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/40_1_0.csv", "csv2_path": "infiagent/merge_test/40_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'city_name' is 'None', merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/24_2_0.csv", "csv2_path": "infiagent/merge_test/24_2_1.csv", "questions": ["Merge all rows in the two tables, show the value of  Limit, Cards , Income , Education  and Unnamed: 0, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/14_1_0.csv", "csv2_path": "infiagent/merge_test/14_1_1.csv", "questions": ["Combine the rows in two tables where 'salary_in_thousands_of_dollars' is less than or equal to 990, display the values of number_of_runs_batted_in, number_of_errors, number_of_strike_outs, number_of_runs, number_of_hits, number_of_doubles, batting_average, number_of_triples, on_base_percentage, and salary_in_thousands_of_dollars. Merge entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/1_3_0.csv", "csv2_path": "infiagent/merge_test/1_3_1.csv", "questions": ["Merge all rows in the two tables that the length of 'Date' is greater than 10, show the value of  Cumulative trips (since launch): and Date, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/50_1_0.csv", "csv2_path": "infiagent/merge_test/50_1_1.csv", "questions": ["Combine the rows in the two tables where 'wind_deg' is greater than or equal to 180.0, with columns having the same name, and replace missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/12_2_0.csv", "csv2_path": "infiagent/merge_test/12_2_1.csv", "questions": ["Combine the rows from the two tables where 'ANNUAL_RT' is not equal to '11310.0' and the length of 'NAME' exceeds 15 characters, merging entries with the same column names while retaining only the merged portions that are successful."]}
{"csv1_path": "infiagent/merge_test/24_1_0.csv", "csv2_path": "infiagent/merge_test/24_1_1.csv", "questions": ["Combine all rows from the two tables, display the values of Cards and Unnamed: 0, merging by rows with the same column names, and fill in missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/5_3_0.csv", "csv2_path": "infiagent/merge_test/5_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'Source' is less than 102, merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/44_0_0.csv", "csv2_path": "infiagent/merge_test/44_0_1.csv", "questions": ["Merge all rows in the two tables, show the value of  Open, Volume , Close  and Unnamed: 0, merging by entries with the same column name,  and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/8_2_0.csv", "csv2_path": "infiagent/merge_test/8_2_1.csv", "questions": ["Combine rows from both tables where the 'Length' is greater than or equal to 0.46 and the 'Shucked weight' is greater than or equal to 0.194, merging by entries with the same column name, and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/33_2_0.csv", "csv2_path": "infiagent/merge_test/33_2_1.csv", "questions": ["Merge all rows in the two tables that the length of 'text' is greater than 4228, show the value of  publishedAt, text , urlToImage , author  and Unnamed: 0, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/35_3_0.csv", "csv2_path": "infiagent/merge_test/35_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'year' is not greater than 1982, show the value of  country and year, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/3_0_0.csv", "csv2_path": "infiagent/merge_test/3_0_1.csv", "questions": ["Combine the data from both tables, preserving the original column names, and consolidate the rows based on matching column names. Display the following values: Happiness Rank, Happiness Score, Economy (GDP per Capita), Freedom, Standard Error, Trust (Government Corruption), Health (Life Expectancy), Dystopia Residual, and Country. Fill any missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/36_1_0.csv", "csv2_path": "infiagent/merge_test/36_1_1.csv", "questions": ["Combine the data from the two tables, displaying the values of gdpPercap_1957, gdpPercap_1992, gdpPercap_2007, gdpPercap_2002, gdpPercap_1972, and country, merging rows with the same column name, and filling in any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/34_0_0.csv", "csv2_path": "infiagent/merge_test/34_0_1.csv", "questions": ["Merge two tables based on shared column names, and display the values of max_diffsel, min_diffsel, and site. If there are no shared column names, fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/40_2_0.csv", "csv2_path": "infiagent/merge_test/40_2_1.csv", "questions": ["Combine the rows from both tables where 'review_count' is less than or equal to 177 and 'hotel_id' is greater than or equal to 1641016, consolidating entries with identical column names while preserving only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/21_2_0.csv", "csv2_path": "infiagent/merge_test/21_2_1.csv", "questions": ["Merge all rows in the two tables that the value of 'year' is '2005', show the value of  damage_imputed, damage_USD , max_storm_cat , max_sust_wind , deaths , year  and Unnamed: 0, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/23_3_0.csv", "csv2_path": "infiagent/merge_test/23_3_1.csv", "questions": ["Combine the rows from both tables where the 'number_of_open_credit_lines_and_loans' value is less than 8. Display the values of 'number_of_open_credit_lines_and_loans', 'number_of_times90_days_late', and 'revolving_utilization_of_unsecured_lines' for the merged entries. Merge the rows based on common column names and fill in any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/29_0_0.csv", "csv2_path": "infiagent/merge_test/29_0_1.csv", "questions": ["Combine rows from both tables where the value of 'Close' is less than or equal to 107.95 and the value of 'Volume' is less than 45696176, merging by common column values and inserting missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/47_1_0.csv", "csv2_path": "infiagent/merge_test/47_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'Physical Sciences' is not greater than 32.6 and the value of 'Education' is not less than 75.95060123, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/44_1_0.csv", "csv2_path": "infiagent/merge_test/44_1_1.csv", "questions": ["Show the values of Close, Volume, and Unnamed: 0 for all merged rows in the two tables, where the merge is performed based on the column names with the same name, and only the successfully merged portions are kept."]}
{"csv1_path": "infiagent/merge_test/22_1_0.csv", "csv2_path": "infiagent/merge_test/22_1_1.csv", "questions": ["Merge all rows in the two tables, show the value of  date, total_vaccinations , total_vaccinations_per_hundred , people_fully_vaccinated_per_hundred  and country, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/26_3_0.csv", "csv2_path": "infiagent/merge_test/26_3_1.csv", "questions": ["Merge all rows in the two tables that the length of 'School' is greater than 10 and the value of 'Wins' is not greater than 3, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/30_0_0.csv", "csv2_path": "infiagent/merge_test/30_0_1.csv", "questions": ["Merge all rows in the two tables that the value of 'per_point_diff' is '26.55%', show the value of  per_point_diff and votes_dem, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/43_1_0.csv", "csv2_path": "infiagent/merge_test/43_1_1.csv", "questions": ["Combine the tables by matching rows with the same column name where 'smoker' does not equal 'no', and fill NULL values with NaN."]}
{"csv1_path": "infiagent/merge_test/33_0_0.csv", "csv2_path": "infiagent/merge_test/33_0_1.csv", "questions": ["Merge all rows in the two tables that the value of 'compound' is less than 0.7461, merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/49_1_0.csv", "csv2_path": "infiagent/merge_test/49_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'Low' is not greater than 316.1, show the value of  Close, Low , Volume  and Time, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/10_0_0.csv", "csv2_path": "infiagent/merge_test/10_0_1.csv", "questions": ["Combine rows from both tables where the value of 'Count' is 1.0 and the value of 'Expungible' is False, using common column values for merging, and replace missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/41_2_0.csv", "csv2_path": "infiagent/merge_test/41_2_1.csv", "questions": ["Combine the rows from the two tables where the 'Unnamed: 0' value is less than or equal to 10806. Display the values of 'bathrooms', 'zipcode', 'bedrooms', 'yr_renovated', 'sqft_lot', 'condition', and 'sqft_living', while also showing 'Unnamed: 0'. Merge the entries with the same column names by filling in any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/27_0_0.csv", "csv2_path": "infiagent/merge_test/27_0_1.csv", "questions": ["Combine rows from two tables and display the values of Calendar Date (TDB) and JDTDB. Merge the data based on the same column names and keep only the successful merges."]}
{"csv1_path": "infiagent/merge_test/10_2_0.csv", "csv2_path": "infiagent/merge_test/10_2_1.csv", "questions": ["Merge all rows in the two tables that the length of 'Offense_Type' is less than 11, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/41_0_0.csv", "csv2_path": "infiagent/merge_test/41_0_1.csv", "questions": ["Combine the rows in two tables where 'sqft_basement' is greater than 0, displaying sqft_lot15, view, sqft_living15, sqft_basement, sqft_living, zipcode, sqft_above, sqft_lot, floors, yr_renovated, long, waterfront, condition, grade, bedrooms, and Unnamed: 0. Merge entries with the same column name and fill missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/48_1_0.csv", "csv2_path": "infiagent/merge_test/48_1_1.csv", "questions": ["Join both tables on columns with matching names and replace any values in merged rows where 'class9' equals '0.0' with NAN."]}
{"csv1_path": "infiagent/merge_test/35_0_0.csv", "csv2_path": "infiagent/merge_test/35_0_1.csv", "questions": ["Join both tables on columns with common names and retain only the successfully merged rows where the value of 'pop' is less than 13867957, and display the columns 'pop' and 'year' from the resulting joined table."]}
{"csv1_path": "infiagent/merge_test/39_1_0.csv", "csv2_path": "infiagent/merge_test/39_1_1.csv", "questions": ["Combine the tables by matching rows with 'Unnamed: 0' values less than 367, and display Race, Alignment, Eye color, Publisher, Gender, Skin color, Hair color, and Unnamed: 0 columns. Only include successfully merged entries with the same column names."]}
{"csv1_path": "infiagent/merge_test/37_3_0.csv", "csv2_path": "infiagent/merge_test/37_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'gloss' is 'the end', merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/25_1_0.csv", "csv2_path": "infiagent/merge_test/25_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'NumberOfTimes90DaysLate' is '0', show the value of  NumberOfTime30-59DaysPastDueNotWorse, NumberOfOpenCreditLinesAndLoans , NumberRealEstateLoansOrLines , NumberOfTimes90DaysLate , RevolvingUtilizationOfUnsecuredLines  and Unnamed: 0, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/48_3_0.csv", "csv2_path": "infiagent/merge_test/48_3_1.csv", "questions": ["Merge all rows in the two tables that the value of 'class3' is not greater than 0.0, show the value of  class5, class1 , class9 , class2  and ID, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/43_0_0.csv", "csv2_path": "infiagent/merge_test/43_0_1.csv", "questions": ["Merge all rows in the two tables that the length of 'smoker' is less than 2 and the value of 'children' is not less than 1, merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/1_0_0.csv", "csv2_path": "infiagent/merge_test/1_0_1.csv", "questions": ["Merge all rows in the two tables that the value of 'Total Annual Memberships Sold' is less than 126811 and the value of 'Miles traveled today (midnight to 11:59 pm)' is less than 27503, merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/30_3_0.csv", "csv2_path": "infiagent/merge_test/30_3_1.csv", "questions": ["Merge all rows in the two tables, show the value of  per_point_diff, per_dem , votes_gop , diff , total_votes , state_abbr  and votes_dem, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/45_2_0.csv", "csv2_path": "infiagent/merge_test/45_2_1.csv", "questions": ["Combine the rows of the two tables where the 'MedianHouseValue' is not less than 1.81, and display the values of Longitude, AveBedrms, AveRooms, and MedInc. Merge entries with the same column name, and fill in any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/2_2_0.csv", "csv2_path": "infiagent/merge_test/2_2_1.csv", "questions": ["Merge all rows in the two tables, show the value of  route_code, act_arr_time , end_time , station , sch_dep_time , sch_arr_time  and origin_station_code, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/42_1_0.csv", "csv2_path": "infiagent/merge_test/42_1_1.csv", "questions": ["Merge all rows in the two tables that the length of '#featureID' is greater than 36, show the value of  row ID, standard_indentification_level_1  and #featureID, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/16_3_0.csv", "csv2_path": "infiagent/merge_test/16_3_1.csv", "questions": ["Merge all rows in the two tables, show the value of  casual and instant, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/14_0_0.csv", "csv2_path": "infiagent/merge_test/14_0_1.csv", "questions": ["Combine rows from both tables where the value of 'number_of_walks' is less than 34 and the value of 'indicator_of_free_agent_in_1991_1992' is '0', merging by common column values and preserving only the successfully merged elements."]}
{"csv1_path": "infiagent/merge_test/24_0_0.csv", "csv2_path": "infiagent/merge_test/24_0_1.csv", "questions": ["Combine the data from both tables based on the same column names and display the values of Cards, Limit, Rating, Balance, and Unnamed: 0. Only include the rows where the merge was successful."]}
{"csv1_path": "infiagent/merge_test/22_0_0.csv", "csv2_path": "infiagent/merge_test/22_0_1.csv", "questions": ["Combine the tables by aligning rows with the same column names, excluding those where 'vaccines' is 'Pfizer/BioNTech'. Fill any empty cells with NaN."]}
{"csv1_path": "infiagent/merge_test/20_0_0.csv", "csv2_path": "infiagent/merge_test/20_0_1.csv", "questions": ["Merge all rows in the two tables, show the value of  Number of Readmissions, Excess Readmission Ratio  and Hospital Name, merging by entries with the same column name,  and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/19_2_0.csv", "csv2_path": "infiagent/merge_test/19_2_1.csv", "questions": ["Merge all rows in the two tables that the value of 'budget_year_end' is not '9/30/2017', show the value of  budget_year_start, github-dept-code , dept_group  and Department Name, merging by entries with the same column name,  keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/34_1_0.csv", "csv2_path": "infiagent/merge_test/34_1_1.csv", "questions": ["Join the two tables on columns with matching names and keep only the merged rows where the value of 'abs_diffsel' is less than 4.51423766225707 and the value of 'max_diffsel' is greater than 0.7027858681526212, while preferring the values from the merged rows over those from either table in case of conflicts."]}
{"csv1_path": "infiagent/merge_test/26_2_0.csv", "csv2_path": "infiagent/merge_test/26_2_1.csv", "questions": ["Combine rows from both tables where the length of 'STANDARD TEAM NAME' is less than 9, merging by matching column names and retaining only the successfully merged data."]}
{"csv1_path": "infiagent/merge_test/30_2_0.csv", "csv2_path": "infiagent/merge_test/30_2_1.csv", "questions": ["Combine the rows from the two tables where the 'per_dem' value is equal to or greater than 0.297546627448, using the same column names, and replace any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/21_0_0.csv", "csv2_path": "infiagent/merge_test/21_0_1.csv", "questions": ["Merge all rows in the two tables that the value of 'areas_affected' is not 'None', show the value of  year, areas_affected  and Unnamed: 0, merging by entries with the same column name, and fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/32_0_0.csv", "csv2_path": "infiagent/merge_test/32_0_1.csv", "questions": ["Combine the data from both tables, preserving the original row structure, and display the following columns: No. of cases, No. of deaths_max, No. of deaths_median, Year, No. of deaths_min, No. of cases_median, and Country. Merge the tables based on identical column names, and only include the successfully merged rows."]}
{"csv1_path": "infiagent/merge_test/30_1_0.csv", "csv2_path": "infiagent/merge_test/30_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'state_abbr' is 'TX', merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/12_1_0.csv", "csv2_path": "infiagent/merge_test/12_1_1.csv", "questions": ["Join the two tables by matching rows with the same column name, and display the values of DEPTID and NAME columns. If there are unmatched rows, fill in the blanks with NAN."]}
{"csv1_path": "infiagent/merge_test/33_1_0.csv", "csv2_path": "infiagent/merge_test/33_1_1.csv", "questions": ["Merge all rows in the two tables that the value of 'source' is not 'reuters', merging by entries with the same column name, keeping only the successfully merged portions."]}
{"csv1_path": "infiagent/merge_test/43_3_0.csv", "csv2_path": "infiagent/merge_test/43_3_1.csv", "questions": ["Combine the rows from the two tables where the 'bmi' value is more than 29.59 and the 'age' value is over 41, using the same column names, and retaining only the parts that have been successfully merged."]}
{"csv1_path": "infiagent/merge_test/20_3_0.csv", "csv2_path": "infiagent/merge_test/20_3_1.csv", "questions": ["Combine rows from both tables where the length of 'Start Date' exceeds 10 characters and 'Expected Readmission Rate' is less than 17.9, merging by columns with identical names, and retaining only the successfully merged data."]}
{"csv1_path": "infiagent/merge_test/5_0_0.csv", "csv2_path": "infiagent/merge_test/5_0_1.csv", "questions": ["Join both tables on columns with matching names and merge all rows where the value of 'Type' is 'Directed'. Display the values of lat_org, Type, Target, and Source, filling in any missing values with NAN."]}
{"csv1_path": "infiagent/merge_test/25_3_0.csv", "csv2_path": "infiagent/merge_test/25_3_1.csv", "questions": ["Combine the rows from the two tables where 'NumberRealEstateLoansOrLines' is greater than 1 and 'NumberOfTimes90DaysLate' is '0', and merge them based on the column name. Only include the successful merged sections."]}
{"csv1_path": "infiagent/merge_test/29_2_0.csv", "csv2_path": "infiagent/merge_test/29_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/45_0_0.csv", "csv2_path": "infiagent/merge_test/45_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/9_3_0.csv", "csv2_path": "infiagent/merge_test/9_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/46_1_0.csv", "csv2_path": "infiagent/merge_test/46_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/31_0_0.csv", "csv2_path": "infiagent/merge_test/31_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/6_2_0.csv", "csv2_path": "infiagent/merge_test/6_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/33_3_0.csv", "csv2_path": "infiagent/merge_test/33_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/8_1_0.csv", "csv2_path": "infiagent/merge_test/8_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/8_0_0.csv", "csv2_path": "infiagent/merge_test/8_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/2_3_0.csv", "csv2_path": "infiagent/merge_test/2_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo a successful merging process."]}
{"csv1_path": "infiagent/merge_test/41_3_0.csv", "csv2_path": "infiagent/merge_test/41_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/15_3_0.csv", "csv2_path": "infiagent/merge_test/15_3_1.csv", "questions": ["Combine the two tables and insert NAN values in the empty spaces."]}
{"csv1_path": "infiagent/merge_test/17_3_0.csv", "csv2_path": "infiagent/merge_test/17_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/48_0_0.csv", "csv2_path": "infiagent/merge_test/48_0_1.csv", "questions": ["Combine the two tables and retain only the rows that have been successfully integrated."]}
{"csv1_path": "infiagent/merge_test/28_0_0.csv", "csv2_path": "infiagent/merge_test/28_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/4_1_0.csv", "csv2_path": "infiagent/merge_test/4_1_1.csv", "questions": ["Combine two tables, retaining only the rows that have been successfully combined."]}
{"csv1_path": "infiagent/merge_test/26_0_0.csv", "csv2_path": "infiagent/merge_test/26_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/11_0_0.csv", "csv2_path": "infiagent/merge_test/11_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/23_2_0.csv", "csv2_path": "infiagent/merge_test/23_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/27_3_0.csv", "csv2_path": "infiagent/merge_test/27_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/36_2_0.csv", "csv2_path": "infiagent/merge_test/36_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/40_0_0.csv", "csv2_path": "infiagent/merge_test/40_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/12_3_0.csv", "csv2_path": "infiagent/merge_test/12_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/16_2_0.csv", "csv2_path": "infiagent/merge_test/16_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/38_3_0.csv", "csv2_path": "infiagent/merge_test/38_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/45_3_0.csv", "csv2_path": "infiagent/merge_test/45_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/5_2_0.csv", "csv2_path": "infiagent/merge_test/5_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that have been successfully integrated."]}
{"csv1_path": "infiagent/merge_test/16_0_0.csv", "csv2_path": "infiagent/merge_test/16_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/26_1_0.csv", "csv2_path": "infiagent/merge_test/26_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/18_0_0.csv", "csv2_path": "infiagent/merge_test/18_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/34_2_0.csv", "csv2_path": "infiagent/merge_test/34_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/13_0_0.csv", "csv2_path": "infiagent/merge_test/13_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/38_2_0.csv", "csv2_path": "infiagent/merge_test/38_2_1.csv", "questions": ["Combine the two tables and insert NAN values in the empty slots."]}
{"csv1_path": "infiagent/merge_test/28_1_0.csv", "csv2_path": "infiagent/merge_test/28_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/29_1_0.csv", "csv2_path": "infiagent/merge_test/29_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/39_3_0.csv", "csv2_path": "infiagent/merge_test/39_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/21_1_0.csv", "csv2_path": "infiagent/merge_test/21_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/38_1_0.csv", "csv2_path": "infiagent/merge_test/38_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/37_0_0.csv", "csv2_path": "infiagent/merge_test/37_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/31_1_0.csv", "csv2_path": "infiagent/merge_test/31_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/27_1_0.csv", "csv2_path": "infiagent/merge_test/27_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/19_0_0.csv", "csv2_path": "infiagent/merge_test/19_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/12_0_0.csv", "csv2_path": "infiagent/merge_test/12_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/3_2_0.csv", "csv2_path": "infiagent/merge_test/3_2_1.csv", "questions": ["Combine the two tables and insert NAN values in the empty spaces."]}
{"csv1_path": "infiagent/merge_test/32_3_0.csv", "csv2_path": "infiagent/merge_test/32_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/13_1_0.csv", "csv2_path": "infiagent/merge_test/13_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/5_1_0.csv", "csv2_path": "infiagent/merge_test/5_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/23_0_0.csv", "csv2_path": "infiagent/merge_test/23_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/36_0_0.csv", "csv2_path": "infiagent/merge_test/36_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/40_3_0.csv", "csv2_path": "infiagent/merge_test/40_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/45_1_0.csv", "csv2_path": "infiagent/merge_test/45_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/44_2_0.csv", "csv2_path": "infiagent/merge_test/44_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/8_3_0.csv", "csv2_path": "infiagent/merge_test/8_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/37_2_0.csv", "csv2_path": "infiagent/merge_test/37_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the records that have been successfully combined."]}
{"csv1_path": "infiagent/merge_test/25_2_0.csv", "csv2_path": "infiagent/merge_test/25_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/7_1_0.csv", "csv2_path": "infiagent/merge_test/7_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/9_0_0.csv", "csv2_path": "infiagent/merge_test/9_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/46_0_0.csv", "csv2_path": "infiagent/merge_test/46_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/46_3_0.csv", "csv2_path": "infiagent/merge_test/46_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/1_2_0.csv", "csv2_path": "infiagent/merge_test/1_2_1.csv", "questions": ["Combine the two tables and insert NAN in the empty spaces."]}
{"csv1_path": "infiagent/merge_test/37_1_0.csv", "csv2_path": "infiagent/merge_test/37_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/15_2_0.csv", "csv2_path": "infiagent/merge_test/15_2_1.csv", "questions": ["Combine two tables and retain only the rows that have been successfully combined."]}
{"csv1_path": "infiagent/merge_test/42_3_0.csv", "csv2_path": "infiagent/merge_test/42_3_1.csv", "questions": ["Combine the two tables and insert NAN values in the empty cells."]}
{"csv1_path": "infiagent/merge_test/13_2_0.csv", "csv2_path": "infiagent/merge_test/13_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/14_2_0.csv", "csv2_path": "infiagent/merge_test/14_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/7_2_0.csv", "csv2_path": "infiagent/merge_test/7_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/49_3_0.csv", "csv2_path": "infiagent/merge_test/49_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/35_1_0.csv", "csv2_path": "infiagent/merge_test/35_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/27_2_0.csv", "csv2_path": "infiagent/merge_test/27_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/1_1_0.csv", "csv2_path": "infiagent/merge_test/1_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/6_1_0.csv", "csv2_path": "infiagent/merge_test/6_1_1.csv", "questions": ["Combine the two tables and retain only the records that have been successfully matched."]}
{"csv1_path": "infiagent/merge_test/15_1_0.csv", "csv2_path": "infiagent/merge_test/15_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/7_3_0.csv", "csv2_path": "infiagent/merge_test/7_3_1.csv", "questions": ["Combine the two tables and insert NAN values into the empty spaces."]}
{"csv1_path": "infiagent/merge_test/6_0_0.csv", "csv2_path": "infiagent/merge_test/6_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/17_2_0.csv", "csv2_path": "infiagent/merge_test/17_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/10_3_0.csv", "csv2_path": "infiagent/merge_test/10_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/11_2_0.csv", "csv2_path": "infiagent/merge_test/11_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/42_0_0.csv", "csv2_path": "infiagent/merge_test/42_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/39_0_0.csv", "csv2_path": "infiagent/merge_test/39_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/42_2_0.csv", "csv2_path": "infiagent/merge_test/42_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/19_3_0.csv", "csv2_path": "infiagent/merge_test/19_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/11_1_0.csv", "csv2_path": "infiagent/merge_test/11_1_1.csv", "questions": ["Combine the two tables and insert NAN values in the empty spaces."]}
{"csv1_path": "infiagent/merge_test/4_0_0.csv", "csv2_path": "infiagent/merge_test/4_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/2_1_0.csv", "csv2_path": "infiagent/merge_test/2_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/24_3_0.csv", "csv2_path": "infiagent/merge_test/24_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/47_0_0.csv", "csv2_path": "infiagent/merge_test/47_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/6_3_0.csv", "csv2_path": "infiagent/merge_test/6_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/9_1_0.csv", "csv2_path": "infiagent/merge_test/9_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/32_2_0.csv", "csv2_path": "infiagent/merge_test/32_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/49_2_0.csv", "csv2_path": "infiagent/merge_test/49_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/49_0_0.csv", "csv2_path": "infiagent/merge_test/49_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/44_3_0.csv", "csv2_path": "infiagent/merge_test/44_3_1.csv", "questions": ["Combine the contents of two tables, retaining only those rows that undergo a successful fusion."]}
{"csv1_path": "infiagent/merge_test/36_3_0.csv", "csv2_path": "infiagent/merge_test/36_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/17_0_0.csv", "csv2_path": "infiagent/merge_test/17_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/50_0_0.csv", "csv2_path": "infiagent/merge_test/50_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/50_3_0.csv", "csv2_path": "infiagent/merge_test/50_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/50_2_0.csv", "csv2_path": "infiagent/merge_test/50_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/31_3_0.csv", "csv2_path": "infiagent/merge_test/31_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/22_2_0.csv", "csv2_path": "infiagent/merge_test/22_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/43_2_0.csv", "csv2_path": "infiagent/merge_test/43_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/35_2_0.csv", "csv2_path": "infiagent/merge_test/35_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/7_0_0.csv", "csv2_path": "infiagent/merge_test/7_0_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/47_2_0.csv", "csv2_path": "infiagent/merge_test/47_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/3_3_0.csv", "csv2_path": "infiagent/merge_test/3_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/21_3_0.csv", "csv2_path": "infiagent/merge_test/21_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/29_3_0.csv", "csv2_path": "infiagent/merge_test/29_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/20_1_0.csv", "csv2_path": "infiagent/merge_test/20_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/10_1_0.csv", "csv2_path": "infiagent/merge_test/10_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/15_0_0.csv", "csv2_path": "infiagent/merge_test/15_0_1.csv", "questions": ["Combine the two tables, retaining only the rows that have been successfully combined."]}
{"csv1_path": "infiagent/merge_test/48_2_0.csv", "csv2_path": "infiagent/merge_test/48_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/28_2_0.csv", "csv2_path": "infiagent/merge_test/28_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/32_1_0.csv", "csv2_path": "infiagent/merge_test/32_1_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/20_2_0.csv", "csv2_path": "infiagent/merge_test/20_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/38_0_0.csv", "csv2_path": "infiagent/merge_test/38_0_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/39_2_0.csv", "csv2_path": "infiagent/merge_test/39_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/4_2_0.csv", "csv2_path": "infiagent/merge_test/4_2_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/28_3_0.csv", "csv2_path": "infiagent/merge_test/28_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/17_1_0.csv", "csv2_path": "infiagent/merge_test/17_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/22_3_0.csv", "csv2_path": "infiagent/merge_test/22_3_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/31_2_0.csv", "csv2_path": "infiagent/merge_test/31_2_1.csv", "questions": ["Combine the two tables and fill in missing values with NaN."]}
{"csv1_path": "infiagent/merge_test/34_3_0.csv", "csv2_path": "infiagent/merge_test/34_3_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
{"csv1_path": "infiagent/merge_test/18_1_0.csv", "csv2_path": "infiagent/merge_test/18_1_1.csv", "questions": ["Combine the contents of two tables, retaining only the rows that undergo successful merging."]}
